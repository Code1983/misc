
build/app_ax45043_driver.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	080079d1 	.word	0x080079d1
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	0800adf1 	.word	0x0800adf1
 800005c:	0800adb1 	.word	0x0800adb1
 8000060:	0800ad71 	.word	0x0800ad71
 8000064:	0800ad31 	.word	0x0800ad31
 8000068:	0800acf1 	.word	0x0800acf1
 800006c:	0800ab21 	.word	0x0800ab21
 8000070:	0800aaf1 	.word	0x0800aaf1
 8000074:	0800aac1 	.word	0x0800aac1
 8000078:	0800aa91 	.word	0x0800aa91
 800007c:	0800aa61 	.word	0x0800aa61
 8000080:	0800aa31 	.word	0x0800aa31
 8000084:	0800aa01 	.word	0x0800aa01
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	0800ac31 	.word	0x0800ac31
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	0800b121 	.word	0x0800b121
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	0800a831 	.word	0x0800a831
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	0800ab51 	.word	0x0800ab51
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	0800a9d1 	.word	0x0800a9d1
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	0800a9a1 	.word	0x0800a9a1
 8000124:	0800a971 	.word	0x0800a971
 8000128:	0800a941 	.word	0x0800a941
 800012c:	0800a911 	.word	0x0800a911
 8000130:	0800a8e1 	.word	0x0800a8e1
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	0800a8b1 	.word	0x0800a8b1
 8000154:	0800a881 	.word	0x0800a881
 8000158:	0800a851 	.word	0x0800a851
 800015c:	080002bb 	.word	0x080002bb
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f00a ffd4 	bl	800b1b0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f00a fb0a 	bl	800a820 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f00a ff7e 	bl	800b150 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f00a ffa4 	bl	800b1a0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f007 fb3a 	bl	80078e0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f00a bf88 	b.w	800b190 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	0800e628 	.word	0x0800e628
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	200018e8 	.word	0x200018e8
                ldr     r1, =__bss_base__
 80002a0:	200018e8 	.word	0x200018e8
                ldr     r2, =__bss_end__
 80002a4:	20002be8 	.word	0x20002be8
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f008 ff88 	bl	80091f0 <chThdExit>

080002e0 <_zombies>:
_zombies:       b       _zombies
 80002e0:	e7fe      	b.n	80002e0 <_zombies>

080002e2 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e2:	f00a f92d 	bl	800a540 <chSchDoReschedule>

080002e6 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e8:	e7fe      	b.n	80002e8 <_port_exit_from_isr+0x2>
	...

080002ec <memcpy>:
 80002ec:	4684      	mov	ip, r0
 80002ee:	ea41 0300 	orr.w	r3, r1, r0
 80002f2:	f013 0303 	ands.w	r3, r3, #3
 80002f6:	d16d      	bne.n	80003d4 <memcpy+0xe8>
 80002f8:	3a40      	subs	r2, #64	; 0x40
 80002fa:	d341      	bcc.n	8000380 <memcpy+0x94>
 80002fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000300:	f840 3b04 	str.w	r3, [r0], #4
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	3a40      	subs	r2, #64	; 0x40
 800037e:	d2bd      	bcs.n	80002fc <memcpy+0x10>
 8000380:	3230      	adds	r2, #48	; 0x30
 8000382:	d311      	bcc.n	80003a8 <memcpy+0xbc>
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	3a10      	subs	r2, #16
 80003a6:	d2ed      	bcs.n	8000384 <memcpy+0x98>
 80003a8:	320c      	adds	r2, #12
 80003aa:	d305      	bcc.n	80003b8 <memcpy+0xcc>
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	3a04      	subs	r2, #4
 80003b6:	d2f9      	bcs.n	80003ac <memcpy+0xc0>
 80003b8:	3204      	adds	r2, #4
 80003ba:	d008      	beq.n	80003ce <memcpy+0xe2>
 80003bc:	07d2      	lsls	r2, r2, #31
 80003be:	bf1c      	itt	ne
 80003c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003c4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003c8:	d301      	bcc.n	80003ce <memcpy+0xe2>
 80003ca:	880b      	ldrh	r3, [r1, #0]
 80003cc:	8003      	strh	r3, [r0, #0]
 80003ce:	4660      	mov	r0, ip
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	2a08      	cmp	r2, #8
 80003d6:	d313      	bcc.n	8000400 <memcpy+0x114>
 80003d8:	078b      	lsls	r3, r1, #30
 80003da:	d08d      	beq.n	80002f8 <memcpy+0xc>
 80003dc:	f010 0303 	ands.w	r3, r0, #3
 80003e0:	d08a      	beq.n	80002f8 <memcpy+0xc>
 80003e2:	f1c3 0304 	rsb	r3, r3, #4
 80003e6:	1ad2      	subs	r2, r2, r3
 80003e8:	07db      	lsls	r3, r3, #31
 80003ea:	bf1c      	itt	ne
 80003ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003f0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003f4:	d380      	bcc.n	80002f8 <memcpy+0xc>
 80003f6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003fa:	f820 3b02 	strh.w	r3, [r0], #2
 80003fe:	e77b      	b.n	80002f8 <memcpy+0xc>
 8000400:	3a04      	subs	r2, #4
 8000402:	d3d9      	bcc.n	80003b8 <memcpy+0xcc>
 8000404:	3a01      	subs	r2, #1
 8000406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800040a:	f800 3b01 	strb.w	r3, [r0], #1
 800040e:	d2f9      	bcs.n	8000404 <memcpy+0x118>
 8000410:	780b      	ldrb	r3, [r1, #0]
 8000412:	7003      	strb	r3, [r0, #0]
 8000414:	784b      	ldrb	r3, [r1, #1]
 8000416:	7043      	strb	r3, [r0, #1]
 8000418:	788b      	ldrb	r3, [r1, #2]
 800041a:	7083      	strb	r3, [r0, #2]
 800041c:	4660      	mov	r0, ip
 800041e:	4770      	bx	lr
 8000420:	eba2 0003 	sub.w	r0, r2, r3
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop

08000428 <strcmp>:
 8000428:	7802      	ldrb	r2, [r0, #0]
 800042a:	780b      	ldrb	r3, [r1, #0]
 800042c:	2a01      	cmp	r2, #1
 800042e:	bf28      	it	cs
 8000430:	429a      	cmpcs	r2, r3
 8000432:	d1f5      	bne.n	8000420 <memcpy+0x134>
 8000434:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000438:	ea40 0401 	orr.w	r4, r0, r1
 800043c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000440:	f06f 0c00 	mvn.w	ip, #0
 8000444:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000448:	b312      	cbz	r2, 8000490 <strcmp+0x68>
 800044a:	ea80 0401 	eor.w	r4, r0, r1
 800044e:	f014 0f07 	tst.w	r4, #7
 8000452:	d16a      	bne.n	800052a <strcmp+0x102>
 8000454:	f000 0407 	and.w	r4, r0, #7
 8000458:	f020 0007 	bic.w	r0, r0, #7
 800045c:	f004 0503 	and.w	r5, r4, #3
 8000460:	f021 0107 	bic.w	r1, r1, #7
 8000464:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000468:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800046c:	f014 0f04 	tst.w	r4, #4
 8000470:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000474:	fa0c f405 	lsl.w	r4, ip, r5
 8000478:	ea62 0204 	orn	r2, r2, r4
 800047c:	ea66 0604 	orn	r6, r6, r4
 8000480:	d00a      	beq.n	8000498 <strcmp+0x70>
 8000482:	ea63 0304 	orn	r3, r3, r4
 8000486:	4662      	mov	r2, ip
 8000488:	ea67 0704 	orn	r7, r7, r4
 800048c:	4666      	mov	r6, ip
 800048e:	e003      	b.n	8000498 <strcmp+0x70>
 8000490:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000494:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000498:	fa82 f54c 	uadd8	r5, r2, ip
 800049c:	ea82 0406 	eor.w	r4, r2, r6
 80004a0:	faa4 f48c 	sel	r4, r4, ip
 80004a4:	bb6c      	cbnz	r4, 8000502 <strcmp+0xda>
 80004a6:	fa83 f54c 	uadd8	r5, r3, ip
 80004aa:	ea83 0507 	eor.w	r5, r3, r7
 80004ae:	faa5 f58c 	sel	r5, r5, ip
 80004b2:	b995      	cbnz	r5, 80004da <strcmp+0xb2>
 80004b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004bc:	fa82 f54c 	uadd8	r5, r2, ip
 80004c0:	ea82 0406 	eor.w	r4, r2, r6
 80004c4:	faa4 f48c 	sel	r4, r4, ip
 80004c8:	fa83 f54c 	uadd8	r5, r3, ip
 80004cc:	ea83 0507 	eor.w	r5, r3, r7
 80004d0:	faa5 f58c 	sel	r5, r5, ip
 80004d4:	4325      	orrs	r5, r4
 80004d6:	d0db      	beq.n	8000490 <strcmp+0x68>
 80004d8:	b99c      	cbnz	r4, 8000502 <strcmp+0xda>
 80004da:	ba2d      	rev	r5, r5
 80004dc:	fab5 f485 	clz	r4, r5
 80004e0:	f024 0407 	bic.w	r4, r4, #7
 80004e4:	fa27 f104 	lsr.w	r1, r7, r4
 80004e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80004ec:	fa23 f304 	lsr.w	r3, r3, r4
 80004f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80004f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80004fc:	eba0 0001 	sub.w	r0, r0, r1
 8000500:	4770      	bx	lr
 8000502:	ba24      	rev	r4, r4
 8000504:	fab4 f484 	clz	r4, r4
 8000508:	f024 0407 	bic.w	r4, r4, #7
 800050c:	fa26 f104 	lsr.w	r1, r6, r4
 8000510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000514:	fa22 f204 	lsr.w	r2, r2, r4
 8000518:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800051c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000520:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000524:	eba0 0001 	sub.w	r0, r0, r1
 8000528:	4770      	bx	lr
 800052a:	f014 0f03 	tst.w	r4, #3
 800052e:	d13c      	bne.n	80005aa <strcmp+0x182>
 8000530:	f010 0403 	ands.w	r4, r0, #3
 8000534:	d128      	bne.n	8000588 <strcmp+0x160>
 8000536:	f850 2b08 	ldr.w	r2, [r0], #8
 800053a:	f851 3b08 	ldr.w	r3, [r1], #8
 800053e:	fa82 f54c 	uadd8	r5, r2, ip
 8000542:	ea82 0503 	eor.w	r5, r2, r3
 8000546:	faa5 f58c 	sel	r5, r5, ip
 800054a:	b95d      	cbnz	r5, 8000564 <strcmp+0x13c>
 800054c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000554:	fa82 f54c 	uadd8	r5, r2, ip
 8000558:	ea82 0503 	eor.w	r5, r2, r3
 800055c:	faa5 f58c 	sel	r5, r5, ip
 8000560:	2d00      	cmp	r5, #0
 8000562:	d0e8      	beq.n	8000536 <strcmp+0x10e>
 8000564:	ba2d      	rev	r5, r5
 8000566:	fab5 f485 	clz	r4, r5
 800056a:	f024 0407 	bic.w	r4, r4, #7
 800056e:	fa23 f104 	lsr.w	r1, r3, r4
 8000572:	fa22 f204 	lsr.w	r2, r2, r4
 8000576:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800057a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000582:	eba0 0001 	sub.w	r0, r0, r1
 8000586:	4770      	bx	lr
 8000588:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800058c:	f020 0003 	bic.w	r0, r0, #3
 8000590:	f850 2b08 	ldr.w	r2, [r0], #8
 8000594:	f021 0103 	bic.w	r1, r1, #3
 8000598:	f851 3b08 	ldr.w	r3, [r1], #8
 800059c:	fa0c f404 	lsl.w	r4, ip, r4
 80005a0:	ea62 0204 	orn	r2, r2, r4
 80005a4:	ea63 0304 	orn	r3, r3, r4
 80005a8:	e7c9      	b.n	800053e <strcmp+0x116>
 80005aa:	f010 0403 	ands.w	r4, r0, #3
 80005ae:	d01a      	beq.n	80005e6 <strcmp+0x1be>
 80005b0:	eba1 0104 	sub.w	r1, r1, r4
 80005b4:	f020 0003 	bic.w	r0, r0, #3
 80005b8:	07e4      	lsls	r4, r4, #31
 80005ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80005be:	d006      	beq.n	80005ce <strcmp+0x1a6>
 80005c0:	d20f      	bcs.n	80005e2 <strcmp+0x1ba>
 80005c2:	788b      	ldrb	r3, [r1, #2]
 80005c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005c8:	1ae4      	subs	r4, r4, r3
 80005ca:	d106      	bne.n	80005da <strcmp+0x1b2>
 80005cc:	b12b      	cbz	r3, 80005da <strcmp+0x1b2>
 80005ce:	78cb      	ldrb	r3, [r1, #3]
 80005d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	d100      	bne.n	80005da <strcmp+0x1b2>
 80005d8:	b91b      	cbnz	r3, 80005e2 <strcmp+0x1ba>
 80005da:	4620      	mov	r0, r4
 80005dc:	f85d 4b10 	ldr.w	r4, [sp], #16
 80005e0:	4770      	bx	lr
 80005e2:	f101 0104 	add.w	r1, r1, #4
 80005e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80005ea:	07cc      	lsls	r4, r1, #31
 80005ec:	f021 0103 	bic.w	r1, r1, #3
 80005f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80005f4:	d848      	bhi.n	8000688 <strcmp+0x260>
 80005f6:	d224      	bcs.n	8000642 <strcmp+0x21a>
 80005f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 80005fc:	fa82 f54c 	uadd8	r5, r2, ip
 8000600:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000604:	faa5 f58c 	sel	r5, r5, ip
 8000608:	d10a      	bne.n	8000620 <strcmp+0x1f8>
 800060a:	b965      	cbnz	r5, 8000626 <strcmp+0x1fe>
 800060c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000610:	ea84 0402 	eor.w	r4, r4, r2
 8000614:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000618:	d10e      	bne.n	8000638 <strcmp+0x210>
 800061a:	f850 2b04 	ldr.w	r2, [r0], #4
 800061e:	e7eb      	b.n	80005f8 <strcmp+0x1d0>
 8000620:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000624:	e055      	b.n	80006d2 <strcmp+0x2aa>
 8000626:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800062a:	d14d      	bne.n	80006c8 <strcmp+0x2a0>
 800062c:	7808      	ldrb	r0, [r1, #0]
 800062e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000632:	f1c0 0000 	rsb	r0, r0, #0
 8000636:	4770      	bx	lr
 8000638:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800063c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000640:	e047      	b.n	80006d2 <strcmp+0x2aa>
 8000642:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000646:	fa82 f54c 	uadd8	r5, r2, ip
 800064a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800064e:	faa5 f58c 	sel	r5, r5, ip
 8000652:	d10a      	bne.n	800066a <strcmp+0x242>
 8000654:	b965      	cbnz	r5, 8000670 <strcmp+0x248>
 8000656:	f851 3b04 	ldr.w	r3, [r1], #4
 800065a:	ea84 0402 	eor.w	r4, r4, r2
 800065e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000662:	d10c      	bne.n	800067e <strcmp+0x256>
 8000664:	f850 2b04 	ldr.w	r2, [r0], #4
 8000668:	e7eb      	b.n	8000642 <strcmp+0x21a>
 800066a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800066e:	e030      	b.n	80006d2 <strcmp+0x2aa>
 8000670:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000674:	d128      	bne.n	80006c8 <strcmp+0x2a0>
 8000676:	880b      	ldrh	r3, [r1, #0]
 8000678:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800067c:	e029      	b.n	80006d2 <strcmp+0x2aa>
 800067e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000682:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000686:	e024      	b.n	80006d2 <strcmp+0x2aa>
 8000688:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800068c:	fa82 f54c 	uadd8	r5, r2, ip
 8000690:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000694:	faa5 f58c 	sel	r5, r5, ip
 8000698:	d10a      	bne.n	80006b0 <strcmp+0x288>
 800069a:	b965      	cbnz	r5, 80006b6 <strcmp+0x28e>
 800069c:	f851 3b04 	ldr.w	r3, [r1], #4
 80006a0:	ea84 0402 	eor.w	r4, r4, r2
 80006a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006a8:	d109      	bne.n	80006be <strcmp+0x296>
 80006aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ae:	e7eb      	b.n	8000688 <strcmp+0x260>
 80006b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006b4:	e00d      	b.n	80006d2 <strcmp+0x2aa>
 80006b6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006ba:	d105      	bne.n	80006c8 <strcmp+0x2a0>
 80006bc:	680b      	ldr	r3, [r1, #0]
 80006be:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006c6:	e004      	b.n	80006d2 <strcmp+0x2aa>
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006d0:	4770      	bx	lr
 80006d2:	ba12      	rev	r2, r2
 80006d4:	ba1b      	rev	r3, r3
 80006d6:	fa82 f44c 	uadd8	r4, r2, ip
 80006da:	ea82 0403 	eor.w	r4, r2, r3
 80006de:	faa4 f58c 	sel	r5, r4, ip
 80006e2:	fab5 f485 	clz	r4, r5
 80006e6:	fa02 f204 	lsl.w	r2, r2, r4
 80006ea:	fa03 f304 	lsl.w	r3, r3, r4
 80006ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
 80006f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 80006fa:	4770      	bx	lr
 80006fc:	0000      	movs	r0, r0
	...

08000700 <null_provider>:

  (void)size;
  (void)align;

  return NULL;
}
 8000700:	2000      	movs	r0, #0
 8000702:	4770      	bx	lr
	...

08000710 <__ch_delegate_fn0>:
 * @brief   Veneer for functions with no parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn0(va_list *argsp) {
 8000710:	b508      	push	{r3, lr}
  delegate_fn0_t fn0 = va_arg(*argsp, delegate_fn0_t);
 8000712:	6803      	ldr	r3, [r0, #0]
 8000714:	1d1a      	adds	r2, r3, #4
 8000716:	6002      	str	r2, [r0, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
  return fn0();
 800071a:	4798      	blx	r3
}
 800071c:	bd08      	pop	{r3, pc}
 800071e:	bf00      	nop

08000720 <__ch_delegate_fn1>:
 * @brief   Veneer for functions with one parameter.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000720:	b508      	push	{r3, lr}
  delegate_fn1_t fn1 = va_arg(*argsp, delegate_fn1_t);
 8000722:	6802      	ldr	r2, [r0, #0]
 8000724:	1d13      	adds	r3, r2, #4
 8000726:	6003      	str	r3, [r0, #0]
 8000728:	6811      	ldr	r1, [r2, #0]
  msg_t p1 = va_arg(*argsp, msg_t);
 800072a:	f102 0308 	add.w	r3, r2, #8
 800072e:	6003      	str	r3, [r0, #0]
  return fn1(p1);
 8000730:	6850      	ldr	r0, [r2, #4]
 8000732:	4788      	blx	r1
}
 8000734:	bd08      	pop	{r3, pc}
 8000736:	bf00      	nop
	...

08000740 <__ch_delegate_fn2>:
 * @brief   Veneer for functions with two parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn2(va_list *argsp) {
 8000740:	b510      	push	{r4, lr}
 8000742:	4603      	mov	r3, r0
  delegate_fn2_t fn2 = va_arg(*argsp, delegate_fn2_t);
 8000744:	6800      	ldr	r0, [r0, #0]
 8000746:	1d01      	adds	r1, r0, #4
 8000748:	6019      	str	r1, [r3, #0]
 800074a:	6804      	ldr	r4, [r0, #0]
  msg_t p1 = va_arg(*argsp, msg_t);
 800074c:	f100 0208 	add.w	r2, r0, #8
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	6840      	ldr	r0, [r0, #4]
  msg_t p2 = va_arg(*argsp, msg_t);
 8000754:	f101 0208 	add.w	r2, r1, #8
 8000758:	601a      	str	r2, [r3, #0]
  return fn2(p1, p2);
 800075a:	6849      	ldr	r1, [r1, #4]
 800075c:	47a0      	blx	r4
}
 800075e:	bd10      	pop	{r4, pc}

08000760 <__ch_delegate_fn3>:
 * @brief   Veneer for functions with three parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn3(va_list *argsp) {
 8000760:	b538      	push	{r3, r4, r5, lr}
 8000762:	4603      	mov	r3, r0
  delegate_fn3_t fn3 = va_arg(*argsp, delegate_fn3_t);
 8000764:	6802      	ldr	r2, [r0, #0]
 8000766:	1d11      	adds	r1, r2, #4
 8000768:	6001      	str	r1, [r0, #0]
 800076a:	6815      	ldr	r5, [r2, #0]
  msg_t p1 = va_arg(*argsp, msg_t);
 800076c:	f102 0408 	add.w	r4, r2, #8
 8000770:	6004      	str	r4, [r0, #0]
 8000772:	6850      	ldr	r0, [r2, #4]
  msg_t p2 = va_arg(*argsp, msg_t);
 8000774:	320c      	adds	r2, #12
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	6849      	ldr	r1, [r1, #4]
  msg_t p3 = va_arg(*argsp, msg_t);
 800077a:	f104 0208 	add.w	r2, r4, #8
 800077e:	601a      	str	r2, [r3, #0]
  return fn3(p1, p2, p3);
 8000780:	6862      	ldr	r2, [r4, #4]
 8000782:	47a8      	blx	r5
}
 8000784:	bd38      	pop	{r3, r4, r5, pc}
 8000786:	bf00      	nop
	...

08000790 <__ch_delegate_fn4>:
 * @brief   Veneer for functions with four parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn4(va_list *argsp) {
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	4603      	mov	r3, r0
  delegate_fn4_t fn4 = va_arg(*argsp, delegate_fn4_t);
 8000794:	6800      	ldr	r0, [r0, #0]
 8000796:	1d01      	adds	r1, r0, #4
 8000798:	6019      	str	r1, [r3, #0]
 800079a:	6806      	ldr	r6, [r0, #0]
  msg_t p1 = va_arg(*argsp, msg_t);
 800079c:	f100 0208 	add.w	r2, r0, #8
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	6840      	ldr	r0, [r0, #4]
  msg_t p2 = va_arg(*argsp, msg_t);
 80007a4:	f101 0508 	add.w	r5, r1, #8
 80007a8:	601d      	str	r5, [r3, #0]
 80007aa:	6849      	ldr	r1, [r1, #4]
  msg_t p3 = va_arg(*argsp, msg_t);
 80007ac:	f102 0408 	add.w	r4, r2, #8
 80007b0:	601c      	str	r4, [r3, #0]
 80007b2:	6852      	ldr	r2, [r2, #4]
  msg_t p4 = va_arg(*argsp, msg_t);
 80007b4:	f105 0408 	add.w	r4, r5, #8
 80007b8:	601c      	str	r4, [r3, #0]
  return fn4(p1, p2, p3, p4);
 80007ba:	686b      	ldr	r3, [r5, #4]
 80007bc:	47b0      	blx	r6
}
 80007be:	bd70      	pop	{r4, r5, r6, pc}

080007c0 <tmo>:
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
static mutex_t mtx1;
#endif

static void tmo(void *param) {(void)param;}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
	...

080007d0 <rt_test_005_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_005_001_setup(void) {
  tr1 = NULL;
 80007d0:	4b01      	ldr	r3, [pc, #4]	; (80007d8 <rt_test_005_001_setup+0x8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
}
 80007d6:	4770      	bx	lr
 80007d8:	20002480 	.word	0x20002480
 80007dc:	00000000 	.word	0x00000000

080007e0 <rt_test_002_003_execute>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <rt_test_002_003_execute+0x20>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	601a      	str	r2, [r3, #0]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80007e6:	2320      	movs	r3, #32
 80007e8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80007ec:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
 80007ee:	b672      	cpsid	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80007f0:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80007f4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80007f6:	2300      	movs	r3, #0
 80007f8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80007fc:	b662      	cpsie	i
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
  test_end_step(1);
}
 80007fe:	4770      	bx	lr
 8000800:	20002454 	.word	0x20002454
	...

08000810 <test_emit_token>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000810:	2320      	movs	r3, #32
 8000812:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void test_emit_token(char token) {

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_CFG_MAX_TOKENS])
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <test_emit_token+0x20>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a06      	ldr	r2, [pc, #24]	; (8000834 <test_emit_token+0x24>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d203      	bcs.n	8000828 <test_emit_token+0x18>
    *test_tokp++ = token;
 8000820:	1c59      	adds	r1, r3, #1
 8000822:	4a03      	ldr	r2, [pc, #12]	; (8000830 <test_emit_token+0x20>)
 8000824:	6011      	str	r1, [r2, #0]
 8000826:	7018      	strb	r0, [r3, #0]
 8000828:	2300      	movs	r3, #0
 800082a:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800082e:	4770      	bx	lr
 8000830:	20002468 	.word	0x20002468
 8000834:	20002468 	.word	0x20002468
	...

08000840 <obj_write>:
  return false;
}

static bool obj_write(objects_cache_t *ocp,
                      oc_object_t *objp,
                      bool async) {
 8000840:	b508      	push	{r3, lr}
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 8000842:	6948      	ldr	r0, [r1, #20]
 8000844:	3041      	adds	r0, #65	; 0x41
 8000846:	b2c0      	uxtb	r0, r0
 8000848:	f7ff ffe2 	bl	8000810 <test_emit_token>

  return false;
}
 800084c:	2000      	movs	r0, #0
 800084e:	bd08      	pop	{r3, pc}

08000850 <dis_func0>:
 * Shared code.
 ****************************************************************************/

static bool exit_flag;

static int dis_func0(void) {
 8000850:	b508      	push	{r3, lr}

  test_emit_token('0');
 8000852:	2030      	movs	r0, #48	; 0x30
 8000854:	f7ff ffdc 	bl	8000810 <test_emit_token>

  return (msg_t)0x55AA;
}
 8000858:	f245 50aa 	movw	r0, #21930	; 0x55aa
 800085c:	bd08      	pop	{r3, pc}
 800085e:	bf00      	nop

08000860 <dis_func1>:

static msg_t dis_func1(msg_t a) {
 8000860:	b510      	push	{r4, lr}
 8000862:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8000864:	b2c0      	uxtb	r0, r0
 8000866:	f7ff ffd3 	bl	8000810 <test_emit_token>

  return (msg_t)a;
}
 800086a:	4620      	mov	r0, r4
 800086c:	bd10      	pop	{r4, pc}
 800086e:	bf00      	nop

08000870 <dis_func2>:

static msg_t dis_func2(msg_t a, msg_t b) {
 8000870:	b538      	push	{r3, r4, r5, lr}
 8000872:	4604      	mov	r4, r0
 8000874:	460d      	mov	r5, r1

  test_emit_token((char)a);
 8000876:	b2c0      	uxtb	r0, r0
 8000878:	f7ff ffca 	bl	8000810 <test_emit_token>
  test_emit_token((char)b);
 800087c:	b2e8      	uxtb	r0, r5
 800087e:	f7ff ffc7 	bl	8000810 <test_emit_token>

  return (msg_t)a;
}
 8000882:	4620      	mov	r0, r4
 8000884:	bd38      	pop	{r3, r4, r5, pc}
 8000886:	bf00      	nop
	...

08000890 <dis_func3>:

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	4604      	mov	r4, r0
 8000894:	460e      	mov	r6, r1
 8000896:	4615      	mov	r5, r2

  test_emit_token((char)a);
 8000898:	b2c0      	uxtb	r0, r0
 800089a:	f7ff ffb9 	bl	8000810 <test_emit_token>
  test_emit_token((char)b);
 800089e:	b2f0      	uxtb	r0, r6
 80008a0:	f7ff ffb6 	bl	8000810 <test_emit_token>
  test_emit_token((char)c);
 80008a4:	b2e8      	uxtb	r0, r5
 80008a6:	f7ff ffb3 	bl	8000810 <test_emit_token>

  return (msg_t)a;
}
 80008aa:	4620      	mov	r0, r4
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	bf00      	nop

080008b0 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	4604      	mov	r4, r0
 80008b4:	460f      	mov	r7, r1
 80008b6:	4616      	mov	r6, r2
 80008b8:	461d      	mov	r5, r3

  test_emit_token((char)a);
 80008ba:	b2c0      	uxtb	r0, r0
 80008bc:	f7ff ffa8 	bl	8000810 <test_emit_token>
  test_emit_token((char)b);
 80008c0:	b2f8      	uxtb	r0, r7
 80008c2:	f7ff ffa5 	bl	8000810 <test_emit_token>
  test_emit_token((char)c);
 80008c6:	b2f0      	uxtb	r0, r6
 80008c8:	f7ff ffa2 	bl	8000810 <test_emit_token>
  test_emit_token((char)d);
 80008cc:	b2e8      	uxtb	r0, r5
 80008ce:	f7ff ff9f 	bl	8000810 <test_emit_token>

  return (msg_t)a;
}
 80008d2:	4620      	mov	r0, r4
 80008d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008d6:	bf00      	nop
	...

080008e0 <dis_func_end>:

static int dis_func_end(void) {
 80008e0:	b508      	push	{r3, lr}

  test_emit_token('Z');
 80008e2:	205a      	movs	r0, #90	; 0x5a
 80008e4:	f7ff ff94 	bl	8000810 <test_emit_token>
  exit_flag = true;
 80008e8:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <dis_func_end+0x14>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]

  return (msg_t)0xAA55;
}
 80008ee:	f64a 2055 	movw	r0, #43605	; 0xaa55
 80008f2:	bd08      	pop	{r3, pc}
 80008f4:	20001afc 	.word	0x20001afc
	...

08000900 <dyn_thread1>:
#endif
#if CH_CFG_USE_MEMPOOLS
static memory_pool_t mp1;
#endif

static THD_FUNCTION(dyn_thread1, p) {
 8000900:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8000902:	7800      	ldrb	r0, [r0, #0]
 8000904:	f7ff ff84 	bl	8000810 <test_emit_token>
}
 8000908:	bd08      	pop	{r3, pc}
 800090a:	bf00      	nop
 800090c:	0000      	movs	r0, r0
	...

08000910 <h3>:
static EVENTSOURCE_DECL(es1);
static EVENTSOURCE_DECL(es2);

static void h1(eventid_t id) {(void)id;test_emit_token('A');}
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8000910:	b508      	push	{r3, lr}
 8000912:	2043      	movs	r0, #67	; 0x43
 8000914:	f7ff ff7c 	bl	8000810 <test_emit_token>
 8000918:	bd08      	pop	{r3, pc}
 800091a:	bf00      	nop
 800091c:	0000      	movs	r0, r0
	...

08000920 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8000920:	b508      	push	{r3, lr}
 8000922:	2042      	movs	r0, #66	; 0x42
 8000924:	f7ff ff74 	bl	8000810 <test_emit_token>
 8000928:	bd08      	pop	{r3, pc}
 800092a:	bf00      	nop
 800092c:	0000      	movs	r0, r0
	...

08000930 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8000930:	b508      	push	{r3, lr}
 8000932:	2041      	movs	r0, #65	; 0x41
 8000934:	f7ff ff6c 	bl	8000810 <test_emit_token>
 8000938:	bd08      	pop	{r3, pc}
 800093a:	bf00      	nop
 800093c:	0000      	movs	r0, r0
	...

08000940 <thread>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(thread, p) {
 8000940:	b508      	push	{r3, lr}

  test_emit_token(*(char *)p);
 8000942:	7800      	ldrb	r0, [r0, #0]
 8000944:	f7ff ff64 	bl	8000810 <test_emit_token>
}
 8000948:	bd08      	pop	{r3, pc}
 800094a:	bf00      	nop
 800094c:	0000      	movs	r0, r0
	...

08000950 <test_print>:
void test_print(const char *msgp) {
 8000950:	b510      	push	{r4, lr}
 8000952:	4604      	mov	r4, r0
  while (*msgp)
 8000954:	7821      	ldrb	r1, [r4, #0]
 8000956:	b131      	cbz	r1, 8000966 <test_print+0x16>
    streamPut(test_chp, *msgp++);
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <test_print+0x18>)
 800095a:	6818      	ldr	r0, [r3, #0]
 800095c:	3401      	adds	r4, #1
 800095e:	6803      	ldr	r3, [r0, #0]
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	4798      	blx	r3
 8000964:	e7f6      	b.n	8000954 <test_print+0x4>
}
 8000966:	bd10      	pop	{r4, pc}
 8000968:	200023a8 	.word	0x200023a8
 800096c:	00000000 	.word	0x00000000

08000970 <test_println>:
void test_println(const char *msgp) {
 8000970:	b508      	push	{r3, lr}
  test_print(msgp);
 8000972:	f7ff ffed 	bl	8000950 <test_print>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <test_println+0x18>)
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	6803      	ldr	r3, [r0, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	2202      	movs	r2, #2
 8000980:	4902      	ldr	r1, [pc, #8]	; (800098c <test_println+0x1c>)
 8000982:	4798      	blx	r3
}
 8000984:	bd08      	pop	{r3, pc}
 8000986:	bf00      	nop
 8000988:	200023a8 	.word	0x200023a8
 800098c:	0800c40c 	.word	0x0800c40c

08000990 <test_printn>:
void test_printn(uint32_t n) {
 8000990:	b510      	push	{r4, lr}
 8000992:	b084      	sub	sp, #16
  if (!n)
 8000994:	b938      	cbnz	r0, 80009a6 <test_printn+0x16>
    streamPut(test_chp, '0');
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <test_printn+0x50>)
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	6803      	ldr	r3, [r0, #0]
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	2130      	movs	r1, #48	; 0x30
 80009a0:	4798      	blx	r3
}
 80009a2:	b004      	add	sp, #16
 80009a4:	bd10      	pop	{r4, pc}
 80009a6:	4602      	mov	r2, r0
    p = buf;
 80009a8:	466c      	mov	r4, sp
    while (n)
 80009aa:	b1a2      	cbz	r2, 80009d6 <test_printn+0x46>
      *p++ = (n % 10) + '0', n /= 10;
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <test_printn+0x54>)
 80009ae:	fba3 1302 	umull	r1, r3, r3, r2
 80009b2:	08db      	lsrs	r3, r3, #3
 80009b4:	4619      	mov	r1, r3
 80009b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009ba:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 80009be:	3330      	adds	r3, #48	; 0x30
 80009c0:	f804 3b01 	strb.w	r3, [r4], #1
 80009c4:	460a      	mov	r2, r1
 80009c6:	e7f0      	b.n	80009aa <test_printn+0x1a>
      streamPut(test_chp, *--p);
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <test_printn+0x50>)
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	6803      	ldr	r3, [r0, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 80009d4:	4798      	blx	r3
    while (p > buf)
 80009d6:	466b      	mov	r3, sp
 80009d8:	429c      	cmp	r4, r3
 80009da:	d8f5      	bhi.n	80009c8 <test_printn+0x38>
 80009dc:	e7e1      	b.n	80009a2 <test_printn+0x12>
 80009de:	bf00      	nop
 80009e0:	200023a8 	.word	0x200023a8
 80009e4:	cccccccd 	.word	0xcccccccd
	...

080009f0 <oslib_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 80009f0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 80009f2:	2501      	movs	r5, #1
 80009f4:	4b49      	ldr	r3, [pc, #292]	; (8000b1c <oslib_test_001_003_execute+0x12c>)
 80009f6:	601d      	str	r5, [r3, #0]
  {
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 80009f8:	4849      	ldr	r0, [pc, #292]	; (8000b20 <oslib_test_001_003_execute+0x130>)
 80009fa:	f7ff ffa9 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_MAILBOXES);
 80009fe:	4628      	mov	r0, r5
 8000a00:	f7ff ffc6 	bl	8000990 <test_printn>
    test_println("");
 8000a04:	4c47      	ldr	r4, [pc, #284]	; (8000b24 <oslib_test_001_003_execute+0x134>)
 8000a06:	4620      	mov	r0, r4
 8000a08:	f7ff ffb2 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 8000a0c:	4846      	ldr	r0, [pc, #280]	; (8000b28 <oslib_test_001_003_execute+0x138>)
 8000a0e:	f7ff ff9f 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_MEMCORE);
 8000a12:	4628      	mov	r0, r5
 8000a14:	f7ff ffbc 	bl	8000990 <test_printn>
    test_println("");
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f7ff ffa9 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 8000a1e:	4843      	ldr	r0, [pc, #268]	; (8000b2c <oslib_test_001_003_execute+0x13c>)
 8000a20:	f7ff ff96 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_HEAP);
 8000a24:	4628      	mov	r0, r5
 8000a26:	f7ff ffb3 	bl	8000990 <test_printn>
    test_println("");
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	f7ff ffa0 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 8000a30:	483f      	ldr	r0, [pc, #252]	; (8000b30 <oslib_test_001_003_execute+0x140>)
 8000a32:	f7ff ff8d 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_MEMPOOLS);
 8000a36:	4628      	mov	r0, r5
 8000a38:	f7ff ffaa 	bl	8000990 <test_printn>
    test_println("");
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f7ff ff97 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 8000a42:	483c      	ldr	r0, [pc, #240]	; (8000b34 <oslib_test_001_003_execute+0x144>)
 8000a44:	f7ff ff84 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
 8000a48:	4628      	mov	r0, r5
 8000a4a:	f7ff ffa1 	bl	8000990 <test_printn>
    test_println("");
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f7ff ff8e 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_PIPES:                   ");
 8000a54:	4838      	ldr	r0, [pc, #224]	; (8000b38 <oslib_test_001_003_execute+0x148>)
 8000a56:	f7ff ff7b 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_PIPES);
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	f7ff ff98 	bl	8000990 <test_printn>
    test_println("");
 8000a60:	4620      	mov	r0, r4
 8000a62:	f7ff ff85 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_OBJ_CACHES:              ");
 8000a66:	4835      	ldr	r0, [pc, #212]	; (8000b3c <oslib_test_001_003_execute+0x14c>)
 8000a68:	f7ff ff72 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_OBJ_CACHES);
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f7ff ff8f 	bl	8000990 <test_printn>
    test_println("");
 8000a72:	4620      	mov	r0, r4
 8000a74:	f7ff ff7c 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_DELEGATES:               ");
 8000a78:	4831      	ldr	r0, [pc, #196]	; (8000b40 <oslib_test_001_003_execute+0x150>)
 8000a7a:	f7ff ff69 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_DELEGATES);
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f7ff ff86 	bl	8000990 <test_printn>
    test_println("");
 8000a84:	4620      	mov	r0, r4
 8000a86:	f7ff ff73 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 8000a8a:	482e      	ldr	r0, [pc, #184]	; (8000b44 <oslib_test_001_003_execute+0x154>)
 8000a8c:	f7ff ff60 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_FACTORY);
 8000a90:	4628      	mov	r0, r5
 8000a92:	f7ff ff7d 	bl	8000990 <test_printn>
    test_println("");
 8000a96:	4620      	mov	r0, r4
 8000a98:	f7ff ff6a 	bl	8000970 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 8000a9c:	482a      	ldr	r0, [pc, #168]	; (8000b48 <oslib_test_001_003_execute+0x158>)
 8000a9e:	f7ff ff57 	bl	8000950 <test_print>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8000aa2:	2008      	movs	r0, #8
 8000aa4:	f7ff ff74 	bl	8000990 <test_printn>
    test_println("");
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	f7ff ff61 	bl	8000970 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 8000aae:	4827      	ldr	r0, [pc, #156]	; (8000b4c <oslib_test_001_003_execute+0x15c>)
 8000ab0:	f7ff ff4e 	bl	8000950 <test_print>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	f7ff ff6b 	bl	8000990 <test_printn>
    test_println("");
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff ff58 	bl	8000970 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 8000ac0:	4823      	ldr	r0, [pc, #140]	; (8000b50 <oslib_test_001_003_execute+0x160>)
 8000ac2:	f7ff ff45 	bl	8000950 <test_print>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
 8000ac6:	4628      	mov	r0, r5
 8000ac8:	f7ff ff62 	bl	8000990 <test_printn>
    test_println("");
 8000acc:	4620      	mov	r0, r4
 8000ace:	f7ff ff4f 	bl	8000970 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 8000ad2:	4820      	ldr	r0, [pc, #128]	; (8000b54 <oslib_test_001_003_execute+0x164>)
 8000ad4:	f7ff ff3c 	bl	8000950 <test_print>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
 8000ad8:	4628      	mov	r0, r5
 8000ada:	f7ff ff59 	bl	8000990 <test_printn>
    test_println("");
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f7ff ff46 	bl	8000970 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 8000ae4:	481c      	ldr	r0, [pc, #112]	; (8000b58 <oslib_test_001_003_execute+0x168>)
 8000ae6:	f7ff ff33 	bl	8000950 <test_print>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
 8000aea:	4628      	mov	r0, r5
 8000aec:	f7ff ff50 	bl	8000990 <test_printn>
    test_println("");
 8000af0:	4620      	mov	r0, r4
 8000af2:	f7ff ff3d 	bl	8000970 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 8000af6:	4819      	ldr	r0, [pc, #100]	; (8000b5c <oslib_test_001_003_execute+0x16c>)
 8000af8:	f7ff ff2a 	bl	8000950 <test_print>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
 8000afc:	4628      	mov	r0, r5
 8000afe:	f7ff ff47 	bl	8000990 <test_printn>
    test_println("");
 8000b02:	4620      	mov	r0, r4
 8000b04:	f7ff ff34 	bl	8000970 <test_println>
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
 8000b08:	4815      	ldr	r0, [pc, #84]	; (8000b60 <oslib_test_001_003_execute+0x170>)
 8000b0a:	f7ff ff21 	bl	8000950 <test_print>
    test_printn(CH_CFG_FACTORY_PIPES);
 8000b0e:	4628      	mov	r0, r5
 8000b10:	f7ff ff3e 	bl	8000990 <test_printn>
    test_println("");
 8000b14:	4620      	mov	r0, r4
 8000b16:	f7ff ff2b 	bl	8000970 <test_println>
  }
  test_end_step(1);
}
 8000b1a:	bd38      	pop	{r3, r4, r5, pc}
 8000b1c:	20002454 	.word	0x20002454
 8000b20:	0800b628 	.word	0x0800b628
 8000b24:	0800c3e4 	.word	0x0800c3e4
 8000b28:	0800b654 	.word	0x0800b654
 8000b2c:	0800b680 	.word	0x0800b680
 8000b30:	0800b6ac 	.word	0x0800b6ac
 8000b34:	0800b6d8 	.word	0x0800b6d8
 8000b38:	0800b704 	.word	0x0800b704
 8000b3c:	0800b730 	.word	0x0800b730
 8000b40:	0800b75c 	.word	0x0800b75c
 8000b44:	0800b788 	.word	0x0800b788
 8000b48:	0800b7b4 	.word	0x0800b7b4
 8000b4c:	0800b7e0 	.word	0x0800b7e0
 8000b50:	0800b80c 	.word	0x0800b80c
 8000b54:	0800b838 	.word	0x0800b838
 8000b58:	0800b864 	.word	0x0800b864
 8000b5c:	0800b890 	.word	0x0800b890
 8000b60:	0800b8bc 	.word	0x0800b8bc
	...

08000b70 <oslib_test_001_002_execute>:
static void oslib_test_001_002_execute(void) {
 8000b70:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8000b72:	2501      	movs	r5, #1
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <oslib_test_001_002_execute+0x68>)
 8000b76:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/LIB");
 8000b78:	4818      	ldr	r0, [pc, #96]	; (8000bdc <oslib_test_001_002_execute+0x6c>)
 8000b7a:	f7ff fef9 	bl	8000970 <test_println>
    test_print("--- Stable Flag:                        ");
 8000b7e:	4818      	ldr	r0, [pc, #96]	; (8000be0 <oslib_test_001_002_execute+0x70>)
 8000b80:	f7ff fee6 	bl	8000950 <test_print>
    test_printn(CH_OSLIB_STABLE);
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff ff03 	bl	8000990 <test_printn>
    test_println("");
 8000b8a:	4c16      	ldr	r4, [pc, #88]	; (8000be4 <oslib_test_001_002_execute+0x74>)
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f7ff feef 	bl	8000970 <test_println>
    test_print("--- Version String:                     ");
 8000b92:	4815      	ldr	r0, [pc, #84]	; (8000be8 <oslib_test_001_002_execute+0x78>)
 8000b94:	f7ff fedc 	bl	8000950 <test_print>
    test_println(CH_OSLIB_VERSION);
 8000b98:	4814      	ldr	r0, [pc, #80]	; (8000bec <oslib_test_001_002_execute+0x7c>)
 8000b9a:	f7ff fee9 	bl	8000970 <test_println>
    test_print("--- Major Number:                       ");
 8000b9e:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <oslib_test_001_002_execute+0x80>)
 8000ba0:	f7ff fed6 	bl	8000950 <test_print>
    test_printn(CH_OSLIB_MAJOR);
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f7ff fef3 	bl	8000990 <test_printn>
    test_println("");
 8000baa:	4620      	mov	r0, r4
 8000bac:	f7ff fee0 	bl	8000970 <test_println>
    test_print("--- Minor Number:                       ");
 8000bb0:	4810      	ldr	r0, [pc, #64]	; (8000bf4 <oslib_test_001_002_execute+0x84>)
 8000bb2:	f7ff fecd 	bl	8000950 <test_print>
    test_printn(CH_OSLIB_MINOR);
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f7ff feea 	bl	8000990 <test_printn>
    test_println("");
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f7ff fed7 	bl	8000970 <test_println>
    test_print("--- Patch Number:                       ");
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <oslib_test_001_002_execute+0x88>)
 8000bc4:	f7ff fec4 	bl	8000950 <test_print>
    test_printn(CH_OSLIB_PATCH);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fee1 	bl	8000990 <test_printn>
    test_println("");
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f7ff fece 	bl	8000970 <test_println>
}
 8000bd4:	bd38      	pop	{r3, r4, r5, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20002454 	.word	0x20002454
 8000bdc:	0800b8e8 	.word	0x0800b8e8
 8000be0:	0800b91c 	.word	0x0800b91c
 8000be4:	0800c3e4 	.word	0x0800c3e4
 8000be8:	0800b948 	.word	0x0800b948
 8000bec:	0800b974 	.word	0x0800b974
 8000bf0:	0800b97c 	.word	0x0800b97c
 8000bf4:	0800b9a8 	.word	0x0800b9a8
 8000bf8:	0800b9d4 	.word	0x0800b9d4
 8000bfc:	00000000 	.word	0x00000000

08000c00 <oslib_test_001_001_execute>:
static void oslib_test_001_001_execute(void) {
 8000c00:	b510      	push	{r4, lr}
  test_set_step(1);
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <oslib_test_001_001_execute+0x74>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 8000c08:	481b      	ldr	r0, [pc, #108]	; (8000c78 <oslib_test_001_001_execute+0x78>)
 8000c0a:	f7ff fea1 	bl	8000950 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 8000c0e:	481b      	ldr	r0, [pc, #108]	; (8000c7c <oslib_test_001_001_execute+0x7c>)
 8000c10:	f7ff feae 	bl	8000970 <test_println>
    test_print("--- Core Variant:                       ");
 8000c14:	481a      	ldr	r0, [pc, #104]	; (8000c80 <oslib_test_001_001_execute+0x80>)
 8000c16:	f7ff fe9b 	bl	8000950 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 8000c1a:	481a      	ldr	r0, [pc, #104]	; (8000c84 <oslib_test_001_001_execute+0x84>)
 8000c1c:	f7ff fea8 	bl	8000970 <test_println>
    test_print("--- Compiler:                           ");
 8000c20:	4819      	ldr	r0, [pc, #100]	; (8000c88 <oslib_test_001_001_execute+0x88>)
 8000c22:	f7ff fe95 	bl	8000950 <test_print>
    test_println(PORT_COMPILER_NAME);
 8000c26:	4819      	ldr	r0, [pc, #100]	; (8000c8c <oslib_test_001_001_execute+0x8c>)
 8000c28:	f7ff fea2 	bl	8000970 <test_println>
    test_print("--- Port Info:                          ");
 8000c2c:	4818      	ldr	r0, [pc, #96]	; (8000c90 <oslib_test_001_001_execute+0x90>)
 8000c2e:	f7ff fe8f 	bl	8000950 <test_print>
    test_println(PORT_INFO);
 8000c32:	4818      	ldr	r0, [pc, #96]	; (8000c94 <oslib_test_001_001_execute+0x94>)
 8000c34:	f7ff fe9c 	bl	8000970 <test_println>
    test_print("--- Natural alignment:                  ");
 8000c38:	4817      	ldr	r0, [pc, #92]	; (8000c98 <oslib_test_001_001_execute+0x98>)
 8000c3a:	f7ff fe89 	bl	8000950 <test_print>
    test_printn(PORT_NATURAL_ALIGN);
 8000c3e:	2004      	movs	r0, #4
 8000c40:	f7ff fea6 	bl	8000990 <test_printn>
    test_println("");
 8000c44:	4c15      	ldr	r4, [pc, #84]	; (8000c9c <oslib_test_001_001_execute+0x9c>)
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff fe92 	bl	8000970 <test_println>
    test_print("--- Stack alignment:                    ");
 8000c4c:	4814      	ldr	r0, [pc, #80]	; (8000ca0 <oslib_test_001_001_execute+0xa0>)
 8000c4e:	f7ff fe7f 	bl	8000950 <test_print>
    test_printn(PORT_STACK_ALIGN);
 8000c52:	2008      	movs	r0, #8
 8000c54:	f7ff fe9c 	bl	8000990 <test_printn>
    test_println("");
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff fe89 	bl	8000970 <test_println>
    test_print("--- Working area alignment:             ");
 8000c5e:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <oslib_test_001_001_execute+0xa4>)
 8000c60:	f7ff fe76 	bl	8000950 <test_print>
    test_printn(PORT_WORKING_AREA_ALIGN);
 8000c64:	2008      	movs	r0, #8
 8000c66:	f7ff fe93 	bl	8000990 <test_printn>
    test_println("");
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f7ff fe80 	bl	8000970 <test_println>
}
 8000c70:	bd10      	pop	{r4, pc}
 8000c72:	bf00      	nop
 8000c74:	20002454 	.word	0x20002454
 8000c78:	0800ba00 	.word	0x0800ba00
 8000c7c:	0800ba2c 	.word	0x0800ba2c
 8000c80:	0800ba38 	.word	0x0800ba38
 8000c84:	0800ba64 	.word	0x0800ba64
 8000c88:	0800ba70 	.word	0x0800ba70
 8000c8c:	0800ba9c 	.word	0x0800ba9c
 8000c90:	0800baa8 	.word	0x0800baa8
 8000c94:	0800bad4 	.word	0x0800bad4
 8000c98:	0800baec 	.word	0x0800baec
 8000c9c:	0800c3e4 	.word	0x0800c3e4
 8000ca0:	0800bb18 	.word	0x0800bb18
 8000ca4:	0800bb44 	.word	0x0800bb44
	...

08000cb0 <rt_test_011_012_execute>:
 * - [11.12.8] The size of an event listener is printed.
 * - [11.12.9] The size of a mailbox is printed.
 * .
 */

static void rt_test_011_012_execute(void) {
 8000cb0:	b570      	push	{r4, r5, r6, lr}

  /* [11.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8000cb2:	4d33      	ldr	r5, [pc, #204]	; (8000d80 <rt_test_011_012_execute+0xd0>)
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	602b      	str	r3, [r5, #0]
  {
    test_print("--- System: ");
 8000cb8:	4832      	ldr	r0, [pc, #200]	; (8000d84 <rt_test_011_012_execute+0xd4>)
 8000cba:	f7ff fe49 	bl	8000950 <test_print>
    test_printn(sizeof(ch_system_t));
 8000cbe:	2078      	movs	r0, #120	; 0x78
 8000cc0:	f7ff fe66 	bl	8000990 <test_printn>
    test_println(" bytes");
 8000cc4:	4c30      	ldr	r4, [pc, #192]	; (8000d88 <rt_test_011_012_execute+0xd8>)
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f7ff fe52 	bl	8000970 <test_println>
  }
  test_end_step(1);

  /* [11.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 8000ccc:	2302      	movs	r3, #2
 8000cce:	602b      	str	r3, [r5, #0]
  {
    test_print("--- Thread: ");
 8000cd0:	482e      	ldr	r0, [pc, #184]	; (8000d8c <rt_test_011_012_execute+0xdc>)
 8000cd2:	f7ff fe3d 	bl	8000950 <test_print>
    test_printn(sizeof(thread_t));
 8000cd6:	2044      	movs	r0, #68	; 0x44
 8000cd8:	f7ff fe5a 	bl	8000990 <test_printn>
    test_println(" bytes");
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f7ff fe47 	bl	8000970 <test_println>
  }
  test_end_step(2);

  /* [11.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	602b      	str	r3, [r5, #0]
  {
    test_print("--- Timer : ");
 8000ce6:	482a      	ldr	r0, [pc, #168]	; (8000d90 <rt_test_011_012_execute+0xe0>)
 8000ce8:	f7ff fe32 	bl	8000950 <test_print>
    test_printn(sizeof(virtual_timer_t));
 8000cec:	2014      	movs	r0, #20
 8000cee:	f7ff fe4f 	bl	8000990 <test_printn>
    test_println(" bytes");
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f7ff fe3c 	bl	8000970 <test_println>
  }
  test_end_step(3);

  /* [11.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8000cf8:	2604      	movs	r6, #4
 8000cfa:	602e      	str	r6, [r5, #0]
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 8000cfc:	4825      	ldr	r0, [pc, #148]	; (8000d94 <rt_test_011_012_execute+0xe4>)
 8000cfe:	f7ff fe27 	bl	8000950 <test_print>
    test_printn(sizeof(semaphore_t));
 8000d02:	200c      	movs	r0, #12
 8000d04:	f7ff fe44 	bl	8000990 <test_printn>
    test_println(" bytes");
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f7ff fe31 	bl	8000970 <test_println>
#endif
  }
  test_end_step(4);

  /* [11.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8000d0e:	2305      	movs	r3, #5
 8000d10:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8000d12:	4821      	ldr	r0, [pc, #132]	; (8000d98 <rt_test_011_012_execute+0xe8>)
 8000d14:	f7ff fe1c 	bl	8000950 <test_print>
    test_printn(sizeof(mutex_t));
 8000d18:	2010      	movs	r0, #16
 8000d1a:	f7ff fe39 	bl	8000990 <test_printn>
    test_println(" bytes");
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff fe26 	bl	8000970 <test_println>
#endif
  }
  test_end_step(5);

  /* [11.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8000d24:	2306      	movs	r3, #6
 8000d26:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8000d28:	481c      	ldr	r0, [pc, #112]	; (8000d9c <rt_test_011_012_execute+0xec>)
 8000d2a:	f7ff fe11 	bl	8000950 <test_print>
    test_printn(sizeof(condition_variable_t));
 8000d2e:	2008      	movs	r0, #8
 8000d30:	f7ff fe2e 	bl	8000990 <test_printn>
    test_println(" bytes");
 8000d34:	4620      	mov	r0, r4
 8000d36:	f7ff fe1b 	bl	8000970 <test_println>
#endif
  }
  test_end_step(6);

  /* [11.12.7] The size of an event source is printed.*/
  test_set_step(7);
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 8000d3e:	4818      	ldr	r0, [pc, #96]	; (8000da0 <rt_test_011_012_execute+0xf0>)
 8000d40:	f7ff fe06 	bl	8000950 <test_print>
    test_printn(sizeof(event_source_t));
 8000d44:	4630      	mov	r0, r6
 8000d46:	f7ff fe23 	bl	8000990 <test_printn>
    test_println(" bytes");
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f7ff fe10 	bl	8000970 <test_println>
#endif
  }
  test_end_step(7);

  /* [11.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8000d50:	2308      	movs	r3, #8
 8000d52:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8000d54:	4813      	ldr	r0, [pc, #76]	; (8000da4 <rt_test_011_012_execute+0xf4>)
 8000d56:	f7ff fdfb 	bl	8000950 <test_print>
    test_printn(sizeof(event_listener_t));
 8000d5a:	2014      	movs	r0, #20
 8000d5c:	f7ff fe18 	bl	8000990 <test_printn>
    test_println(" bytes");
 8000d60:	4620      	mov	r0, r4
 8000d62:	f7ff fe05 	bl	8000970 <test_println>
#endif
  }
  test_end_step(8);

  /* [11.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8000d66:	2309      	movs	r3, #9
 8000d68:	602b      	str	r3, [r5, #0]
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <rt_test_011_012_execute+0xf8>)
 8000d6c:	f7ff fdf0 	bl	8000950 <test_print>
    test_printn(sizeof(mailbox_t));
 8000d70:	2028      	movs	r0, #40	; 0x28
 8000d72:	f7ff fe0d 	bl	8000990 <test_printn>
    test_println(" bytes");
 8000d76:	4620      	mov	r0, r4
 8000d78:	f7ff fdfa 	bl	8000970 <test_println>
#endif
  }
  test_end_step(9);
}
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
 8000d7e:	bf00      	nop
 8000d80:	20002454 	.word	0x20002454
 8000d84:	0800bb70 	.word	0x0800bb70
 8000d88:	0800bb80 	.word	0x0800bb80
 8000d8c:	0800bb88 	.word	0x0800bb88
 8000d90:	0800bb98 	.word	0x0800bb98
 8000d94:	0800bba8 	.word	0x0800bba8
 8000d98:	0800bbb8 	.word	0x0800bbb8
 8000d9c:	0800bbc8 	.word	0x0800bbc8
 8000da0:	0800bbd8 	.word	0x0800bbd8
 8000da4:	0800bbe8 	.word	0x0800bbe8
 8000da8:	0800bbf8 	.word	0x0800bbf8
 8000dac:	00000000 	.word	0x00000000

08000db0 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8000db0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8000db2:	2501      	movs	r5, #1
 8000db4:	4b92      	ldr	r3, [pc, #584]	; (8001000 <rt_test_001_003_execute+0x250>)
 8000db6:	601d      	str	r5, [r3, #0]
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8000db8:	4892      	ldr	r0, [pc, #584]	; (8001004 <rt_test_001_003_execute+0x254>)
 8000dba:	f7ff fdc9 	bl	8000950 <test_print>
    test_printn(CH_CFG_ST_RESOLUTION);
 8000dbe:	2020      	movs	r0, #32
 8000dc0:	f7ff fde6 	bl	8000990 <test_printn>
    test_println("");
 8000dc4:	4c90      	ldr	r4, [pc, #576]	; (8001008 <rt_test_001_003_execute+0x258>)
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f7ff fdd2 	bl	8000970 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 8000dcc:	488f      	ldr	r0, [pc, #572]	; (800100c <rt_test_001_003_execute+0x25c>)
 8000dce:	f7ff fdbf 	bl	8000950 <test_print>
    test_printn(CH_CFG_ST_FREQUENCY);
 8000dd2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000dd6:	f7ff fddb 	bl	8000990 <test_printn>
    test_println("");
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f7ff fdc8 	bl	8000970 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8000de0:	488b      	ldr	r0, [pc, #556]	; (8001010 <rt_test_001_003_execute+0x260>)
 8000de2:	f7ff fdb5 	bl	8000950 <test_print>
    test_printn(CH_CFG_INTERVALS_SIZE);
 8000de6:	2020      	movs	r0, #32
 8000de8:	f7ff fdd2 	bl	8000990 <test_printn>
    test_println("");
 8000dec:	4620      	mov	r0, r4
 8000dee:	f7ff fdbf 	bl	8000970 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8000df2:	4888      	ldr	r0, [pc, #544]	; (8001014 <rt_test_001_003_execute+0x264>)
 8000df4:	f7ff fdac 	bl	8000950 <test_print>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
 8000df8:	2020      	movs	r0, #32
 8000dfa:	f7ff fdc9 	bl	8000990 <test_printn>
    test_println("");
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f7ff fdb6 	bl	8000970 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8000e04:	4884      	ldr	r0, [pc, #528]	; (8001018 <rt_test_001_003_execute+0x268>)
 8000e06:	f7ff fda3 	bl	8000950 <test_print>
    test_printn(CH_CFG_ST_TIMEDELTA);
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	f7ff fdc0 	bl	8000990 <test_printn>
    test_println("");
 8000e10:	4620      	mov	r0, r4
 8000e12:	f7ff fdad 	bl	8000970 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8000e16:	4881      	ldr	r0, [pc, #516]	; (800101c <rt_test_001_003_execute+0x26c>)
 8000e18:	f7ff fd9a 	bl	8000950 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fdb7 	bl	8000990 <test_printn>
    test_println("");
 8000e22:	4620      	mov	r0, r4
 8000e24:	f7ff fda4 	bl	8000970 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8000e28:	487d      	ldr	r0, [pc, #500]	; (8001020 <rt_test_001_003_execute+0x270>)
 8000e2a:	f7ff fd91 	bl	8000950 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff fdae 	bl	8000990 <test_printn>
    test_println("");
 8000e34:	4620      	mov	r0, r4
 8000e36:	f7ff fd9b 	bl	8000970 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 8000e3a:	487a      	ldr	r0, [pc, #488]	; (8001024 <rt_test_001_003_execute+0x274>)
 8000e3c:	f7ff fd88 	bl	8000950 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f7ff fda5 	bl	8000990 <test_printn>
    test_println("");
 8000e46:	4620      	mov	r0, r4
 8000e48:	f7ff fd92 	bl	8000970 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 8000e4c:	4876      	ldr	r0, [pc, #472]	; (8001028 <rt_test_001_003_execute+0x278>)
 8000e4e:	f7ff fd7f 	bl	8000950 <test_print>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
 8000e52:	4628      	mov	r0, r5
 8000e54:	f7ff fd9c 	bl	8000990 <test_printn>
    test_println("");
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f7ff fd89 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 8000e5e:	4873      	ldr	r0, [pc, #460]	; (800102c <rt_test_001_003_execute+0x27c>)
 8000e60:	f7ff fd76 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_TM);
 8000e64:	4628      	mov	r0, r5
 8000e66:	f7ff fd93 	bl	8000990 <test_printn>
    test_println("");
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f7ff fd80 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8000e70:	486f      	ldr	r0, [pc, #444]	; (8001030 <rt_test_001_003_execute+0x280>)
 8000e72:	f7ff fd6d 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_REGISTRY);
 8000e76:	4628      	mov	r0, r5
 8000e78:	f7ff fd8a 	bl	8000990 <test_printn>
    test_println("");
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f7ff fd77 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8000e82:	486c      	ldr	r0, [pc, #432]	; (8001034 <rt_test_001_003_execute+0x284>)
 8000e84:	f7ff fd64 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_WAITEXIT);
 8000e88:	4628      	mov	r0, r5
 8000e8a:	f7ff fd81 	bl	8000990 <test_printn>
    test_println("");
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff fd6e 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8000e94:	4868      	ldr	r0, [pc, #416]	; (8001038 <rt_test_001_003_execute+0x288>)
 8000e96:	f7ff fd5b 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES);
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f7ff fd78 	bl	8000990 <test_printn>
    test_println("");
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f7ff fd65 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRIORITY:     ");
 8000ea6:	4865      	ldr	r0, [pc, #404]	; (800103c <rt_test_001_003_execute+0x28c>)
 8000ea8:	f7ff fd52 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fd6f 	bl	8000990 <test_printn>
    test_println("");
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff fd5c 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8000eb8:	4861      	ldr	r0, [pc, #388]	; (8001040 <rt_test_001_003_execute+0x290>)
 8000eba:	f7ff fd49 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_MUTEXES);
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	f7ff fd66 	bl	8000990 <test_printn>
    test_println("");
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	f7ff fd53 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURSIVE:       ");
 8000eca:	485e      	ldr	r0, [pc, #376]	; (8001044 <rt_test_001_003_execute+0x294>)
 8000ecc:	f7ff fd40 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fd5d 	bl	8000990 <test_printn>
    test_println("");   
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f7ff fd4a 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 8000edc:	485a      	ldr	r0, [pc, #360]	; (8001048 <rt_test_001_003_execute+0x298>)
 8000ede:	f7ff fd37 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_CONDVARS);
 8000ee2:	4628      	mov	r0, r5
 8000ee4:	f7ff fd54 	bl	8000990 <test_printn>
    test_println("");
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f7ff fd41 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEOUT:        ");
 8000eee:	4857      	ldr	r0, [pc, #348]	; (800104c <rt_test_001_003_execute+0x29c>)
 8000ef0:	f7ff fd2e 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	f7ff fd4b 	bl	8000990 <test_printn>
    test_println("");
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff fd38 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8000f00:	4853      	ldr	r0, [pc, #332]	; (8001050 <rt_test_001_003_execute+0x2a0>)
 8000f02:	f7ff fd25 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_EVENTS);
 8000f06:	4628      	mov	r0, r5
 8000f08:	f7ff fd42 	bl	8000990 <test_printn>
    test_println("");
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f7ff fd2f 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8000f12:	4850      	ldr	r0, [pc, #320]	; (8001054 <rt_test_001_003_execute+0x2a4>)
 8000f14:	f7ff fd1c 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
 8000f18:	4628      	mov	r0, r5
 8000f1a:	f7ff fd39 	bl	8000990 <test_printn>
    test_println("");
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f7ff fd26 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8000f24:	484c      	ldr	r0, [pc, #304]	; (8001058 <rt_test_001_003_execute+0x2a8>)
 8000f26:	f7ff fd13 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_MESSAGES);
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	f7ff fd30 	bl	8000990 <test_printn>
    test_println("");
 8000f30:	4620      	mov	r0, r4
 8000f32:	f7ff fd1d 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRIORITY:       ");
 8000f36:	4849      	ldr	r0, [pc, #292]	; (800105c <rt_test_001_003_execute+0x2ac>)
 8000f38:	f7ff fd0a 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fd27 	bl	8000990 <test_printn>
    test_println("");
 8000f42:	4620      	mov	r0, r4
 8000f44:	f7ff fd14 	bl	8000970 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8000f48:	4845      	ldr	r0, [pc, #276]	; (8001060 <rt_test_001_003_execute+0x2b0>)
 8000f4a:	f7ff fd01 	bl	8000950 <test_print>
    test_printn(CH_CFG_USE_DYNAMIC);
 8000f4e:	4628      	mov	r0, r5
 8000f50:	f7ff fd1e 	bl	8000990 <test_printn>
    test_println("");
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff fd0b 	bl	8000970 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8000f5a:	4842      	ldr	r0, [pc, #264]	; (8001064 <rt_test_001_003_execute+0x2b4>)
 8000f5c:	f7ff fcf8 	bl	8000950 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff fd15 	bl	8000990 <test_printn>
    test_println("");
 8000f66:	4620      	mov	r0, r4
 8000f68:	f7ff fd02 	bl	8000970 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8000f6c:	483e      	ldr	r0, [pc, #248]	; (8001068 <rt_test_001_003_execute+0x2b8>)
 8000f6e:	f7ff fcef 	bl	8000950 <test_print>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff fd0c 	bl	8000990 <test_printn>
    test_println("");
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f7ff fcf9 	bl	8000970 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8000f7e:	483b      	ldr	r0, [pc, #236]	; (800106c <rt_test_001_003_execute+0x2bc>)
 8000f80:	f7ff fce6 	bl	8000950 <test_print>
    test_printn(CH_DBG_ENABLE_CHECKS);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fd03 	bl	8000990 <test_printn>
    test_println("");
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f7ff fcf0 	bl	8000970 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8000f90:	4837      	ldr	r0, [pc, #220]	; (8001070 <rt_test_001_003_execute+0x2c0>)
 8000f92:	f7ff fcdd 	bl	8000950 <test_print>
    test_printn(CH_DBG_ENABLE_ASSERTS);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fcfa 	bl	8000990 <test_printn>
    test_println("");
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f7ff fce7 	bl	8000970 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8000fa2:	4834      	ldr	r0, [pc, #208]	; (8001074 <rt_test_001_003_execute+0x2c4>)
 8000fa4:	f7ff fcd4 	bl	8000950 <test_print>
    test_printn(CH_DBG_TRACE_MASK);
 8000fa8:	20ff      	movs	r0, #255	; 0xff
 8000faa:	f7ff fcf1 	bl	8000990 <test_printn>
    test_println("");
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f7ff fcde 	bl	8000970 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8000fb4:	4830      	ldr	r0, [pc, #192]	; (8001078 <rt_test_001_003_execute+0x2c8>)
 8000fb6:	f7ff fccb 	bl	8000950 <test_print>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
 8000fba:	2080      	movs	r0, #128	; 0x80
 8000fbc:	f7ff fce8 	bl	8000990 <test_printn>
    test_println("");
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f7ff fcd5 	bl	8000970 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8000fc6:	482d      	ldr	r0, [pc, #180]	; (800107c <rt_test_001_003_execute+0x2cc>)
 8000fc8:	f7ff fcc2 	bl	8000950 <test_print>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fcdf 	bl	8000990 <test_printn>
    test_println("");
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f7ff fccc 	bl	8000970 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8000fd8:	4829      	ldr	r0, [pc, #164]	; (8001080 <rt_test_001_003_execute+0x2d0>)
 8000fda:	f7ff fcb9 	bl	8000950 <test_print>
    test_printn(CH_DBG_FILL_THREADS);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fcd6 	bl	8000990 <test_printn>
    test_println("");
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff fcc3 	bl	8000970 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8000fea:	4826      	ldr	r0, [pc, #152]	; (8001084 <rt_test_001_003_execute+0x2d4>)
 8000fec:	f7ff fcb0 	bl	8000950 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff fccd 	bl	8000990 <test_printn>
    test_println("");
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f7ff fcba 	bl	8000970 <test_println>
  }
  test_end_step(1);
}
 8000ffc:	bd38      	pop	{r3, r4, r5, pc}
 8000ffe:	bf00      	nop
 8001000:	20002454 	.word	0x20002454
 8001004:	0800bc08 	.word	0x0800bc08
 8001008:	0800c3e4 	.word	0x0800c3e4
 800100c:	0800bc34 	.word	0x0800bc34
 8001010:	0800bc60 	.word	0x0800bc60
 8001014:	0800bc8c 	.word	0x0800bc8c
 8001018:	0800bcb8 	.word	0x0800bcb8
 800101c:	0800bce4 	.word	0x0800bce4
 8001020:	0800bd10 	.word	0x0800bd10
 8001024:	0800bd3c 	.word	0x0800bd3c
 8001028:	0800bd68 	.word	0x0800bd68
 800102c:	0800bd94 	.word	0x0800bd94
 8001030:	0800bdc0 	.word	0x0800bdc0
 8001034:	0800bdec 	.word	0x0800bdec
 8001038:	0800be18 	.word	0x0800be18
 800103c:	0800be44 	.word	0x0800be44
 8001040:	0800be70 	.word	0x0800be70
 8001044:	0800be9c 	.word	0x0800be9c
 8001048:	0800bec8 	.word	0x0800bec8
 800104c:	0800bef4 	.word	0x0800bef4
 8001050:	0800bf20 	.word	0x0800bf20
 8001054:	0800bf4c 	.word	0x0800bf4c
 8001058:	0800bf78 	.word	0x0800bf78
 800105c:	0800bfa4 	.word	0x0800bfa4
 8001060:	0800bfd0 	.word	0x0800bfd0
 8001064:	0800bffc 	.word	0x0800bffc
 8001068:	0800c028 	.word	0x0800c028
 800106c:	0800c054 	.word	0x0800c054
 8001070:	0800c080 	.word	0x0800c080
 8001074:	0800c0ac 	.word	0x0800c0ac
 8001078:	0800c0d8 	.word	0x0800c0d8
 800107c:	0800c104 	.word	0x0800c104
 8001080:	0800c130 	.word	0x0800c130
 8001084:	0800c15c 	.word	0x0800c15c
	...

08001090 <rt_test_001_002_execute>:
static void rt_test_001_002_execute(void) {
 8001090:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8001092:	2501      	movs	r5, #1
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <rt_test_001_002_execute+0x68>)
 8001096:	601d      	str	r5, [r3, #0]
    test_println("--- Product:                            ChibiOS/RT");
 8001098:	4818      	ldr	r0, [pc, #96]	; (80010fc <rt_test_001_002_execute+0x6c>)
 800109a:	f7ff fc69 	bl	8000970 <test_println>
    test_print("--- Stable Flag:                        ");
 800109e:	4818      	ldr	r0, [pc, #96]	; (8001100 <rt_test_001_002_execute+0x70>)
 80010a0:	f7ff fc56 	bl	8000950 <test_print>
    test_printn(CH_KERNEL_STABLE);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff fc73 	bl	8000990 <test_printn>
    test_println("");
 80010aa:	4c16      	ldr	r4, [pc, #88]	; (8001104 <rt_test_001_002_execute+0x74>)
 80010ac:	4620      	mov	r0, r4
 80010ae:	f7ff fc5f 	bl	8000970 <test_println>
    test_print("--- Version String:                     ");
 80010b2:	4815      	ldr	r0, [pc, #84]	; (8001108 <rt_test_001_002_execute+0x78>)
 80010b4:	f7ff fc4c 	bl	8000950 <test_print>
    test_println(CH_KERNEL_VERSION);
 80010b8:	4814      	ldr	r0, [pc, #80]	; (800110c <rt_test_001_002_execute+0x7c>)
 80010ba:	f7ff fc59 	bl	8000970 <test_println>
    test_print("--- Major Number:                       ");
 80010be:	4814      	ldr	r0, [pc, #80]	; (8001110 <rt_test_001_002_execute+0x80>)
 80010c0:	f7ff fc46 	bl	8000950 <test_print>
    test_printn(CH_KERNEL_MAJOR);
 80010c4:	2006      	movs	r0, #6
 80010c6:	f7ff fc63 	bl	8000990 <test_printn>
    test_println("");
 80010ca:	4620      	mov	r0, r4
 80010cc:	f7ff fc50 	bl	8000970 <test_println>
    test_print("--- Minor Number:                       ");
 80010d0:	4810      	ldr	r0, [pc, #64]	; (8001114 <rt_test_001_002_execute+0x84>)
 80010d2:	f7ff fc3d 	bl	8000950 <test_print>
    test_printn(CH_KERNEL_MINOR);
 80010d6:	4628      	mov	r0, r5
 80010d8:	f7ff fc5a 	bl	8000990 <test_printn>
    test_println("");
 80010dc:	4620      	mov	r0, r4
 80010de:	f7ff fc47 	bl	8000970 <test_println>
    test_print("--- Patch Number:                       ");
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <rt_test_001_002_execute+0x88>)
 80010e4:	f7ff fc34 	bl	8000950 <test_print>
    test_printn(CH_KERNEL_PATCH);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff fc51 	bl	8000990 <test_printn>
    test_println("");
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff fc3e 	bl	8000970 <test_println>
}
 80010f4:	bd38      	pop	{r3, r4, r5, pc}
 80010f6:	bf00      	nop
 80010f8:	20002454 	.word	0x20002454
 80010fc:	0800c188 	.word	0x0800c188
 8001100:	0800b91c 	.word	0x0800b91c
 8001104:	0800c3e4 	.word	0x0800c3e4
 8001108:	0800b948 	.word	0x0800b948
 800110c:	0800c1bc 	.word	0x0800c1bc
 8001110:	0800b97c 	.word	0x0800b97c
 8001114:	0800b9a8 	.word	0x0800b9a8
 8001118:	0800b9d4 	.word	0x0800b9d4
 800111c:	00000000 	.word	0x00000000

08001120 <rt_test_001_001_execute>:
static void rt_test_001_001_execute(void) {
 8001120:	b510      	push	{r4, lr}
  test_set_step(1);
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <rt_test_001_001_execute+0x74>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 8001128:	481b      	ldr	r0, [pc, #108]	; (8001198 <rt_test_001_001_execute+0x78>)
 800112a:	f7ff fc11 	bl	8000950 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 800112e:	481b      	ldr	r0, [pc, #108]	; (800119c <rt_test_001_001_execute+0x7c>)
 8001130:	f7ff fc1e 	bl	8000970 <test_println>
    test_print("--- Core Variant:                       ");
 8001134:	481a      	ldr	r0, [pc, #104]	; (80011a0 <rt_test_001_001_execute+0x80>)
 8001136:	f7ff fc0b 	bl	8000950 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 800113a:	481a      	ldr	r0, [pc, #104]	; (80011a4 <rt_test_001_001_execute+0x84>)
 800113c:	f7ff fc18 	bl	8000970 <test_println>
    test_print("--- Compiler:                           ");
 8001140:	4819      	ldr	r0, [pc, #100]	; (80011a8 <rt_test_001_001_execute+0x88>)
 8001142:	f7ff fc05 	bl	8000950 <test_print>
    test_println(PORT_COMPILER_NAME);
 8001146:	4819      	ldr	r0, [pc, #100]	; (80011ac <rt_test_001_001_execute+0x8c>)
 8001148:	f7ff fc12 	bl	8000970 <test_println>
    test_print("--- Port Info:                          ");
 800114c:	4818      	ldr	r0, [pc, #96]	; (80011b0 <rt_test_001_001_execute+0x90>)
 800114e:	f7ff fbff 	bl	8000950 <test_print>
    test_println(PORT_INFO);
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <rt_test_001_001_execute+0x94>)
 8001154:	f7ff fc0c 	bl	8000970 <test_println>
    test_print("--- Natural alignment:                  ");
 8001158:	4817      	ldr	r0, [pc, #92]	; (80011b8 <rt_test_001_001_execute+0x98>)
 800115a:	f7ff fbf9 	bl	8000950 <test_print>
    test_printn(PORT_NATURAL_ALIGN);
 800115e:	2004      	movs	r0, #4
 8001160:	f7ff fc16 	bl	8000990 <test_printn>
    test_println("");
 8001164:	4c15      	ldr	r4, [pc, #84]	; (80011bc <rt_test_001_001_execute+0x9c>)
 8001166:	4620      	mov	r0, r4
 8001168:	f7ff fc02 	bl	8000970 <test_println>
    test_print("--- Stack alignment:                    ");
 800116c:	4814      	ldr	r0, [pc, #80]	; (80011c0 <rt_test_001_001_execute+0xa0>)
 800116e:	f7ff fbef 	bl	8000950 <test_print>
    test_printn(PORT_STACK_ALIGN);
 8001172:	2008      	movs	r0, #8
 8001174:	f7ff fc0c 	bl	8000990 <test_printn>
    test_println("");
 8001178:	4620      	mov	r0, r4
 800117a:	f7ff fbf9 	bl	8000970 <test_println>
    test_print("--- Working area alignment:             ");
 800117e:	4811      	ldr	r0, [pc, #68]	; (80011c4 <rt_test_001_001_execute+0xa4>)
 8001180:	f7ff fbe6 	bl	8000950 <test_print>
    test_printn(PORT_WORKING_AREA_ALIGN);
 8001184:	2008      	movs	r0, #8
 8001186:	f7ff fc03 	bl	8000990 <test_printn>
    test_println("");
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff fbf0 	bl	8000970 <test_println>
}
 8001190:	bd10      	pop	{r4, pc}
 8001192:	bf00      	nop
 8001194:	20002454 	.word	0x20002454
 8001198:	0800ba00 	.word	0x0800ba00
 800119c:	0800ba2c 	.word	0x0800ba2c
 80011a0:	0800ba38 	.word	0x0800ba38
 80011a4:	0800ba64 	.word	0x0800ba64
 80011a8:	0800ba70 	.word	0x0800ba70
 80011ac:	0800ba9c 	.word	0x0800ba9c
 80011b0:	0800baa8 	.word	0x0800baa8
 80011b4:	0800bad4 	.word	0x0800bad4
 80011b8:	0800baec 	.word	0x0800baec
 80011bc:	0800c3e4 	.word	0x0800c3e4
 80011c0:	0800bb18 	.word	0x0800bb18
 80011c4:	0800bb44 	.word	0x0800bb44
	...

080011d0 <_test_fail>:
  test_local_fail      = true;
 80011d0:	2301      	movs	r3, #1
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <_test_fail+0x14>)
 80011d4:	7013      	strb	r3, [r2, #0]
  test_global_fail     = true;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <_test_fail+0x18>)
 80011d8:	7013      	strb	r3, [r2, #0]
  test_failure_message = msg;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <_test_fail+0x1c>)
 80011dc:	6010      	str	r0, [r2, #0]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20002450 	.word	0x20002450
 80011e8:	200023b0 	.word	0x200023b0
 80011ec:	200023ac 	.word	0x200023ac

080011f0 <_test_assert>:
  if (!condition)
 80011f0:	b108      	cbz	r0, 80011f6 <_test_assert+0x6>
  return false;
 80011f2:	2000      	movs	r0, #0
}
 80011f4:	4770      	bx	lr
bool _test_assert(bool condition, const char *msg) {
 80011f6:	b508      	push	{r3, lr}
    return _test_fail(msg);
 80011f8:	4608      	mov	r0, r1
 80011fa:	f7ff ffe9 	bl	80011d0 <_test_fail>
}
 80011fe:	bd08      	pop	{r3, pc}

08001200 <rt_test_003_002_execute>:
 * - [3.2.2] Checking boundaries for start < end.
 * - [3.2.3] Checking boundaries for start > end.
 * .
 */

static void rt_test_003_002_execute(void) {
 8001200:	b508      	push	{r3, lr}

  /* [3.2.1] Checking case where start == end, it must always evaluate
     as not in range.*/
  test_set_step(1);
 8001202:	2001      	movs	r0, #1
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <rt_test_003_002_execute+0xa0>)
 8001206:	6018      	str	r0, [r3, #0]
  {
    bool b;

    b = chTimeIsInRangeX((systime_t)0, (systime_t)0, (systime_t)0);
    test_assert(b == false, "in range");
 8001208:	4926      	ldr	r1, [pc, #152]	; (80012a4 <rt_test_003_002_execute+0xa4>)
 800120a:	f7ff fff1 	bl	80011f0 <_test_assert>
 800120e:	b100      	cbz	r0, 8001212 <rt_test_003_002_execute+0x12>
    test_assert(b == true, "not in range");
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
    test_assert(b == false, "in range");
  }
  test_end_step(3);
}
 8001210:	bd08      	pop	{r3, pc}
    test_assert(b == false, "in range");
 8001212:	4924      	ldr	r1, [pc, #144]	; (80012a4 <rt_test_003_002_execute+0xa4>)
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff ffeb 	bl	80011f0 <_test_assert>
 800121a:	2800      	cmp	r0, #0
 800121c:	d1f8      	bne.n	8001210 <rt_test_003_002_execute+0x10>
    test_assert(b == false, "in range");
 800121e:	4921      	ldr	r1, [pc, #132]	; (80012a4 <rt_test_003_002_execute+0xa4>)
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff ffe5 	bl	80011f0 <_test_assert>
 8001226:	2800      	cmp	r0, #0
 8001228:	d1f2      	bne.n	8001210 <rt_test_003_002_execute+0x10>
    test_assert(b == false, "in range");
 800122a:	491e      	ldr	r1, [pc, #120]	; (80012a4 <rt_test_003_002_execute+0xa4>)
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff ffdf 	bl	80011f0 <_test_assert>
 8001232:	2800      	cmp	r0, #0
 8001234:	d1ec      	bne.n	8001210 <rt_test_003_002_execute+0x10>
  test_set_step(2);
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <rt_test_003_002_execute+0xa0>)
 8001238:	2202      	movs	r2, #2
 800123a:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
 800123c:	491a      	ldr	r1, [pc, #104]	; (80012a8 <rt_test_003_002_execute+0xa8>)
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff ffd6 	bl	80011f0 <_test_assert>
 8001244:	2800      	cmp	r0, #0
 8001246:	d1e3      	bne.n	8001210 <rt_test_003_002_execute+0x10>
    test_assert(b == false, "in range");
 8001248:	4916      	ldr	r1, [pc, #88]	; (80012a4 <rt_test_003_002_execute+0xa4>)
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff ffd0 	bl	80011f0 <_test_assert>
 8001250:	2800      	cmp	r0, #0
 8001252:	d1dd      	bne.n	8001210 <rt_test_003_002_execute+0x10>
    test_assert(b == true, "not in range");
 8001254:	4914      	ldr	r1, [pc, #80]	; (80012a8 <rt_test_003_002_execute+0xa8>)
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff ffca 	bl	80011f0 <_test_assert>
 800125c:	2800      	cmp	r0, #0
 800125e:	d1d7      	bne.n	8001210 <rt_test_003_002_execute+0x10>
    test_assert(b == false, "in range");
 8001260:	4910      	ldr	r1, [pc, #64]	; (80012a4 <rt_test_003_002_execute+0xa4>)
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff ffc4 	bl	80011f0 <_test_assert>
 8001268:	2800      	cmp	r0, #0
 800126a:	d1d1      	bne.n	8001210 <rt_test_003_002_execute+0x10>
  test_set_step(3);
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <rt_test_003_002_execute+0xa0>)
 800126e:	2203      	movs	r2, #3
 8001270:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
 8001272:	490d      	ldr	r1, [pc, #52]	; (80012a8 <rt_test_003_002_execute+0xa8>)
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff ffbb 	bl	80011f0 <_test_assert>
 800127a:	2800      	cmp	r0, #0
 800127c:	d1c8      	bne.n	8001210 <rt_test_003_002_execute+0x10>
    test_assert(b == false, "in range");
 800127e:	4909      	ldr	r1, [pc, #36]	; (80012a4 <rt_test_003_002_execute+0xa4>)
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff ffb5 	bl	80011f0 <_test_assert>
 8001286:	2800      	cmp	r0, #0
 8001288:	d1c2      	bne.n	8001210 <rt_test_003_002_execute+0x10>
    test_assert(b == true, "not in range");
 800128a:	4907      	ldr	r1, [pc, #28]	; (80012a8 <rt_test_003_002_execute+0xa8>)
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff ffaf 	bl	80011f0 <_test_assert>
 8001292:	2800      	cmp	r0, #0
 8001294:	d1bc      	bne.n	8001210 <rt_test_003_002_execute+0x10>
    test_assert(b == false, "in range");
 8001296:	4903      	ldr	r1, [pc, #12]	; (80012a4 <rt_test_003_002_execute+0xa4>)
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff ffa9 	bl	80011f0 <_test_assert>
  test_end_step(3);
 800129e:	e7b7      	b.n	8001210 <rt_test_003_002_execute+0x10>
 80012a0:	20002454 	.word	0x20002454
 80012a4:	0800c1c8 	.word	0x0800c1c8
 80012a8:	0800c1c4 	.word	0x0800c1c4
 80012ac:	00000000 	.word	0x00000000

080012b0 <print_fat_line>:
static void print_fat_line(void) {
 80012b0:	b510      	push	{r4, lr}
  for (i = 0; i < 76; i++)
 80012b2:	2400      	movs	r4, #0
 80012b4:	2c4b      	cmp	r4, #75	; 0x4b
 80012b6:	d807      	bhi.n	80012c8 <print_fat_line+0x18>
    streamPut(test_chp, '=');
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <print_fat_line+0x28>)
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	6803      	ldr	r3, [r0, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	213d      	movs	r1, #61	; 0x3d
 80012c2:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 80012c4:	3401      	adds	r4, #1
 80012c6:	e7f5      	b.n	80012b4 <print_fat_line+0x4>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <print_fat_line+0x28>)
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	6803      	ldr	r3, [r0, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2202      	movs	r2, #2
 80012d2:	4902      	ldr	r1, [pc, #8]	; (80012dc <print_fat_line+0x2c>)
 80012d4:	4798      	blx	r3
}
 80012d6:	bd10      	pop	{r4, pc}
 80012d8:	200023a8 	.word	0x200023a8
 80012dc:	0800c40c 	.word	0x0800c40c

080012e0 <print_line>:
static void print_line(void) {
 80012e0:	b510      	push	{r4, lr}
  for (i = 0; i < 76; i++)
 80012e2:	2400      	movs	r4, #0
 80012e4:	2c4b      	cmp	r4, #75	; 0x4b
 80012e6:	d807      	bhi.n	80012f8 <print_line+0x18>
    streamPut(test_chp, '-');
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <print_line+0x28>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	6803      	ldr	r3, [r0, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	212d      	movs	r1, #45	; 0x2d
 80012f2:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 80012f4:	3401      	adds	r4, #1
 80012f6:	e7f5      	b.n	80012e4 <print_line+0x4>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <print_line+0x28>)
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	6803      	ldr	r3, [r0, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2202      	movs	r2, #2
 8001302:	4902      	ldr	r1, [pc, #8]	; (800130c <print_line+0x2c>)
 8001304:	4798      	blx	r3
}
 8001306:	bd10      	pop	{r4, pc}
 8001308:	200023a8 	.word	0x200023a8
 800130c:	0800c40c 	.word	0x0800c40c

08001310 <print_tokens>:
static void print_tokens(void) {
 8001310:	b510      	push	{r4, lr}
  char *cp = test_tokens_buffer;
 8001312:	4c07      	ldr	r4, [pc, #28]	; (8001330 <print_tokens+0x20>)
  while (cp < test_tokp)
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <print_tokens+0x24>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	42a3      	cmp	r3, r4
 800131a:	d907      	bls.n	800132c <print_tokens+0x1c>
    streamPut(test_chp, *cp++);
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <print_tokens+0x28>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	6803      	ldr	r3, [r0, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001328:	4798      	blx	r3
 800132a:	e7f3      	b.n	8001314 <print_tokens+0x4>
}
 800132c:	bd10      	pop	{r4, pc}
 800132e:	bf00      	nop
 8001330:	20002458 	.word	0x20002458
 8001334:	20002468 	.word	0x20002468
 8001338:	200023a8 	.word	0x200023a8
 800133c:	00000000 	.word	0x00000000

08001340 <clear_tokens>:
  test_tokp = test_tokens_buffer;
 8001340:	4b01      	ldr	r3, [pc, #4]	; (8001348 <clear_tokens+0x8>)
 8001342:	4a02      	ldr	r2, [pc, #8]	; (800134c <clear_tokens+0xc>)
 8001344:	601a      	str	r2, [r3, #0]
}
 8001346:	4770      	bx	lr
 8001348:	20002468 	.word	0x20002468
 800134c:	20002458 	.word	0x20002458

08001350 <_test_assert_sequence>:
bool _test_assert_sequence(char *expected, const char *msg) {
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4602      	mov	r2, r0
 8001354:	4608      	mov	r0, r1
  char *cp = test_tokens_buffer;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <_test_assert_sequence+0x34>)
  while (cp < test_tokp) {
 8001358:	4c0b      	ldr	r4, [pc, #44]	; (8001388 <_test_assert_sequence+0x38>)
 800135a:	6824      	ldr	r4, [r4, #0]
 800135c:	429c      	cmp	r4, r3
 800135e:	d908      	bls.n	8001372 <_test_assert_sequence+0x22>
    if (*cp++ != *expected++)
 8001360:	f813 5b01 	ldrb.w	r5, [r3], #1
 8001364:	f812 4b01 	ldrb.w	r4, [r2], #1
 8001368:	42a5      	cmp	r5, r4
 800136a:	d0f5      	beq.n	8001358 <_test_assert_sequence+0x8>
     return _test_fail(msg);
 800136c:	f7ff ff30 	bl	80011d0 <_test_fail>
}
 8001370:	bd38      	pop	{r3, r4, r5, pc}
  if (*expected)
 8001372:	7813      	ldrb	r3, [r2, #0]
 8001374:	b91b      	cbnz	r3, 800137e <_test_assert_sequence+0x2e>
  clear_tokens();
 8001376:	f7ff ffe3 	bl	8001340 <clear_tokens>
  return false;
 800137a:	2000      	movs	r0, #0
 800137c:	e7f8      	b.n	8001370 <_test_assert_sequence+0x20>
    return _test_fail(msg);
 800137e:	f7ff ff27 	bl	80011d0 <_test_fail>
 8001382:	e7f5      	b.n	8001370 <_test_assert_sequence+0x20>
 8001384:	20002458 	.word	0x20002458
 8001388:	20002468 	.word	0x20002468
 800138c:	00000000 	.word	0x00000000

08001390 <execute_test>:
static void execute_test(const testcase_t *tcp) {
 8001390:	b510      	push	{r4, lr}
 8001392:	4604      	mov	r4, r0
  clear_tokens();
 8001394:	f7ff ffd4 	bl	8001340 <clear_tokens>
  test_local_fail = false;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <execute_test+0x20>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
  if (tcp->setup != NULL)
 800139e:	6863      	ldr	r3, [r4, #4]
 80013a0:	b103      	cbz	r3, 80013a4 <execute_test+0x14>
    tcp->setup();
 80013a2:	4798      	blx	r3
  tcp->execute();
 80013a4:	68e3      	ldr	r3, [r4, #12]
 80013a6:	4798      	blx	r3
  if (tcp->teardown != NULL)
 80013a8:	68a3      	ldr	r3, [r4, #8]
 80013aa:	b103      	cbz	r3, 80013ae <execute_test+0x1e>
    tcp->teardown();
 80013ac:	4798      	blx	r3
}
 80013ae:	bd10      	pop	{r4, pc}
 80013b0:	20002450 	.word	0x20002450
	...

080013c0 <shellInit>:
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80013c0:	4b01      	ldr	r3, [pc, #4]	; (80013c8 <shellInit+0x8>)
 80013c2:	601b      	str	r3, [r3, #0]
void shellInit(void) {

#if !defined(_CHIBIOS_NIL_)
  chEvtObjectInit(&shell_terminated);
#endif
}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20001d3c 	.word	0x20001d3c
 80013cc:	00000000 	.word	0x00000000

080013d0 <is_histbuff_space>:
  if (shp->sh_end >= shp->sh_beg) {
 80013d0:	68c2      	ldr	r2, [r0, #12]
 80013d2:	6883      	ldr	r3, [r0, #8]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	db07      	blt.n	80013e8 <is_histbuff_space+0x18>
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 80013d8:	6840      	ldr	r0, [r0, #4]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	3301      	adds	r3, #1
 80013de:	1ac3      	subs	r3, r0, r3
 80013e0:	428b      	cmp	r3, r1
 80013e2:	dc07      	bgt.n	80013f4 <is_histbuff_space+0x24>
  return false;
 80013e4:	2000      	movs	r0, #0
 80013e6:	4770      	bx	lr
    if (length < (shp->sh_beg - shp->sh_end - 1))
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	3b01      	subs	r3, #1
 80013ec:	428b      	cmp	r3, r1
 80013ee:	dc03      	bgt.n	80013f8 <is_histbuff_space+0x28>
  return false;
 80013f0:	2000      	movs	r0, #0
 80013f2:	4770      	bx	lr
      return true;
 80013f4:	2001      	movs	r0, #1
 80013f6:	4770      	bx	lr
      return true;
 80013f8:	2001      	movs	r0, #1
}
 80013fa:	4770      	bx	lr
 80013fc:	0000      	movs	r0, r0
	...

08001400 <del_histbuff_entry>:
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8001400:	6883      	ldr	r3, [r0, #8]
 8001402:	6802      	ldr	r2, [r0, #0]
 8001404:	5cd2      	ldrb	r2, [r2, r3]
 8001406:	4413      	add	r3, r2
 8001408:	3301      	adds	r3, #1
  if (pos >= shp->sh_size)
 800140a:	6842      	ldr	r2, [r0, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	dc00      	bgt.n	8001412 <del_histbuff_entry+0x12>
    pos -= shp->sh_size;
 8001410:	1a9b      	subs	r3, r3, r2
  shp->sh_beg = pos;
 8001412:	6083      	str	r3, [r0, #8]
}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
	...

08001420 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8001420:	b4f0      	push	{r4, r5, r6, r7}
 8001422:	460c      	mov	r4, r1
  int i;
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
 8001424:	461e      	mov	r6, r3
 8001426:	b903      	cbnz	r3, 800142a <long_to_string_with_divisor+0xa>
    ll = num;
 8001428:	460e      	mov	r6, r1
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800142a:	f100 050b 	add.w	r5, r0, #11
 800142e:	462b      	mov	r3, r5
 8001430:	e006      	b.n	8001440 <long_to_string_with_divisor+0x20>
    i = (int)(l % radix);
    i += '0';
    if (i > '9') {
      i += 'A' - '0' - 10;
    }
    *--q = i;
 8001432:	f803 4d01 	strb.w	r4, [r3, #-1]!
    l /= radix;
 8001436:	fbb7 f4f2 	udiv	r4, r7, r2
  } while ((ll /= radix) != 0);
 800143a:	fbb6 f6f2 	udiv	r6, r6, r2
 800143e:	b15e      	cbz	r6, 8001458 <long_to_string_with_divisor+0x38>
    i = (int)(l % radix);
 8001440:	4627      	mov	r7, r4
 8001442:	fbb4 f1f2 	udiv	r1, r4, r2
 8001446:	fb02 4111 	mls	r1, r2, r1, r4
    i += '0';
 800144a:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9') {
 800144e:	2c39      	cmp	r4, #57	; 0x39
 8001450:	ddef      	ble.n	8001432 <long_to_string_with_divisor+0x12>
      i += 'A' - '0' - 10;
 8001452:	f101 0437 	add.w	r4, r1, #55	; 0x37
 8001456:	e7ec      	b.n	8001432 <long_to_string_with_divisor+0x12>

  i = (int)(p + MAX_FILLER - q);
 8001458:	1aec      	subs	r4, r5, r3
  do
    *p++ = *q++;
 800145a:	7819      	ldrb	r1, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	7001      	strb	r1, [r0, #0]
 8001460:	3001      	adds	r0, #1
  while (--i);
 8001462:	3c01      	subs	r4, #1
 8001464:	d1f9      	bne.n	800145a <long_to_string_with_divisor+0x3a>

  return p;
}
 8001466:	bcf0      	pop	{r4, r5, r6, r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	0000      	movs	r0, r0
	...

08001470 <ch_ltoa>:

static char *ch_ltoa(char *p, long num, unsigned radix) {
 8001470:	b508      	push	{r3, lr}

  return long_to_string_with_divisor(p, num, radix, 0);
 8001472:	2300      	movs	r3, #0
 8001474:	f7ff ffd4 	bl	8001420 <long_to_string_with_divisor>
}
 8001478:	bd08      	pop	{r3, pc}
 800147a:	bf00      	nop
 800147c:	0000      	movs	r0, r0
	...

08001480 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8001480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001484:	b087      	sub	sp, #28
 8001486:	4606      	mov	r6, r0
 8001488:	4689      	mov	r9, r1
 800148a:	9201      	str	r2, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800148c:	2700      	movs	r7, #0
 800148e:	e005      	b.n	800149c <chvprintf+0x1c>
    if (c == 0) {
      return n;
    }
    
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8001490:	6833      	ldr	r3, [r6, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4630      	mov	r0, r6
 8001496:	4798      	blx	r3
      n++;
 8001498:	3701      	adds	r7, #1
    c = *fmt++;
 800149a:	46a9      	mov	r9, r5
 800149c:	464d      	mov	r5, r9
 800149e:	f815 1b01 	ldrb.w	r1, [r5], #1
    if (c == 0) {
 80014a2:	2900      	cmp	r1, #0
 80014a4:	d07b      	beq.n	800159e <chvprintf+0x11e>
    if (c != '%') {
 80014a6:	2925      	cmp	r1, #37	; 0x25
 80014a8:	d1f2      	bne.n	8001490 <chvprintf+0x10>
    p = tmpbuf;
    s = tmpbuf;

    /* Alignment mode.*/
    left_align = false;
    if (*fmt == '-') {
 80014aa:	782b      	ldrb	r3, [r5, #0]
 80014ac:	2b2d      	cmp	r3, #45	; 0x2d
 80014ae:	d043      	beq.n	8001538 <chvprintf+0xb8>
    left_align = false;
 80014b0:	f04f 0a00 	mov.w	sl, #0
      left_align = true;
    }

    /* Sign mode.*/
    do_sign = false;
    if (*fmt == '+') {
 80014b4:	782b      	ldrb	r3, [r5, #0]
 80014b6:	2b2b      	cmp	r3, #43	; 0x2b
 80014b8:	d043      	beq.n	8001542 <chvprintf+0xc2>
    do_sign = false;
 80014ba:	2200      	movs	r2, #0
      do_sign = true;
    }

    /* Filler mode.*/
    filler = ' ';
    if (*fmt == '0') {
 80014bc:	f895 8000 	ldrb.w	r8, [r5]
 80014c0:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 80014c4:	d040      	beq.n	8001548 <chvprintf+0xc8>
    filler = ' ';
 80014c6:	f04f 0820 	mov.w	r8, #32
      fmt++;
      filler = '0';
    }
    
    /* Width modifier.*/
    if (c == '*') {
 80014ca:	292a      	cmp	r1, #42	; 0x2a
 80014cc:	d13e      	bne.n	800154c <chvprintf+0xcc>
      width = va_arg(ap, int);
 80014ce:	9b01      	ldr	r3, [sp, #4]
 80014d0:	1d18      	adds	r0, r3, #4
 80014d2:	9001      	str	r0, [sp, #4]
 80014d4:	681c      	ldr	r4, [r3, #0]
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
    if (c == '.') {
 80014d6:	292e      	cmp	r1, #46	; 0x2e
 80014d8:	d046      	beq.n	8001568 <chvprintf+0xe8>
    precision = 0;
 80014da:	2300      	movs	r3, #0
        }
      }
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80014dc:	296c      	cmp	r1, #108	; 0x6c
 80014de:	d064      	beq.n	80015aa <chvprintf+0x12a>
 80014e0:	294c      	cmp	r1, #76	; 0x4c
 80014e2:	d062      	beq.n	80015aa <chvprintf+0x12a>
      if (c == 0) {
        return n;
      }
    }
    else {
      is_long = (c >= 'A') && (c <= 'Z');
 80014e4:	f1a1 0041 	sub.w	r0, r1, #65	; 0x41
 80014e8:	b2c0      	uxtb	r0, r0
 80014ea:	2819      	cmp	r0, #25
 80014ec:	bf8c      	ite	hi
 80014ee:	2000      	movhi	r0, #0
 80014f0:	2001      	movls	r0, #1
 80014f2:	46a9      	mov	r9, r5
    }

    /* Command decoding.*/
    switch (c) {
 80014f4:	f1a1 0544 	sub.w	r5, r1, #68	; 0x44
 80014f8:	2d34      	cmp	r5, #52	; 0x34
 80014fa:	f200 80c8 	bhi.w	800168e <chvprintf+0x20e>
 80014fe:	e8df f005 	tbb	[pc, r5]
 8001502:	c67f      	.short	0xc67f
 8001504:	7fc6c6c6 	.word	0x7fc6c6c6
 8001508:	c6c6c6c6 	.word	0xc6c6c6c6
 800150c:	c6c65bc6 	.word	0xc6c65bc6
 8001510:	9fc6c6c6 	.word	0x9fc6c6c6
 8001514:	c6bfc6c6 	.word	0xc6bfc6c6
 8001518:	c6c6c6c6 	.word	0xc6c6c6c6
 800151c:	c6c6c6c6 	.word	0xc6c6c6c6
 8001520:	c67f5dc6 	.word	0xc67f5dc6
 8001524:	7fc6c6c6 	.word	0x7fc6c6c6
 8001528:	c6c6c6c6 	.word	0xc6c6c6c6
 800152c:	c6c65bc6 	.word	0xc6c65bc6
 8001530:	9fc669c6 	.word	0x9fc669c6
 8001534:	c6c6      	.short	0xc6c6
 8001536:	bf          	.byte	0xbf
 8001537:	00          	.byte	0x00
      fmt++;
 8001538:	f109 0502 	add.w	r5, r9, #2
      left_align = true;
 800153c:	f04f 0a01 	mov.w	sl, #1
 8001540:	e7b8      	b.n	80014b4 <chvprintf+0x34>
      fmt++;
 8001542:	3501      	adds	r5, #1
      do_sign = true;
 8001544:	2201      	movs	r2, #1
 8001546:	e7b9      	b.n	80014bc <chvprintf+0x3c>
      fmt++;
 8001548:	3501      	adds	r5, #1
      filler = '0';
 800154a:	e7be      	b.n	80014ca <chvprintf+0x4a>
      width = 0;
 800154c:	2400      	movs	r4, #0
        c = *fmt++;
 800154e:	f815 1b01 	ldrb.w	r1, [r5], #1
        if (c == 0) {
 8001552:	b321      	cbz	r1, 800159e <chvprintf+0x11e>
        if (c >= '0' && c <= '9') {
 8001554:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b09      	cmp	r3, #9
 800155c:	d8bb      	bhi.n	80014d6 <chvprintf+0x56>
          width = width * 10 + c;
 800155e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001562:	eb03 0444 	add.w	r4, r3, r4, lsl #1
      while (true) {
 8001566:	e7f2      	b.n	800154e <chvprintf+0xce>
      c = *fmt++;
 8001568:	4628      	mov	r0, r5
 800156a:	f810 1b01 	ldrb.w	r1, [r0], #1
      if (c == 0) {
 800156e:	b1b1      	cbz	r1, 800159e <chvprintf+0x11e>
      if (c == '*') {
 8001570:	292a      	cmp	r1, #42	; 0x2a
 8001572:	d106      	bne.n	8001582 <chvprintf+0x102>
        precision = va_arg(ap, int);
 8001574:	9b01      	ldr	r3, [sp, #4]
 8001576:	1d19      	adds	r1, r3, #4
 8001578:	9101      	str	r1, [sp, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
        c = *fmt++;
 800157c:	7869      	ldrb	r1, [r5, #1]
 800157e:	3502      	adds	r5, #2
 8001580:	e7ac      	b.n	80014dc <chvprintf+0x5c>
    precision = 0;
 8001582:	2300      	movs	r3, #0
        while (c >= '0' && c <= '9') {
 8001584:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 8001588:	b2ed      	uxtb	r5, r5
 800158a:	2d09      	cmp	r5, #9
 800158c:	d80b      	bhi.n	80015a6 <chvprintf+0x126>
          precision = precision * 10 + c;
 800158e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001592:	eb05 0343 	add.w	r3, r5, r3, lsl #1
          c = *fmt++;
 8001596:	f810 1b01 	ldrb.w	r1, [r0], #1
          if (c == 0) {
 800159a:	2900      	cmp	r1, #0
 800159c:	d1f2      	bne.n	8001584 <chvprintf+0x104>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 800159e:	4638      	mov	r0, r7
 80015a0:	b007      	add	sp, #28
 80015a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (c >= '0' && c <= '9') {
 80015a6:	4605      	mov	r5, r0
 80015a8:	e798      	b.n	80014dc <chvprintf+0x5c>
      c = *fmt++;
 80015aa:	46a9      	mov	r9, r5
 80015ac:	f819 1b01 	ldrb.w	r1, [r9], #1
      if (c == 0) {
 80015b0:	2900      	cmp	r1, #0
 80015b2:	d0f4      	beq.n	800159e <chvprintf+0x11e>
      is_long = true;
 80015b4:	2001      	movs	r0, #1
 80015b6:	e79d      	b.n	80014f4 <chvprintf+0x74>
      c = 16;
 80015b8:	2208      	movs	r2, #8
 80015ba:	e042      	b.n	8001642 <chvprintf+0x1c2>
      *p++ = va_arg(ap, int);
 80015bc:	9b01      	ldr	r3, [sp, #4]
 80015be:	1d1a      	adds	r2, r3, #4
 80015c0:	9201      	str	r2, [sp, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f88d 300c 	strb.w	r3, [sp, #12]
      filler = ' ';
 80015c8:	f04f 0820 	mov.w	r8, #32
    s = tmpbuf;
 80015cc:	ad03      	add	r5, sp, #12
      *p++ = va_arg(ap, int);
 80015ce:	f10d 000d 	add.w	r0, sp, #13
 80015d2:	e03f      	b.n	8001654 <chvprintf+0x1d4>
      if ((s = va_arg(ap, char *)) == 0) {
 80015d4:	9a01      	ldr	r2, [sp, #4]
 80015d6:	1d11      	adds	r1, r2, #4
 80015d8:	9101      	str	r1, [sp, #4]
 80015da:	6815      	ldr	r5, [r2, #0]
 80015dc:	b115      	cbz	r5, 80015e4 <chvprintf+0x164>
      if (precision == 0) {
 80015de:	b163      	cbz	r3, 80015fa <chvprintf+0x17a>
        precision = 32767;
 80015e0:	4628      	mov	r0, r5
 80015e2:	e002      	b.n	80015ea <chvprintf+0x16a>
        s = "(null)";
 80015e4:	4d40      	ldr	r5, [pc, #256]	; (80016e8 <chvprintf+0x268>)
 80015e6:	e7fa      	b.n	80015de <chvprintf+0x15e>
      for (p = s; *p && (--precision >= 0); p++)
 80015e8:	3001      	adds	r0, #1
 80015ea:	7802      	ldrb	r2, [r0, #0]
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	d054      	beq.n	800169a <chvprintf+0x21a>
 80015f0:	3b01      	subs	r3, #1
 80015f2:	d5f9      	bpl.n	80015e8 <chvprintf+0x168>
      filler = ' ';
 80015f4:	f04f 0820 	mov.w	r8, #32
 80015f8:	e02c      	b.n	8001654 <chvprintf+0x1d4>
        precision = 32767;
 80015fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80015fe:	e7ef      	b.n	80015e0 <chvprintf+0x160>
      if (is_long) {
 8001600:	b160      	cbz	r0, 800161c <chvprintf+0x19c>
        l = va_arg(ap, long);
 8001602:	9b01      	ldr	r3, [sp, #4]
 8001604:	1d19      	adds	r1, r3, #4
 8001606:	9101      	str	r1, [sp, #4]
 8001608:	6819      	ldr	r1, [r3, #0]
      if (l < 0) {
 800160a:	2900      	cmp	r1, #0
 800160c:	db0b      	blt.n	8001626 <chvprintf+0x1a6>
        if (do_sign) {
 800160e:	b1aa      	cbz	r2, 800163c <chvprintf+0x1bc>
          *p++ = '+';
 8001610:	232b      	movs	r3, #43	; 0x2b
 8001612:	f88d 300c 	strb.w	r3, [sp, #12]
 8001616:	f10d 000d 	add.w	r0, sp, #13
 800161a:	e00a      	b.n	8001632 <chvprintf+0x1b2>
        l = va_arg(ap, int);
 800161c:	9b01      	ldr	r3, [sp, #4]
 800161e:	1d19      	adds	r1, r3, #4
 8001620:	9101      	str	r1, [sp, #4]
 8001622:	6819      	ldr	r1, [r3, #0]
 8001624:	e7f1      	b.n	800160a <chvprintf+0x18a>
        *p++ = '-';
 8001626:	232d      	movs	r3, #45	; 0x2d
 8001628:	f88d 300c 	strb.w	r3, [sp, #12]
        l = -l;
 800162c:	4249      	negs	r1, r1
        *p++ = '-';
 800162e:	f10d 000d 	add.w	r0, sp, #13
      p = ch_ltoa(p, l, 10);
 8001632:	220a      	movs	r2, #10
 8001634:	f7ff ff1c 	bl	8001470 <ch_ltoa>
    s = tmpbuf;
 8001638:	ad03      	add	r5, sp, #12
 800163a:	e00b      	b.n	8001654 <chvprintf+0x1d4>
    p = tmpbuf;
 800163c:	a803      	add	r0, sp, #12
 800163e:	e7f8      	b.n	8001632 <chvprintf+0x1b2>
      c = 10;
 8001640:	220a      	movs	r2, #10
      if (is_long) {
 8001642:	b1f8      	cbz	r0, 8001684 <chvprintf+0x204>
        l = va_arg(ap, unsigned long);
 8001644:	9b01      	ldr	r3, [sp, #4]
 8001646:	1d19      	adds	r1, r3, #4
 8001648:	9101      	str	r1, [sp, #4]
 800164a:	6819      	ldr	r1, [r3, #0]
      p = ch_ltoa(p, l, c);
 800164c:	a803      	add	r0, sp, #12
 800164e:	f7ff ff0f 	bl	8001470 <ch_ltoa>
    s = tmpbuf;
 8001652:	ad03      	add	r5, sp, #12
    i = (int)(p - s);
 8001654:	eba0 0b05 	sub.w	fp, r0, r5
    if ((width -= i) < 0) {
 8001658:	ebb4 040b 	subs.w	r4, r4, fp
 800165c:	d420      	bmi.n	80016a0 <chvprintf+0x220>
    if (left_align == false) {
 800165e:	f1ba 0f00 	cmp.w	sl, #0
 8001662:	d100      	bne.n	8001666 <chvprintf+0x1e6>
      width = -width;
 8001664:	4264      	negs	r4, r4
    if (width < 0) {
 8001666:	2c00      	cmp	r4, #0
 8001668:	db1c      	blt.n	80016a4 <chvprintf+0x224>
    while (--i >= 0) {
 800166a:	f1bb 0b01 	subs.w	fp, fp, #1
 800166e:	d438      	bmi.n	80016e2 <chvprintf+0x262>
      streamPut(chp, (uint8_t)*s++);
 8001670:	6833      	ldr	r3, [r6, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f815 1b01 	ldrb.w	r1, [r5], #1
 8001678:	4630      	mov	r0, r6
 800167a:	4798      	blx	r3
      n++;
 800167c:	3701      	adds	r7, #1
 800167e:	e7f4      	b.n	800166a <chvprintf+0x1ea>
      c = 16;
 8001680:	2210      	movs	r2, #16
 8001682:	e7de      	b.n	8001642 <chvprintf+0x1c2>
        l = va_arg(ap, unsigned int);
 8001684:	9b01      	ldr	r3, [sp, #4]
 8001686:	1d19      	adds	r1, r3, #4
 8001688:	9101      	str	r1, [sp, #4]
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	e7de      	b.n	800164c <chvprintf+0x1cc>
      *p++ = c;
 800168e:	f88d 100c 	strb.w	r1, [sp, #12]
    s = tmpbuf;
 8001692:	ad03      	add	r5, sp, #12
      *p++ = c;
 8001694:	f10d 000d 	add.w	r0, sp, #13
 8001698:	e7dc      	b.n	8001654 <chvprintf+0x1d4>
      filler = ' ';
 800169a:	f04f 0820 	mov.w	r8, #32
 800169e:	e7d9      	b.n	8001654 <chvprintf+0x1d4>
      width = 0;
 80016a0:	2400      	movs	r4, #0
 80016a2:	e7dc      	b.n	800165e <chvprintf+0x1de>
      if (*s == '-' && filler == '0') {
 80016a4:	7829      	ldrb	r1, [r5, #0]
 80016a6:	292d      	cmp	r1, #45	; 0x2d
 80016a8:	d008      	beq.n	80016bc <chvprintf+0x23c>
        streamPut(chp, (uint8_t)filler);
 80016aa:	6833      	ldr	r3, [r6, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4641      	mov	r1, r8
 80016b0:	4630      	mov	r0, r6
 80016b2:	4798      	blx	r3
        n++;
 80016b4:	3701      	adds	r7, #1
      } while (++width != 0);
 80016b6:	3401      	adds	r4, #1
 80016b8:	d1f7      	bne.n	80016aa <chvprintf+0x22a>
 80016ba:	e7d6      	b.n	800166a <chvprintf+0x1ea>
      if (*s == '-' && filler == '0') {
 80016bc:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 80016c0:	d1f3      	bne.n	80016aa <chvprintf+0x22a>
        streamPut(chp, (uint8_t)*s++);
 80016c2:	3501      	adds	r5, #1
 80016c4:	6833      	ldr	r3, [r6, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4630      	mov	r0, r6
 80016ca:	4798      	blx	r3
        n++;
 80016cc:	3701      	adds	r7, #1
        i--;
 80016ce:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80016d2:	e7ea      	b.n	80016aa <chvprintf+0x22a>
      streamPut(chp, (uint8_t)filler);
 80016d4:	6833      	ldr	r3, [r6, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4641      	mov	r1, r8
 80016da:	4630      	mov	r0, r6
 80016dc:	4798      	blx	r3
      n++;
 80016de:	3701      	adds	r7, #1
      width--;
 80016e0:	3c01      	subs	r4, #1
    while (width) {
 80016e2:	2c00      	cmp	r4, #0
 80016e4:	d1f6      	bne.n	80016d4 <chvprintf+0x254>
 80016e6:	e6d9      	b.n	800149c <chvprintf+0x1c>
 80016e8:	0800c1d4 	.word	0x0800c1d4
 80016ec:	00000000 	.word	0x00000000

080016f0 <dyn_list_unlink>:
  return NULL;
}

static dyn_element_t *dyn_list_unlink(dyn_element_t *element,
                                      dyn_list_t *dlp) {
  dyn_element_t *prev = (dyn_element_t *)dlp;
 80016f0:	460b      	mov	r3, r1

  /* Scanning the list.*/
  while (prev->next != (dyn_element_t *)dlp) {
 80016f2:	461a      	mov	r2, r3
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	428b      	cmp	r3, r1
 80016f8:	d004      	beq.n	8001704 <dyn_list_unlink+0x14>
    if (prev->next == element) {
 80016fa:	4283      	cmp	r3, r0
 80016fc:	d1f9      	bne.n	80016f2 <dyn_list_unlink+0x2>
      /* Found.*/
      prev->next = element->next;
 80016fe:	6803      	ldr	r3, [r0, #0]
 8001700:	6013      	str	r3, [r2, #0]
      return element;
 8001702:	4770      	bx	lr

    /* Next element in the list.*/
    prev = prev->next;
  }

  return NULL;
 8001704:	2000      	movs	r0, #0
}
 8001706:	4770      	bx	lr
	...

08001710 <chCacheReadObject>:
 *
 * @api
 */
bool chCacheReadObject(objects_cache_t *ocp,
                       oc_object_t *objp,
                       bool async) {
 8001710:	b510      	push	{r4, lr}

  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 8001712:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8001714:	f044 0408 	orr.w	r4, r4, #8
 8001718:	624c      	str	r4, [r1, #36]	; 0x24

  return ocp->readf(ocp, objp, async);
 800171a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800171c:	4798      	blx	r3
}
 800171e:	bd10      	pop	{r4, pc}

08001720 <hash_get_s>:
                               uint32_t key) {
 8001720:	b430      	push	{r4, r5}
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 8001722:	6845      	ldr	r5, [r0, #4]
 8001724:	6803      	ldr	r3, [r0, #0]
 8001726:	3b01      	subs	r3, #1
 8001728:	1888      	adds	r0, r1, r2
 800172a:	4003      	ands	r3, r0
 800172c:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
  objp = hhp->hash_next;
 8001730:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
  while (objp != (oc_object_t *)hhp) {
 8001734:	e000      	b.n	8001738 <hash_get_s+0x18>
    objp = objp->hash_next;
 8001736:	6800      	ldr	r0, [r0, #0]
  while (objp != (oc_object_t *)hhp) {
 8001738:	42a0      	cmp	r0, r4
 800173a:	d006      	beq.n	800174a <hash_get_s+0x2a>
    if ((objp->obj_key == key) && (objp->obj_group == group)) {
 800173c:	6943      	ldr	r3, [r0, #20]
 800173e:	4293      	cmp	r3, r2
 8001740:	d1f9      	bne.n	8001736 <hash_get_s+0x16>
 8001742:	6903      	ldr	r3, [r0, #16]
 8001744:	428b      	cmp	r3, r1
 8001746:	d1f6      	bne.n	8001736 <hash_get_s+0x16>
 8001748:	e000      	b.n	800174c <hash_get_s+0x2c>
  return NULL;
 800174a:	2000      	movs	r0, #0
}
 800174c:	bc30      	pop	{r4, r5}
 800174e:	4770      	bx	lr

08001750 <chPoolFreeI>:
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8001750:	6803      	ldr	r3, [r0, #0]
 8001752:	600b      	str	r3, [r1, #0]
  mp->next = php;
 8001754:	6001      	str	r1, [r0, #0]
}
 8001756:	4770      	bx	lr
	...

08001760 <chPoolFree>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chPoolFree(memory_pool_t *mp, void *objp) {
 8001760:	b508      	push	{r3, lr}
 8001762:	2320      	movs	r3, #32
 8001764:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chPoolFreeI(mp, objp);
 8001768:	f7ff fff2 	bl	8001750 <chPoolFreeI>
 800176c:	2300      	movs	r3, #0
 800176e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8001772:	bd08      	pop	{r3, pc}
	...

08001780 <dyn_release_object_pool>:
                                    memory_pool_t *mp) {

  chDbgCheck(dep != NULL);
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");

  dep->refs--;
 8001780:	6843      	ldr	r3, [r0, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	6043      	str	r3, [r0, #4]
  if (dep->refs == (ucnt_t)0) {
 8001786:	b103      	cbz	r3, 800178a <dyn_release_object_pool+0xa>
 8001788:	4770      	bx	lr
                                    memory_pool_t *mp) {
 800178a:	b510      	push	{r4, lr}
 800178c:	4614      	mov	r4, r2
    dep = dyn_list_unlink(dep, dlp);
 800178e:	f7ff ffaf 	bl	80016f0 <dyn_list_unlink>
 8001792:	4601      	mov	r1, r0
    chPoolFree(mp, (void *)dep);
 8001794:	4620      	mov	r0, r4
 8001796:	f7ff ffe3 	bl	8001760 <chPoolFree>
  }
}
 800179a:	bd10      	pop	{r4, pc}
 800179c:	0000      	movs	r0, r0
	...

080017a0 <chPoolAllocI>:
void *chPoolAllocI(memory_pool_t *mp) {
 80017a0:	b508      	push	{r3, lr}
 80017a2:	4603      	mov	r3, r0
  objp = mp->next;
 80017a4:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 80017a6:	b110      	cbz	r0, 80017ae <chPoolAllocI+0xe>
    mp->next = mp->next->next;
 80017a8:	6802      	ldr	r2, [r0, #0]
 80017aa:	601a      	str	r2, [r3, #0]
}
 80017ac:	bd08      	pop	{r3, pc}
  else if (mp->provider != NULL) {
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	2a00      	cmp	r2, #0
 80017b2:	d0fb      	beq.n	80017ac <chPoolAllocI+0xc>
    objp = mp->provider(mp->object_size, mp->align);
 80017b4:	6899      	ldr	r1, [r3, #8]
 80017b6:	6858      	ldr	r0, [r3, #4]
 80017b8:	4790      	blx	r2
  return objp;
 80017ba:	e7f7      	b.n	80017ac <chPoolAllocI+0xc>
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <chPoolAlloc>:
void *chPoolAlloc(memory_pool_t *mp) {
 80017c0:	b508      	push	{r3, lr}
 80017c2:	2320      	movs	r3, #32
 80017c4:	f383 8811 	msr	BASEPRI, r3
  objp = chPoolAllocI(mp);
 80017c8:	f7ff ffea 	bl	80017a0 <chPoolAllocI>
 80017cc:	2300      	movs	r3, #0
 80017ce:	f383 8811 	msr	BASEPRI, r3
}
 80017d2:	bd08      	pop	{r3, pc}
	...

080017e0 <chPoolLoadArray>:
void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {
 80017e0:	b570      	push	{r4, r5, r6, lr}
 80017e2:	4606      	mov	r6, r0
 80017e4:	460d      	mov	r5, r1
 80017e6:	4614      	mov	r4, r2
  while (n != 0U) {
 80017e8:	b13c      	cbz	r4, 80017fa <chPoolLoadArray+0x1a>
 *
 * @api
 */
static inline void chPoolAdd(memory_pool_t *mp, void *objp) {

  chPoolFree(mp, objp);
 80017ea:	4629      	mov	r1, r5
 80017ec:	4630      	mov	r0, r6
 80017ee:	f7ff ffb7 	bl	8001760 <chPoolFree>
    p = (void *)(((uint8_t *)p) + mp->object_size);
 80017f2:	6873      	ldr	r3, [r6, #4]
 80017f4:	441d      	add	r5, r3
    n--;
 80017f6:	3c01      	subs	r4, #1
 80017f8:	e7f6      	b.n	80017e8 <chPoolLoadArray+0x8>
}
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
 80017fc:	0000      	movs	r0, r0
	...

08001800 <chPoolObjectInitAligned>:
                             unsigned align, memgetfunc_t provider) {
 8001800:	b410      	push	{r4}
  mp->next = NULL;
 8001802:	2400      	movs	r4, #0
 8001804:	6004      	str	r4, [r0, #0]
  mp->object_size = size;
 8001806:	6041      	str	r1, [r0, #4]
  mp->align = align;
 8001808:	6082      	str	r2, [r0, #8]
  mp->provider = provider;
 800180a:	60c3      	str	r3, [r0, #12]
}
 800180c:	bc10      	pop	{r4}
 800180e:	4770      	bx	lr

08001810 <oslib_test_007_001_execute>:

static void oslib_test_007_001_setup(void) {
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
}

static void oslib_test_007_001_execute(void) {
 8001810:	b510      	push	{r4, lr}
  unsigned i;

  /* [7.1.1] Adding the objects to the pool using chPoolLoadArray().*/
  test_set_step(1);
 8001812:	4c34      	ldr	r4, [pc, #208]	; (80018e4 <oslib_test_007_001_execute+0xd4>)
 8001814:	2301      	movs	r3, #1
 8001816:	6023      	str	r3, [r4, #0]
  {
    chPoolLoadArray(&mp1, objects, MEMORY_POOL_SIZE);
 8001818:	2204      	movs	r2, #4
 800181a:	4933      	ldr	r1, [pc, #204]	; (80018e8 <oslib_test_007_001_execute+0xd8>)
 800181c:	4833      	ldr	r0, [pc, #204]	; (80018ec <oslib_test_007_001_execute+0xdc>)
 800181e:	f7ff ffdf 	bl	80017e0 <chPoolLoadArray>
  }
  test_end_step(1);

  /* [7.1.2] Emptying the pool using chPoolAlloc().*/
  test_set_step(2);
 8001822:	2302      	movs	r3, #2
 8001824:	6023      	str	r3, [r4, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001826:	2400      	movs	r4, #0
 8001828:	2c03      	cmp	r4, #3
 800182a:	d80c      	bhi.n	8001846 <oslib_test_007_001_execute+0x36>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 800182c:	482f      	ldr	r0, [pc, #188]	; (80018ec <oslib_test_007_001_execute+0xdc>)
 800182e:	f7ff ffc7 	bl	80017c0 <chPoolAlloc>
 8001832:	492f      	ldr	r1, [pc, #188]	; (80018f0 <oslib_test_007_001_execute+0xe0>)
 8001834:	3800      	subs	r0, #0
 8001836:	bf18      	it	ne
 8001838:	2001      	movne	r0, #1
 800183a:	f7ff fcd9 	bl	80011f0 <_test_assert>
 800183e:	2800      	cmp	r0, #0
 8001840:	d13b      	bne.n	80018ba <oslib_test_007_001_execute+0xaa>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001842:	3401      	adds	r4, #1
 8001844:	e7f0      	b.n	8001828 <oslib_test_007_001_execute+0x18>
  }
  test_end_step(2);

  /* [7.1.3] Now must be empty.*/
  test_set_step(3);
 8001846:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <oslib_test_007_001_execute+0xd4>)
 8001848:	2203      	movs	r2, #3
 800184a:	601a      	str	r2, [r3, #0]
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 800184c:	4827      	ldr	r0, [pc, #156]	; (80018ec <oslib_test_007_001_execute+0xdc>)
 800184e:	f7ff ffb7 	bl	80017c0 <chPoolAlloc>
 8001852:	4928      	ldr	r1, [pc, #160]	; (80018f4 <oslib_test_007_001_execute+0xe4>)
 8001854:	fab0 f080 	clz	r0, r0
 8001858:	0940      	lsrs	r0, r0, #5
 800185a:	f7ff fcc9 	bl	80011f0 <_test_assert>
 800185e:	bb60      	cbnz	r0, 80018ba <oslib_test_007_001_execute+0xaa>
  }
  test_end_step(3);

  /* [7.1.4] Adding the objects to the pool using chPoolFree().*/
  test_set_step(4);
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <oslib_test_007_001_execute+0xd4>)
 8001862:	2204      	movs	r2, #4
 8001864:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001866:	2400      	movs	r4, #0
 8001868:	e006      	b.n	8001878 <oslib_test_007_001_execute+0x68>
      chPoolFree(&mp1, &objects[i]);
 800186a:	491f      	ldr	r1, [pc, #124]	; (80018e8 <oslib_test_007_001_execute+0xd8>)
 800186c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001870:	481e      	ldr	r0, [pc, #120]	; (80018ec <oslib_test_007_001_execute+0xdc>)
 8001872:	f7ff ff75 	bl	8001760 <chPoolFree>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001876:	3401      	adds	r4, #1
 8001878:	2c03      	cmp	r4, #3
 800187a:	d9f6      	bls.n	800186a <oslib_test_007_001_execute+0x5a>
  }
  test_end_step(4);

  /* [7.1.5] Emptying the pool using chPoolAlloc() again.*/
  test_set_step(5);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <oslib_test_007_001_execute+0xd4>)
 800187e:	2205      	movs	r2, #5
 8001880:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8001882:	2400      	movs	r4, #0
 8001884:	2c03      	cmp	r4, #3
 8001886:	d80b      	bhi.n	80018a0 <oslib_test_007_001_execute+0x90>
      test_assert(chPoolAlloc(&mp1) != NULL, "list empty");
 8001888:	4818      	ldr	r0, [pc, #96]	; (80018ec <oslib_test_007_001_execute+0xdc>)
 800188a:	f7ff ff99 	bl	80017c0 <chPoolAlloc>
 800188e:	4918      	ldr	r1, [pc, #96]	; (80018f0 <oslib_test_007_001_execute+0xe0>)
 8001890:	3800      	subs	r0, #0
 8001892:	bf18      	it	ne
 8001894:	2001      	movne	r0, #1
 8001896:	f7ff fcab 	bl	80011f0 <_test_assert>
 800189a:	b970      	cbnz	r0, 80018ba <oslib_test_007_001_execute+0xaa>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800189c:	3401      	adds	r4, #1
 800189e:	e7f1      	b.n	8001884 <oslib_test_007_001_execute+0x74>
  }
  test_end_step(5);

  /* [7.1.6] Now must be empty again.*/
  test_set_step(6);
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <oslib_test_007_001_execute+0xd4>)
 80018a2:	2206      	movs	r2, #6
 80018a4:	601a      	str	r2, [r3, #0]
  {
    test_assert(chPoolAlloc(&mp1) == NULL, "list not empty");
 80018a6:	4811      	ldr	r0, [pc, #68]	; (80018ec <oslib_test_007_001_execute+0xdc>)
 80018a8:	f7ff ff8a 	bl	80017c0 <chPoolAlloc>
 80018ac:	4911      	ldr	r1, [pc, #68]	; (80018f4 <oslib_test_007_001_execute+0xe4>)
 80018ae:	fab0 f080 	clz	r0, r0
 80018b2:	0940      	lsrs	r0, r0, #5
 80018b4:	f7ff fc9c 	bl	80011f0 <_test_assert>
 80018b8:	b100      	cbz	r0, 80018bc <oslib_test_007_001_execute+0xac>
  {
    chPoolObjectInit(&mp1, sizeof (uint32_t), null_provider);
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
  }
  test_end_step(7);
}
 80018ba:	bd10      	pop	{r4, pc}
  test_set_step(7);
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <oslib_test_007_001_execute+0xd4>)
 80018be:	2207      	movs	r2, #7
 80018c0:	601a      	str	r2, [r3, #0]
  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 80018c2:	4c0a      	ldr	r4, [pc, #40]	; (80018ec <oslib_test_007_001_execute+0xdc>)
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <oslib_test_007_001_execute+0xe8>)
 80018c6:	2204      	movs	r2, #4
 80018c8:	4611      	mov	r1, r2
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff ff98 	bl	8001800 <chPoolObjectInitAligned>
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 80018d0:	4620      	mov	r0, r4
 80018d2:	f7ff ff75 	bl	80017c0 <chPoolAlloc>
 80018d6:	4909      	ldr	r1, [pc, #36]	; (80018fc <oslib_test_007_001_execute+0xec>)
 80018d8:	fab0 f080 	clz	r0, r0
 80018dc:	0940      	lsrs	r0, r0, #5
 80018de:	f7ff fc87 	bl	80011f0 <_test_assert>
  test_end_step(7);
 80018e2:	e7ea      	b.n	80018ba <oslib_test_007_001_execute+0xaa>
 80018e4:	20002454 	.word	0x20002454
 80018e8:	20001d10 	.word	0x20001d10
 80018ec:	20000874 	.word	0x20000874
 80018f0:	0800c1dc 	.word	0x0800c1dc
 80018f4:	0800c1e8 	.word	0x0800c1e8
 80018f8:	08000701 	.word	0x08000701
 80018fc:	0800c1f8 	.word	0x0800c1f8

08001900 <oslib_test_007_001_setup>:
static void oslib_test_007_001_setup(void) {
 8001900:	b508      	push	{r3, lr}
 8001902:	2300      	movs	r3, #0
 8001904:	2204      	movs	r2, #4
 8001906:	4611      	mov	r1, r2
 8001908:	4801      	ldr	r0, [pc, #4]	; (8001910 <oslib_test_007_001_setup+0x10>)
 800190a:	f7ff ff79 	bl	8001800 <chPoolObjectInitAligned>
}
 800190e:	bd08      	pop	{r3, pc}
 8001910:	20000874 	.word	0x20000874
	...

08001920 <rt_test_010_002_setup>:
 *   execution sequence.
 * - [10.2.6] Testing that the pool contains four elements again.
 * .
 */

static void rt_test_010_002_setup(void) {
 8001920:	b508      	push	{r3, lr}
 8001922:	2300      	movs	r3, #0
 8001924:	2204      	movs	r2, #4
 8001926:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800192a:	4802      	ldr	r0, [pc, #8]	; (8001934 <rt_test_010_002_setup+0x14>)
 800192c:	f7ff ff68 	bl	8001800 <chPoolObjectInitAligned>
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8001930:	bd08      	pop	{r3, pc}
 8001932:	bf00      	nop
 8001934:	20001bf0 	.word	0x20001bf0
	...

08001940 <chCoreGetStatusX>:
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 8001940:	4b02      	ldr	r3, [pc, #8]	; (800194c <chCoreGetStatusX+0xc>)
 8001942:	6858      	ldr	r0, [r3, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
  /*lint -restore*/
}
 8001946:	1ac0      	subs	r0, r0, r3
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20001ad8 	.word	0x20001ad8

08001950 <chCoreAllocFromTopI>:
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 8001950:	b410      	push	{r4}
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <chCoreAllocFromTopI+0x28>)
 8001954:	685c      	ldr	r4, [r3, #4]
 8001956:	1a20      	subs	r0, r4, r0
 8001958:	4249      	negs	r1, r1
 800195a:	4008      	ands	r0, r1
  prev = p - offset;
 800195c:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4293      	cmp	r3, r2
 8001962:	d805      	bhi.n	8001970 <chCoreAllocFromTopI+0x20>
 8001964:	4294      	cmp	r4, r2
 8001966:	d305      	bcc.n	8001974 <chCoreAllocFromTopI+0x24>
  ch_memcore.topmem = prev;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <chCoreAllocFromTopI+0x28>)
 800196a:	605a      	str	r2, [r3, #4]
}
 800196c:	bc10      	pop	{r4}
 800196e:	4770      	bx	lr
    return NULL;
 8001970:	2000      	movs	r0, #0
 8001972:	e7fb      	b.n	800196c <chCoreAllocFromTopI+0x1c>
 8001974:	2000      	movs	r0, #0
 8001976:	e7f9      	b.n	800196c <chCoreAllocFromTopI+0x1c>
 8001978:	20001ad8 	.word	0x20001ad8
 800197c:	00000000 	.word	0x00000000

08001980 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8001980:	b508      	push	{r3, lr}

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8001982:	2200      	movs	r2, #0
 8001984:	f7ff ffe4 	bl	8001950 <chCoreAllocFromTopI>
}
 8001988:	bd08      	pop	{r3, pc}
 800198a:	bf00      	nop
 800198c:	0000      	movs	r0, r0
	...

08001990 <chCoreAllocFromTop>:
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8001990:	b508      	push	{r3, lr}
 8001992:	2320      	movs	r3, #32
 8001994:	f383 8811 	msr	BASEPRI, r3
  p = chCoreAllocFromTopI(size, align, offset);
 8001998:	f7ff ffda 	bl	8001950 <chCoreAllocFromTopI>
 800199c:	2300      	movs	r3, #0
 800199e:	f383 8811 	msr	BASEPRI, r3
}
 80019a2:	bd08      	pop	{r3, pc}
	...

080019b0 <chMBObjectInit>:
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 80019b0:	6001      	str	r1, [r0, #0]
  mbp->rdptr  = buf;
 80019b2:	60c1      	str	r1, [r0, #12]
  mbp->wrptr  = buf;
 80019b4:	6081      	str	r1, [r0, #8]
  mbp->top    = &buf[n];
 80019b6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80019ba:	6041      	str	r1, [r0, #4]
  mbp->cnt    = (size_t)0;
 80019bc:	2300      	movs	r3, #0
 80019be:	6103      	str	r3, [r0, #16]
  mbp->reset  = false;
 80019c0:	7503      	strb	r3, [r0, #20]
  chThdQueueObjectInit(&mbp->qw);
 80019c2:	f100 0318 	add.w	r3, r0, #24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80019c6:	6183      	str	r3, [r0, #24]
  tqp->prev = (thread_t *)tqp;
 80019c8:	61c3      	str	r3, [r0, #28]
  chThdQueueObjectInit(&mbp->qr);
 80019ca:	f100 0320 	add.w	r3, r0, #32
  tqp->next = (thread_t *)tqp;
 80019ce:	6203      	str	r3, [r0, #32]
  tqp->prev = (thread_t *)tqp;
 80019d0:	6243      	str	r3, [r0, #36]	; 0x24
}
 80019d2:	4770      	bx	lr
	...

080019e0 <oslib_test_002_003_setup>:
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 80019e0:	b508      	push	{r3, lr}
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
 80019e2:	2204      	movs	r2, #4
 80019e4:	4902      	ldr	r1, [pc, #8]	; (80019f0 <oslib_test_002_003_setup+0x10>)
 80019e6:	4803      	ldr	r0, [pc, #12]	; (80019f4 <oslib_test_002_003_setup+0x14>)
 80019e8:	f7ff ffe2 	bl	80019b0 <chMBObjectInit>
}
 80019ec:	bd08      	pop	{r3, pc}
 80019ee:	bf00      	nop
 80019f0:	20001be0 	.word	0x20001be0
 80019f4:	2000084c 	.word	0x2000084c
	...

08001a00 <oslib_test_002_002_setup>:
static void oslib_test_002_002_setup(void) {
 8001a00:	b508      	push	{r3, lr}
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
 8001a02:	2204      	movs	r2, #4
 8001a04:	4902      	ldr	r1, [pc, #8]	; (8001a10 <oslib_test_002_002_setup+0x10>)
 8001a06:	4803      	ldr	r0, [pc, #12]	; (8001a14 <oslib_test_002_002_setup+0x14>)
 8001a08:	f7ff ffd2 	bl	80019b0 <chMBObjectInit>
}
 8001a0c:	bd08      	pop	{r3, pc}
 8001a0e:	bf00      	nop
 8001a10:	20001be0 	.word	0x20001be0
 8001a14:	2000084c 	.word	0x2000084c
	...

08001a20 <oslib_test_002_001_setup>:
static void oslib_test_002_001_setup(void) {
 8001a20:	b508      	push	{r3, lr}
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
 8001a22:	2204      	movs	r2, #4
 8001a24:	4902      	ldr	r1, [pc, #8]	; (8001a30 <oslib_test_002_001_setup+0x10>)
 8001a26:	4803      	ldr	r0, [pc, #12]	; (8001a34 <oslib_test_002_001_setup+0x14>)
 8001a28:	f7ff ffc2 	bl	80019b0 <chMBObjectInit>
}
 8001a2c:	bd08      	pop	{r3, pc}
 8001a2e:	bf00      	nop
 8001a30:	20001be0 	.word	0x20001be0
 8001a34:	2000084c 	.word	0x2000084c
	...

08001a40 <chEvtDispatch>:
 * @param[in] handlers  an array of @p evhandler_t. The array must have size
 *                      equal to the number of bits in eventmask_t.
 *
 * @api
 */
void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 8001a40:	b570      	push	{r4, r5, r6, lr}
 8001a42:	4606      	mov	r6, r0
 8001a44:	460d      	mov	r5, r1
  eventid_t eid;

  chDbgCheck(handlers != NULL);

  eid = (eventid_t)0;
 8001a46:	2400      	movs	r4, #0
 8001a48:	e000      	b.n	8001a4c <chEvtDispatch+0xc>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
      chDbgAssert(handlers[eid] != NULL, "null handler");
      events &= ~EVENT_MASK(eid);
      handlers[eid](eid);
    }
    eid++;
 8001a4a:	3401      	adds	r4, #1
  while (events != (eventmask_t)0) {
 8001a4c:	b16d      	cbz	r5, 8001a6a <chEvtDispatch+0x2a>
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 8001a4e:	fa25 f304 	lsr.w	r3, r5, r4
 8001a52:	f013 0f01 	tst.w	r3, #1
 8001a56:	d0f8      	beq.n	8001a4a <chEvtDispatch+0xa>
      events &= ~EVENT_MASK(eid);
 8001a58:	2301      	movs	r3, #1
 8001a5a:	40a3      	lsls	r3, r4
 8001a5c:	ea25 0503 	bic.w	r5, r5, r3
      handlers[eid](eid);
 8001a60:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8001a64:	4620      	mov	r0, r4
 8001a66:	4798      	blx	r3
 8001a68:	e7ef      	b.n	8001a4a <chEvtDispatch+0xa>
  }
}
 8001a6a:	bd70      	pop	{r4, r5, r6, pc}
 8001a6c:	0000      	movs	r0, r0
	...

08001a70 <rt_test_009_002_execute>:

static void rt_test_009_002_setup(void) {
  chEvtGetAndClearEvents(ALL_EVENTS);
}

static void rt_test_009_002_execute(void) {
 8001a70:	b508      	push	{r3, lr}

  /* [9.2.1] Three evenf flag bits are raised then chEvtDispatch() is
     invoked, the sequence of handlers calls is tested.*/
  test_set_step(1);
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <rt_test_009_002_execute+0x1c>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
  {
    chEvtDispatch(evhndl, 7);
 8001a78:	2107      	movs	r1, #7
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <rt_test_009_002_execute+0x20>)
 8001a7c:	f7ff ffe0 	bl	8001a40 <chEvtDispatch>
    test_assert_sequence("ABC", "invalid sequence");
 8001a80:	4904      	ldr	r1, [pc, #16]	; (8001a94 <rt_test_009_002_execute+0x24>)
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <rt_test_009_002_execute+0x28>)
 8001a84:	f7ff fc64 	bl	8001350 <_test_assert_sequence>
  }
  test_end_step(1);
}
 8001a88:	bd08      	pop	{r3, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20002454 	.word	0x20002454
 8001a90:	0800dae4 	.word	0x0800dae4
 8001a94:	0800c214 	.word	0x0800c214
 8001a98:	0800c228 	.word	0x0800c228
 8001a9c:	00000000 	.word	0x00000000

08001aa0 <chEvtAddEvents>:
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <chEvtAddEvents+0x18>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aac:	4310      	orrs	r0, r2
 8001aae:	6358      	str	r0, [r3, #52]	; 0x34
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f383 8811 	msr	BASEPRI, r3
}
 8001ab6:	4770      	bx	lr
 8001ab8:	20001a18 	.word	0x20001a18
 8001abc:	00000000 	.word	0x00000000

08001ac0 <chEvtGetAndClearEventsI>:
  m = currp->epending & events;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <chEvtGetAndClearEventsI+0x10>)
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	6b53      	ldr	r3, [r2, #52]	; 0x34
  currp->epending &= ~events;
 8001ac6:	ea23 0100 	bic.w	r1, r3, r0
 8001aca:	6351      	str	r1, [r2, #52]	; 0x34
}
 8001acc:	4018      	ands	r0, r3
 8001ace:	4770      	bx	lr
 8001ad0:	20001a18 	.word	0x20001a18
	...

08001ae0 <chEvtGetAndClearEvents>:
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
 8001ae0:	b508      	push	{r3, lr}
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	f383 8811 	msr	BASEPRI, r3
  m = chEvtGetAndClearEventsI(events);
 8001ae8:	f7ff ffea 	bl	8001ac0 <chEvtGetAndClearEventsI>
 8001aec:	2300      	movs	r3, #0
 8001aee:	f383 8811 	msr	BASEPRI, r3
}
 8001af2:	bd08      	pop	{r3, pc}
	...

08001b00 <rt_test_009_007_setup>:
 *   has been emptied.
 * - [9.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_009_007_setup(void) {
 8001b00:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b06:	f7ff ffeb 	bl	8001ae0 <chEvtGetAndClearEvents>
  esp->next = (event_listener_t *)esp;
 8001b0a:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <rt_test_009_007_setup+0x14>)
 8001b0c:	601b      	str	r3, [r3, #0]
 8001b0e:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <rt_test_009_007_setup+0x18>)
 8001b10:	601b      	str	r3, [r3, #0]
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 8001b12:	bd08      	pop	{r3, pc}
 8001b14:	20000808 	.word	0x20000808
 8001b18:	2000080c 	.word	0x2000080c
 8001b1c:	00000000 	.word	0x00000000

08001b20 <rt_test_009_006_setup>:
static void rt_test_009_006_setup(void) {
 8001b20:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b26:	f7ff ffdb 	bl	8001ae0 <chEvtGetAndClearEvents>
}
 8001b2a:	bd08      	pop	{r3, pc}
 8001b2c:	0000      	movs	r0, r0
	...

08001b30 <rt_test_009_005_setup>:
static void rt_test_009_005_setup(void) {
 8001b30:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b36:	f7ff ffd3 	bl	8001ae0 <chEvtGetAndClearEvents>
}
 8001b3a:	bd08      	pop	{r3, pc}
 8001b3c:	0000      	movs	r0, r0
	...

08001b40 <rt_test_009_004_setup>:
static void rt_test_009_004_setup(void) {
 8001b40:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b46:	f7ff ffcb 	bl	8001ae0 <chEvtGetAndClearEvents>
}
 8001b4a:	bd08      	pop	{r3, pc}
 8001b4c:	0000      	movs	r0, r0
	...

08001b50 <rt_test_009_003_setup>:
static void rt_test_009_003_setup(void) {
 8001b50:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b56:	f7ff ffc3 	bl	8001ae0 <chEvtGetAndClearEvents>
}
 8001b5a:	bd08      	pop	{r3, pc}
 8001b5c:	0000      	movs	r0, r0
	...

08001b60 <rt_test_009_002_setup>:
static void rt_test_009_002_setup(void) {
 8001b60:	b508      	push	{r3, lr}
  chEvtGetAndClearEvents(ALL_EVENTS);
 8001b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b66:	f7ff ffbb 	bl	8001ae0 <chEvtGetAndClearEvents>
}
 8001b6a:	bd08      	pop	{r3, pc}
 8001b6c:	0000      	movs	r0, r0
	...

08001b70 <chEvtUnregister>:
 8001b70:	2320      	movs	r3, #32
 8001b72:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 8001b76:	4603      	mov	r3, r0
  while (p->next != (event_listener_t *)esp) {
 8001b78:	461a      	mov	r2, r3
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4283      	cmp	r3, r0
 8001b7e:	d003      	beq.n	8001b88 <chEvtUnregister+0x18>
    if (p->next == elp) {
 8001b80:	428b      	cmp	r3, r1
 8001b82:	d1f9      	bne.n	8001b78 <chEvtUnregister+0x8>
      p->next = elp->next;
 8001b84:	680b      	ldr	r3, [r1, #0]
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f383 8811 	msr	BASEPRI, r3
}
 8001b8e:	4770      	bx	lr

08001b90 <chEvtRegisterMaskWithFlags>:
                                eventflags_t wflags) {
 8001b90:	b410      	push	{r4}
 8001b92:	2420      	movs	r4, #32
 8001b94:	f384 8811 	msr	BASEPRI, r4
  elp->next     = esp->next;
 8001b98:	6804      	ldr	r4, [r0, #0]
 8001b9a:	600c      	str	r4, [r1, #0]
  esp->next     = elp;
 8001b9c:	6001      	str	r1, [r0, #0]
  elp->listener = currp;
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <chEvtRegisterMaskWithFlags+0x24>)
 8001ba0:	6980      	ldr	r0, [r0, #24]
 8001ba2:	6048      	str	r0, [r1, #4]
  elp->events   = events;
 8001ba4:	608a      	str	r2, [r1, #8]
  elp->flags    = (eventflags_t)0;
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60ca      	str	r2, [r1, #12]
  elp->wflags   = wflags;
 8001baa:	610b      	str	r3, [r1, #16]
 8001bac:	f382 8811 	msr	BASEPRI, r2
}
 8001bb0:	bc10      	pop	{r4}
 8001bb2:	4770      	bx	lr
 8001bb4:	20001a18 	.word	0x20001a18
	...

08001bc0 <rt_test_009_001_execute>:
static void rt_test_009_001_execute(void) {
 8001bc0:	b530      	push	{r4, r5, lr}
 8001bc2:	b08b      	sub	sp, #44	; 0x2c
 8001bc4:	4c2d      	ldr	r4, [pc, #180]	; (8001c7c <rt_test_009_001_execute+0xbc>)
 8001bc6:	6024      	str	r4, [r4, #0]
  test_set_step(2);
 8001bc8:	2502      	movs	r5, #2
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <rt_test_009_001_execute+0xc0>)
 8001bcc:	601d      	str	r5, [r3, #0]
  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	a905      	add	r1, sp, #20
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff ffda 	bl	8001b90 <chEvtRegisterMaskWithFlags>
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001be0:	462a      	mov	r2, r5
 8001be2:	4669      	mov	r1, sp
 8001be4:	4620      	mov	r0, r4
 8001be6:	f7ff ffd3 	bl	8001b90 <chEvtRegisterMaskWithFlags>
 8001bea:	2320      	movs	r3, #32
 8001bec:	f383 8811 	msr	BASEPRI, r3
  return (bool)(esp != (event_source_t *)esp->next);
 8001bf0:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001bf2:	4924      	ldr	r1, [pc, #144]	; (8001c84 <rt_test_009_001_execute+0xc4>)
 8001bf4:	1b00      	subs	r0, r0, r4
 8001bf6:	bf18      	it	ne
 8001bf8:	2001      	movne	r0, #1
 8001bfa:	f7ff faf9 	bl	80011f0 <_test_assert>
 8001bfe:	b120      	cbz	r0, 8001c0a <rt_test_009_001_execute+0x4a>
 8001c00:	2300      	movs	r3, #0
 8001c02:	f383 8811 	msr	BASEPRI, r3
}
 8001c06:	b00b      	add	sp, #44	; 0x2c
 8001c08:	bd30      	pop	{r4, r5, pc}
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <rt_test_009_001_execute+0xc0>)
 8001c12:	2203      	movs	r2, #3
 8001c14:	601a      	str	r2, [r3, #0]
    chEvtUnregister(&es1, &el1);
 8001c16:	4c19      	ldr	r4, [pc, #100]	; (8001c7c <rt_test_009_001_execute+0xbc>)
 8001c18:	a905      	add	r1, sp, #20
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7ff ffa8 	bl	8001b70 <chEvtUnregister>
 8001c20:	2320      	movs	r3, #32
 8001c22:	f383 8811 	msr	BASEPRI, r3
 8001c26:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(chEvtIsListeningI(&es1), "no listener");
 8001c28:	4916      	ldr	r1, [pc, #88]	; (8001c84 <rt_test_009_001_execute+0xc4>)
 8001c2a:	1b00      	subs	r0, r0, r4
 8001c2c:	bf18      	it	ne
 8001c2e:	2001      	movne	r0, #1
 8001c30:	f7ff fade 	bl	80011f0 <_test_assert>
 8001c34:	b118      	cbz	r0, 8001c3e <rt_test_009_001_execute+0x7e>
 8001c36:	2300      	movs	r3, #0
 8001c38:	f383 8811 	msr	BASEPRI, r3
 8001c3c:	e7e3      	b.n	8001c06 <rt_test_009_001_execute+0x46>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <rt_test_009_001_execute+0xc0>)
 8001c46:	2204      	movs	r2, #4
 8001c48:	601a      	str	r2, [r3, #0]
    chEvtUnregister(&es1, &el2);
 8001c4a:	4c0c      	ldr	r4, [pc, #48]	; (8001c7c <rt_test_009_001_execute+0xbc>)
 8001c4c:	4669      	mov	r1, sp
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7ff ff8e 	bl	8001b70 <chEvtUnregister>
 8001c54:	2320      	movs	r3, #32
 8001c56:	f383 8811 	msr	BASEPRI, r3
 8001c5a:	6820      	ldr	r0, [r4, #0]
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8001c5c:	490a      	ldr	r1, [pc, #40]	; (8001c88 <rt_test_009_001_execute+0xc8>)
 8001c5e:	42a0      	cmp	r0, r4
 8001c60:	bf14      	ite	ne
 8001c62:	2000      	movne	r0, #0
 8001c64:	2001      	moveq	r0, #1
 8001c66:	f7ff fac3 	bl	80011f0 <_test_assert>
 8001c6a:	b918      	cbnz	r0, 8001c74 <rt_test_009_001_execute+0xb4>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f383 8811 	msr	BASEPRI, r3
  test_end_step(4);
 8001c72:	e7c8      	b.n	8001c06 <rt_test_009_001_execute+0x46>
 8001c74:	2300      	movs	r3, #0
 8001c76:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
 8001c7a:	e7c4      	b.n	8001c06 <rt_test_009_001_execute+0x46>
 8001c7c:	20000808 	.word	0x20000808
 8001c80:	20002454 	.word	0x20002454
 8001c84:	0800c22c 	.word	0x0800c22c
 8001c88:	0800c238 	.word	0x0800c238
 8001c8c:	00000000 	.word	0x00000000

08001c90 <chCondObjectInit>:
  tqp->next = (thread_t *)tqp;
 8001c90:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 8001c92:	6040      	str	r0, [r0, #4]
void chCondObjectInit(condition_variable_t *cp) {

  chDbgCheck(cp != NULL);

  queue_init(&cp->queue);
}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
	...

08001ca0 <chMtxTryLockS>:
bool chMtxTryLockS(mutex_t *mp) {

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  if (mp->owner != NULL) {
 8001ca0:	6883      	ldr	r3, [r0, #8]
 8001ca2:	b10b      	cbz	r3, 8001ca8 <chMtxTryLockS+0x8>
    if (mp->owner == currp) {
      mp->cnt++;
      return true;
    }
#endif
    return false;
 8001ca4:	2000      	movs	r0, #0
#endif
  mp->owner = currp;
  mp->next = currp->mtxlist;
  currp->mtxlist = mp;
  return true;
}
 8001ca6:	4770      	bx	lr
  mp->owner = currp;
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <chMtxTryLockS+0x1c>)
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	6082      	str	r2, [r0, #8]
  mp->next = currp->mtxlist;
 8001cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cb0:	60c2      	str	r2, [r0, #12]
  currp->mtxlist = mp;
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	6398      	str	r0, [r3, #56]	; 0x38
  return true;
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20001a18 	.word	0x20001a18

08001cc0 <chMtxTryLock>:
bool chMtxTryLock(mutex_t *mp) {
 8001cc0:	b508      	push	{r3, lr}
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	f383 8811 	msr	BASEPRI, r3
  b = chMtxTryLockS(mp);
 8001cc8:	f7ff ffea 	bl	8001ca0 <chMtxTryLockS>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f383 8811 	msr	BASEPRI, r3
}
 8001cd2:	bd08      	pop	{r3, pc}
	...

08001ce0 <chSemObjectInit>:
  tqp->next = (thread_t *)tqp;
 8001ce0:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 8001ce2:	6040      	str	r0, [r0, #4]
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  queue_init(&sp->queue);
  sp->cnt = n;
 8001ce4:	6081      	str	r1, [r0, #8]
}
 8001ce6:	4770      	bx	lr
	...

08001cf0 <rt_test_011_010_setup>:
static void rt_test_011_010_setup(void) {
 8001cf0:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 1);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	4801      	ldr	r0, [pc, #4]	; (8001cfc <rt_test_011_010_setup+0xc>)
 8001cf6:	f7ff fff3 	bl	8001ce0 <chSemObjectInit>
}
 8001cfa:	bd08      	pop	{r3, pc}
 8001cfc:	20001d2c 	.word	0x20001d2c

08001d00 <rt_test_011_007_setup>:
static void rt_test_011_007_setup(void) {
 8001d00:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 0);
 8001d02:	2100      	movs	r1, #0
 8001d04:	4801      	ldr	r0, [pc, #4]	; (8001d0c <rt_test_011_007_setup+0xc>)
 8001d06:	f7ff ffeb 	bl	8001ce0 <chSemObjectInit>
}
 8001d0a:	bd08      	pop	{r3, pc}
 8001d0c:	20001d2c 	.word	0x20001d2c

08001d10 <rt_test_006_005_setup>:
 *   specifying the same semaphore for the wait and signal phases. The
 *   counter value must be one on exit.
 * .
 */

static void rt_test_006_005_setup(void) {
 8001d10:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 0);
 8001d12:	2100      	movs	r1, #0
 8001d14:	4801      	ldr	r0, [pc, #4]	; (8001d1c <rt_test_006_005_setup+0xc>)
 8001d16:	f7ff ffe3 	bl	8001ce0 <chSemObjectInit>
}
 8001d1a:	bd08      	pop	{r3, pc}
 8001d1c:	20001d20 	.word	0x20001d20

08001d20 <rt_test_006_004_setup>:
static void rt_test_006_004_setup(void) {
 8001d20:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 0);
 8001d22:	2100      	movs	r1, #0
 8001d24:	4801      	ldr	r0, [pc, #4]	; (8001d2c <rt_test_006_004_setup+0xc>)
 8001d26:	f7ff ffdb 	bl	8001ce0 <chSemObjectInit>
}
 8001d2a:	bd08      	pop	{r3, pc}
 8001d2c:	20001d20 	.word	0x20001d20

08001d30 <rt_test_006_003_setup>:
static void rt_test_006_003_setup(void) {
 8001d30:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 0);
 8001d32:	2100      	movs	r1, #0
 8001d34:	4801      	ldr	r0, [pc, #4]	; (8001d3c <rt_test_006_003_setup+0xc>)
 8001d36:	f7ff ffd3 	bl	8001ce0 <chSemObjectInit>
}
 8001d3a:	bd08      	pop	{r3, pc}
 8001d3c:	20001d20 	.word	0x20001d20

08001d40 <rt_test_006_002_setup>:
static void rt_test_006_002_setup(void) {
 8001d40:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 0);
 8001d42:	2100      	movs	r1, #0
 8001d44:	4801      	ldr	r0, [pc, #4]	; (8001d4c <rt_test_006_002_setup+0xc>)
 8001d46:	f7ff ffcb 	bl	8001ce0 <chSemObjectInit>
}
 8001d4a:	bd08      	pop	{r3, pc}
 8001d4c:	20001d20 	.word	0x20001d20

08001d50 <rt_test_006_001_setup>:
static void rt_test_006_001_setup(void) {
 8001d50:	b508      	push	{r3, lr}
  chSemObjectInit(&sem1, 1);
 8001d52:	2101      	movs	r1, #1
 8001d54:	4801      	ldr	r0, [pc, #4]	; (8001d5c <rt_test_006_001_setup+0xc>)
 8001d56:	f7ff ffc3 	bl	8001ce0 <chSemObjectInit>
}
 8001d5a:	bd08      	pop	{r3, pc}
 8001d5c:	20001d20 	.word	0x20001d20

08001d60 <chCacheObjectInit>:
                       oc_writef_t writef) {
 8001d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d64:	4606      	mov	r6, r0
 8001d66:	4688      	mov	r8, r1
 8001d68:	4615      	mov	r5, r2
 8001d6a:	461f      	mov	r7, r3
 8001d6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001d70:	9c09      	ldr	r4, [sp, #36]	; 0x24
  chSemObjectInit(&ocp->cache_sem, (cnt_t)1);
 8001d72:	2101      	movs	r1, #1
 8001d74:	3024      	adds	r0, #36	; 0x24
 8001d76:	f7ff ffb3 	bl	8001ce0 <chSemObjectInit>
  chSemObjectInit(&ocp->lru_sem, (cnt_t)objn);
 8001d7a:	4639      	mov	r1, r7
 8001d7c:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8001d80:	f7ff ffae 	bl	8001ce0 <chSemObjectInit>
  ocp->hashn            = hashn;
 8001d84:	f8c6 8000 	str.w	r8, [r6]
  ocp->hashp            = hashp;
 8001d88:	6075      	str	r5, [r6, #4]
  ocp->objn             = objn;
 8001d8a:	60b7      	str	r7, [r6, #8]
  ocp->objvp            = objvp;
 8001d8c:	6134      	str	r4, [r6, #16]
  ocp->readf            = readf;
 8001d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d90:	63f3      	str	r3, [r6, #60]	; 0x3c
  ocp->writef           = writef;
 8001d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001d94:	6433      	str	r3, [r6, #64]	; 0x40
  ocp->lru.hash_next    = NULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	6173      	str	r3, [r6, #20]
  ocp->lru.hash_prev    = NULL;
 8001d9a:	61b3      	str	r3, [r6, #24]
  ocp->lru.lru_next     = (oc_object_t *)&ocp->lru;
 8001d9c:	f106 0814 	add.w	r8, r6, #20
 8001da0:	f8c6 801c 	str.w	r8, [r6, #28]
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 8001da4:	f8c6 8020 	str.w	r8, [r6, #32]
    hashp->hash_next = (oc_object_t *)hashp;
 8001da8:	602d      	str	r5, [r5, #0]
    hashp->hash_prev = (oc_object_t *)hashp;
 8001daa:	606d      	str	r5, [r5, #4]
    hashp++;
 8001dac:	3508      	adds	r5, #8
  } while (hashp < &ocp->hashp[ocp->hashn]);
 8001dae:	6872      	ldr	r2, [r6, #4]
 8001db0:	6833      	ldr	r3, [r6, #0]
 8001db2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001db6:	42aa      	cmp	r2, r5
 8001db8:	d8f6      	bhi.n	8001da8 <chCacheObjectInit+0x48>
    chSemObjectInit(&objp->obj_sem, (cnt_t)1);
 8001dba:	2101      	movs	r1, #1
 8001dbc:	f104 0018 	add.w	r0, r4, #24
 8001dc0:	f7ff ff8e 	bl	8001ce0 <chSemObjectInit>
    LRU_INSERT_HEAD(ocp, objp);
 8001dc4:	69f3      	ldr	r3, [r6, #28]
 8001dc6:	60a3      	str	r3, [r4, #8]
 8001dc8:	f8c4 800c 	str.w	r8, [r4, #12]
 8001dcc:	69f3      	ldr	r3, [r6, #28]
 8001dce:	60dc      	str	r4, [r3, #12]
 8001dd0:	61f4      	str	r4, [r6, #28]
    objp->obj_group = 0U;
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	6122      	str	r2, [r4, #16]
    objp->obj_key   = 0U;
 8001dd6:	6162      	str	r2, [r4, #20]
    objp->obj_flags = OC_FLAG_INLRU;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	6263      	str	r3, [r4, #36]	; 0x24
    objp->dptr      = NULL;
 8001ddc:	62a2      	str	r2, [r4, #40]	; 0x28
    objvp = (void *)((uint8_t *)objvp + objsz);
 8001dde:	444c      	add	r4, r9
  } while (objn > (ucnt_t)0);
 8001de0:	3f01      	subs	r7, #1
 8001de2:	d1ea      	bne.n	8001dba <chCacheObjectInit+0x5a>
}
 8001de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001df0 <chGuardedPoolObjectInitAligned>:
 *
 * @init
 */
void chGuardedPoolObjectInitAligned(guarded_memory_pool_t *gmp,
                                    size_t size,
                                    unsigned align) {
 8001df0:	b510      	push	{r4, lr}
 8001df2:	4604      	mov	r4, r0

  chPoolObjectInitAligned(&gmp->pool, size, align, NULL);
 8001df4:	2300      	movs	r3, #0
 8001df6:	300c      	adds	r0, #12
 8001df8:	f7ff fd02 	bl	8001800 <chPoolObjectInitAligned>
  chSemObjectInit(&gmp->sem, (cnt_t)0);
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff ff6e 	bl	8001ce0 <chSemObjectInit>
}
 8001e04:	bd10      	pop	{r4, pc}
 8001e06:	bf00      	nop
	...

08001e10 <oslib_test_007_003_setup>:
 * - [7.3.1] Trying to allocate with 100mS timeout, must fail because
 *   the pool is empty.
 * .
 */

static void oslib_test_007_003_setup(void) {
 8001e10:	b508      	push	{r3, lr}
 * @init
 */
static inline void chGuardedPoolObjectInit(guarded_memory_pool_t *gmp,
                                           size_t size) {

  chGuardedPoolObjectInitAligned(gmp, size, PORT_NATURAL_ALIGN);
 8001e12:	2204      	movs	r2, #4
 8001e14:	4611      	mov	r1, r2
 8001e16:	4802      	ldr	r0, [pc, #8]	; (8001e20 <oslib_test_007_003_setup+0x10>)
 8001e18:	f7ff ffea 	bl	8001df0 <chGuardedPoolObjectInitAligned>
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8001e1c:	bd08      	pop	{r3, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000810 	.word	0x20000810
	...

08001e30 <oslib_test_007_002_setup>:
static void oslib_test_007_002_setup(void) {
 8001e30:	b508      	push	{r3, lr}
 8001e32:	2204      	movs	r2, #4
 8001e34:	4611      	mov	r1, r2
 8001e36:	4802      	ldr	r0, [pc, #8]	; (8001e40 <oslib_test_007_002_setup+0x10>)
 8001e38:	f7ff ffda 	bl	8001df0 <chGuardedPoolObjectInitAligned>
}
 8001e3c:	bd08      	pop	{r3, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000810 	.word	0x20000810
	...

08001e50 <chRegFirstThread>:
 8001e50:	2320      	movs	r3, #32
 8001e52:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <chRegFirstThread+0x1c>)
 8001e58:	6918      	ldr	r0, [r3, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8001e5a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8001e64:	2300      	movs	r3, #0
 8001e66:	f383 8811 	msr	BASEPRI, r3
#endif
  chSysUnlock();

  return tp;
}
 8001e6a:	4770      	bx	lr
 8001e6c:	20001a18 	.word	0x20001a18

08001e70 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8001e70:	b430      	push	{r4, r5}
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <chTMStopMeasurementX+0x3c>)
 8001e74:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <chTMStopMeasurementX+0x40>)
 8001e78:	6f51      	ldr	r1, [r2, #116]	; 0x74
  tmp->n++;
 8001e7a:	68c2      	ldr	r2, [r0, #12]
 8001e7c:	3201      	adds	r2, #1
 8001e7e:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8001e80:	6882      	ldr	r2, [r0, #8]
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	1a5b      	subs	r3, r3, r1
 8001e86:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8001e88:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8001e8c:	18e4      	adds	r4, r4, r3
 8001e8e:	f145 0500 	adc.w	r5, r5, #0
 8001e92:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
 8001e96:	6842      	ldr	r2, [r0, #4]
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d900      	bls.n	8001e9e <chTMStopMeasurementX+0x2e>
    tmp->worst = tmp->last;
 8001e9c:	6043      	str	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8001e9e:	6802      	ldr	r2, [r0, #0]
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d200      	bcs.n	8001ea6 <chTMStopMeasurementX+0x36>
    tmp->best = tmp->last;
 8001ea4:	6003      	str	r3, [r0, #0]
}
 8001ea6:	bc30      	pop	{r4, r5}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e0001000 	.word	0xe0001000
 8001eb0:	20001a18 	.word	0x20001a18
	...

08001ec0 <chTMStartMeasurementX>:
 8001ec0:	4b01      	ldr	r3, [pc, #4]	; (8001ec8 <chTMStartMeasurementX+0x8>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8001ec4:	6083      	str	r3, [r0, #8]
}
 8001ec6:	4770      	bx	lr
 8001ec8:	e0001000 	.word	0xe0001000
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <chTMObjectInit>:
  tmp->best       = (rtcnt_t)-1;
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed4:	6003      	str	r3, [r0, #0]
  tmp->worst      = (rtcnt_t)0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	6043      	str	r3, [r0, #4]
  tmp->last       = (rtcnt_t)0;
 8001eda:	6083      	str	r3, [r0, #8]
  tmp->n          = (ucnt_t)0;
 8001edc:	60c3      	str	r3, [r0, #12]
  tmp->cumulative = (rttime_t)0;
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
 8001ee6:	4770      	bx	lr
	...

08001ef0 <chThdTerminate>:
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdTerminate(thread_t *tp) {

  chSysLock();
  tp->flags |= CH_FLAG_TERMINATE;
 8001ef6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8001f02:	2300      	movs	r3, #0
 8001f04:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	0000      	movs	r0, r0
	...

08001f10 <test_terminate_threads>:
                         test_buffer + (WA_SIZE * 4)};

/*
 * Sets a termination request in all the test-spawned threads.
 */
void test_terminate_threads(void) {
 8001f10:	b510      	push	{r4, lr}
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
 8001f12:	2400      	movs	r4, #0
 8001f14:	e000      	b.n	8001f18 <test_terminate_threads+0x8>
 8001f16:	3401      	adds	r4, #1
 8001f18:	2c04      	cmp	r4, #4
 8001f1a:	d807      	bhi.n	8001f2c <test_terminate_threads+0x1c>
    if (threads[i])
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <test_terminate_threads+0x20>)
 8001f1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d0f7      	beq.n	8001f16 <test_terminate_threads+0x6>
      chThdTerminate(threads[i]);
 8001f26:	f7ff ffe3 	bl	8001ef0 <chThdTerminate>
 8001f2a:	e7f4      	b.n	8001f16 <test_terminate_threads+0x6>
}
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000246c 	.word	0x2000246c
	...

08001f40 <cmdexec>:
                      char *name, int argc, char *argv[]) {
 8001f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f42:	4604      	mov	r4, r0
 8001f44:	460f      	mov	r7, r1
 8001f46:	4615      	mov	r5, r2
 8001f48:	461e      	mov	r6, r3
  while (scp->sc_name != NULL) {
 8001f4a:	6820      	ldr	r0, [r4, #0]
 8001f4c:	b160      	cbz	r0, 8001f68 <cmdexec+0x28>
    if (strcmp(scp->sc_name, name) == 0) {
 8001f4e:	4629      	mov	r1, r5
 8001f50:	f7fe fa6a 	bl	8000428 <strcmp>
 8001f54:	b108      	cbz	r0, 8001f5a <cmdexec+0x1a>
    scp++;
 8001f56:	3408      	adds	r4, #8
 8001f58:	e7f7      	b.n	8001f4a <cmdexec+0xa>
      scp->sc_function(chp, argc, argv);
 8001f5a:	6863      	ldr	r3, [r4, #4]
 8001f5c:	9a06      	ldr	r2, [sp, #24]
 8001f5e:	4631      	mov	r1, r6
 8001f60:	4638      	mov	r0, r7
 8001f62:	4798      	blx	r3
      return false;
 8001f64:	2000      	movs	r0, #0
 8001f66:	e000      	b.n	8001f6a <cmdexec+0x2a>
  return true;
 8001f68:	2001      	movs	r0, #1
}
 8001f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f6c:	0000      	movs	r0, r0
	...

08001f70 <chThdSetPriority>:
tprio_t chThdSetPriority(tprio_t newprio) {
 8001f70:	b510      	push	{r4, lr}
 8001f72:	2320      	movs	r3, #32
 8001f74:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <chThdSetPriority+0x30>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	42a2      	cmp	r2, r4
 8001f82:	d001      	beq.n	8001f88 <chThdSetPriority+0x18>
 8001f84:	4282      	cmp	r2, r0
 8001f86:	d200      	bcs.n	8001f8a <chThdSetPriority+0x1a>
    currp->prio = newprio;
 8001f88:	6098      	str	r0, [r3, #8]
  currp->realprio = newprio;
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <chThdSetPriority+0x30>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	63d8      	str	r0, [r3, #60]	; 0x3c
  chSchRescheduleS();
 8001f90:	f008 fafe 	bl	800a590 <chSchRescheduleS>
 8001f94:	2300      	movs	r3, #0
 8001f96:	f383 8811 	msr	BASEPRI, r3
}
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	bd10      	pop	{r4, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20001a18 	.word	0x20001a18
	...

08001fb0 <rt_test_004_004_execute>:
 * - [4.4.3] Raising thread priority above the boosted level.
 * - [4.4.4] Restoring original conditions.
 * .
 */

static void rt_test_004_004_execute(void) {
 8001fb0:	b570      	push	{r4, r5, r6, lr}
  tprio_t prio, p1;

  /* [4.4.1] Simulating a priority boost situation (prio > realprio).*/
  test_set_step(1);
 8001fb2:	4b39      	ldr	r3, [pc, #228]	; (8002098 <rt_test_004_004_execute+0xe8>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001fb8:	4b38      	ldr	r3, [pc, #224]	; (800209c <rt_test_004_004_execute+0xec>)
 8001fba:	699a      	ldr	r2, [r3, #24]
 *
 * @xclass
 */
static inline tprio_t chThdGetPriorityX(void) {

  return chThdGetSelfX()->prio;
 8001fbc:	6895      	ldr	r5, [r2, #8]
  {
    prio = chThdGetPriorityX();
    chThdGetSelfX()->prio += 2;
 8001fbe:	1cac      	adds	r4, r5, #2
 8001fc0:	6094      	str	r4, [r2, #8]
  return ch.rlist.current;
 8001fc2:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8001fc4:	6898      	ldr	r0, [r3, #8]
    test_assert(chThdGetPriorityX() == prio + 2, "unexpected priority level");
 8001fc6:	4936      	ldr	r1, [pc, #216]	; (80020a0 <rt_test_004_004_execute+0xf0>)
 8001fc8:	4284      	cmp	r4, r0
 8001fca:	bf14      	ite	ne
 8001fcc:	2000      	movne	r0, #0
 8001fce:	2001      	moveq	r0, #1
 8001fd0:	f7ff f90e 	bl	80011f0 <_test_assert>
 8001fd4:	b100      	cbz	r0, 8001fd8 <rt_test_004_004_execute+0x28>
    chThdGetSelfX()->prio = prio;
    chThdGetSelfX()->realprio = prio;
    chSysUnlock();
  }
  test_end_step(4);
}
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
  test_set_step(2);
 8001fd8:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <rt_test_004_004_execute+0xe8>)
 8001fda:	2202      	movs	r2, #2
 8001fdc:	601a      	str	r2, [r3, #0]
    p1 = chThdSetPriority(prio + 1);
 8001fde:	1c6e      	adds	r6, r5, #1
 8001fe0:	4630      	mov	r0, r6
 8001fe2:	f7ff ffc5 	bl	8001f70 <chThdSetPriority>
    test_assert(p1 == prio, "unexpected returned priority level");
 8001fe6:	492f      	ldr	r1, [pc, #188]	; (80020a4 <rt_test_004_004_execute+0xf4>)
 8001fe8:	42a8      	cmp	r0, r5
 8001fea:	bf14      	ite	ne
 8001fec:	2000      	movne	r0, #0
 8001fee:	2001      	moveq	r0, #1
 8001ff0:	f7ff f8fe 	bl	80011f0 <_test_assert>
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	d1ee      	bne.n	8001fd6 <rt_test_004_004_execute+0x26>
  return ch.rlist.current;
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <rt_test_004_004_execute+0xec>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
    test_assert(chThdGetSelfX()->prio == prio + 2, "unexpected priority level");
 8001ffc:	6898      	ldr	r0, [r3, #8]
 8001ffe:	4928      	ldr	r1, [pc, #160]	; (80020a0 <rt_test_004_004_execute+0xf0>)
 8002000:	42a0      	cmp	r0, r4
 8002002:	bf14      	ite	ne
 8002004:	2000      	movne	r0, #0
 8002006:	2001      	moveq	r0, #1
 8002008:	f7ff f8f2 	bl	80011f0 <_test_assert>
 800200c:	2800      	cmp	r0, #0
 800200e:	d1e2      	bne.n	8001fd6 <rt_test_004_004_execute+0x26>
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <rt_test_004_004_execute+0xec>)
 8002012:	699b      	ldr	r3, [r3, #24]
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8002014:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002016:	4924      	ldr	r1, [pc, #144]	; (80020a8 <rt_test_004_004_execute+0xf8>)
 8002018:	42b0      	cmp	r0, r6
 800201a:	bf14      	ite	ne
 800201c:	2000      	movne	r0, #0
 800201e:	2001      	moveq	r0, #1
 8002020:	f7ff f8e6 	bl	80011f0 <_test_assert>
 8002024:	2800      	cmp	r0, #0
 8002026:	d1d6      	bne.n	8001fd6 <rt_test_004_004_execute+0x26>
  test_set_step(3);
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <rt_test_004_004_execute+0xe8>)
 800202a:	2203      	movs	r2, #3
 800202c:	601a      	str	r2, [r3, #0]
    p1 = chThdSetPriority(prio + 3);
 800202e:	18ac      	adds	r4, r5, r2
 8002030:	4620      	mov	r0, r4
 8002032:	f7ff ff9d 	bl	8001f70 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8002036:	491b      	ldr	r1, [pc, #108]	; (80020a4 <rt_test_004_004_execute+0xf4>)
 8002038:	4286      	cmp	r6, r0
 800203a:	bf14      	ite	ne
 800203c:	2000      	movne	r0, #0
 800203e:	2001      	moveq	r0, #1
 8002040:	f7ff f8d6 	bl	80011f0 <_test_assert>
 8002044:	2800      	cmp	r0, #0
 8002046:	d1c6      	bne.n	8001fd6 <rt_test_004_004_execute+0x26>
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <rt_test_004_004_execute+0xec>)
 800204a:	699b      	ldr	r3, [r3, #24]
    test_assert(chThdGetSelfX()->prio == prio + 3, "unexpected priority level");
 800204c:	6898      	ldr	r0, [r3, #8]
 800204e:	4914      	ldr	r1, [pc, #80]	; (80020a0 <rt_test_004_004_execute+0xf0>)
 8002050:	42a0      	cmp	r0, r4
 8002052:	bf14      	ite	ne
 8002054:	2000      	movne	r0, #0
 8002056:	2001      	moveq	r0, #1
 8002058:	f7ff f8ca 	bl	80011f0 <_test_assert>
 800205c:	2800      	cmp	r0, #0
 800205e:	d1ba      	bne.n	8001fd6 <rt_test_004_004_execute+0x26>
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <rt_test_004_004_execute+0xec>)
 8002062:	699b      	ldr	r3, [r3, #24]
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8002064:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002066:	4911      	ldr	r1, [pc, #68]	; (80020ac <rt_test_004_004_execute+0xfc>)
 8002068:	42a0      	cmp	r0, r4
 800206a:	bf14      	ite	ne
 800206c:	2000      	movne	r0, #0
 800206e:	2001      	moveq	r0, #1
 8002070:	f7ff f8be 	bl	80011f0 <_test_assert>
 8002074:	2800      	cmp	r0, #0
 8002076:	d1ae      	bne.n	8001fd6 <rt_test_004_004_execute+0x26>
  test_set_step(4);
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <rt_test_004_004_execute+0xe8>)
 800207a:	2204      	movs	r2, #4
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	2320      	movs	r3, #32
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <rt_test_004_004_execute+0xec>)
 8002086:	699a      	ldr	r2, [r3, #24]
    chThdGetSelfX()->prio = prio;
 8002088:	6095      	str	r5, [r2, #8]
 800208a:	699b      	ldr	r3, [r3, #24]
    chThdGetSelfX()->realprio = prio;
 800208c:	63dd      	str	r5, [r3, #60]	; 0x3c
 800208e:	2300      	movs	r3, #0
 8002090:	f383 8811 	msr	BASEPRI, r3
  test_end_step(4);
 8002094:	e79f      	b.n	8001fd6 <rt_test_004_004_execute+0x26>
 8002096:	bf00      	nop
 8002098:	20002454 	.word	0x20002454
 800209c:	20001a18 	.word	0x20001a18
 80020a0:	0800c248 	.word	0x0800c248
 80020a4:	0800c264 	.word	0x0800c264
 80020a8:	0800c288 	.word	0x0800c288
 80020ac:	0800c2b0 	.word	0x0800c2b0

080020b0 <rt_test_004_003_execute>:
static void rt_test_004_003_execute(void) {
 80020b0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <rt_test_004_003_execute+0x78>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <rt_test_004_003_execute+0x7c>)
 80020ba:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80020bc:	689d      	ldr	r5, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 80020be:	18ae      	adds	r6, r5, r2
 80020c0:	4630      	mov	r0, r6
 80020c2:	f7ff ff55 	bl	8001f70 <chThdSetPriority>
 80020c6:	4604      	mov	r4, r0
    test_assert(p1 == prio, "unexpected returned priority level");
 80020c8:	4919      	ldr	r1, [pc, #100]	; (8002130 <rt_test_004_003_execute+0x80>)
 80020ca:	42a8      	cmp	r0, r5
 80020cc:	bf14      	ite	ne
 80020ce:	2000      	movne	r0, #0
 80020d0:	2001      	moveq	r0, #1
 80020d2:	f7ff f88d 	bl	80011f0 <_test_assert>
 80020d6:	b100      	cbz	r0, 80020da <rt_test_004_003_execute+0x2a>
}
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
  return ch.rlist.current;
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <rt_test_004_003_execute+0x7c>)
 80020dc:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80020de:	6898      	ldr	r0, [r3, #8]
    test_assert(chThdGetPriorityX() == prio + 1, "unexpected priority level");
 80020e0:	4914      	ldr	r1, [pc, #80]	; (8002134 <rt_test_004_003_execute+0x84>)
 80020e2:	4286      	cmp	r6, r0
 80020e4:	bf14      	ite	ne
 80020e6:	2000      	movne	r0, #0
 80020e8:	2001      	moveq	r0, #1
 80020ea:	f7ff f881 	bl	80011f0 <_test_assert>
 80020ee:	2800      	cmp	r0, #0
 80020f0:	d1f2      	bne.n	80020d8 <rt_test_004_003_execute+0x28>
  test_set_step(2);
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <rt_test_004_003_execute+0x78>)
 80020f4:	2202      	movs	r2, #2
 80020f6:	601a      	str	r2, [r3, #0]
    p1 = chThdSetPriority(p1);
 80020f8:	4620      	mov	r0, r4
 80020fa:	f7ff ff39 	bl	8001f70 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 80020fe:	490c      	ldr	r1, [pc, #48]	; (8002130 <rt_test_004_003_execute+0x80>)
 8002100:	4286      	cmp	r6, r0
 8002102:	bf14      	ite	ne
 8002104:	2000      	movne	r0, #0
 8002106:	2001      	moveq	r0, #1
 8002108:	f7ff f872 	bl	80011f0 <_test_assert>
 800210c:	2800      	cmp	r0, #0
 800210e:	d1e3      	bne.n	80020d8 <rt_test_004_003_execute+0x28>
  return ch.rlist.current;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <rt_test_004_003_execute+0x7c>)
 8002112:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8002114:	6898      	ldr	r0, [r3, #8]
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8002116:	4907      	ldr	r1, [pc, #28]	; (8002134 <rt_test_004_003_execute+0x84>)
 8002118:	4285      	cmp	r5, r0
 800211a:	bf14      	ite	ne
 800211c:	2000      	movne	r0, #0
 800211e:	2001      	moveq	r0, #1
 8002120:	f7ff f866 	bl	80011f0 <_test_assert>
  test_end_step(2);
 8002124:	e7d8      	b.n	80020d8 <rt_test_004_003_execute+0x28>
 8002126:	bf00      	nop
 8002128:	20002454 	.word	0x20002454
 800212c:	20001a18 	.word	0x20001a18
 8002130:	0800c264 	.word	0x0800c264
 8002134:	0800c248 	.word	0x0800c248
	...

08002140 <rt_test_003_001_execute>:
static void rt_test_003_001_execute(void) {
 8002140:	b510      	push	{r4, lr}
  test_set_step(1);
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <rt_test_003_001_execute+0x18>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
  extern systime_t stGetCounter(void);

  return stGetCounter();
 8002148:	f008 fed2 	bl	800aef0 <stGetCounter>
 800214c:	4604      	mov	r4, r0
 800214e:	f008 fecf 	bl	800aef0 <stGetCounter>
    while (time == chVTGetSystemTimeX()) {
 8002152:	4284      	cmp	r4, r0
 8002154:	d0fb      	beq.n	800214e <rt_test_003_001_execute+0xe>
}
 8002156:	bd10      	pop	{r4, pc}
 8002158:	20002454 	.word	0x20002454
 800215c:	00000000 	.word	0x00000000

08002160 <_test_assert_time_window>:
                              const char *msg) {
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	4605      	mov	r5, r0
 8002164:	460c      	mov	r4, r1
 8002166:	4616      	mov	r6, r2
 8002168:	f008 fec2 	bl	800aef0 <stGetCounter>
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 800216c:	1b40      	subs	r0, r0, r5
                (systime_t)((systime_t)end - (systime_t)start));
 800216e:	1b64      	subs	r4, r4, r5
  return _test_assert(osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end),
 8002170:	4631      	mov	r1, r6
 8002172:	42a0      	cmp	r0, r4
 8002174:	bf2c      	ite	cs
 8002176:	2000      	movcs	r0, #0
 8002178:	2001      	movcc	r0, #1
 800217a:	f7ff f839 	bl	80011f0 <_test_assert>
}
 800217e:	bd70      	pop	{r4, r5, r6, pc}

08002180 <chMsgRelease>:
 * @param[in] tp        pointer to the thread
 * @param[in] msg       message to be returned to the sender
 *
 * @api
 */
void chMsgRelease(thread_t *tp, msg_t msg) {
 8002180:	b508      	push	{r3, lr}
 8002182:	2320      	movs	r3, #32
 8002184:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8002188:	f008 fa5a 	bl	800a640 <chSchWakeupS>
 800218c:	2300      	movs	r3, #0
 800218e:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
  chMsgReleaseS(tp, msg);
  chSysUnlock();
}
 8002192:	bd08      	pop	{r3, pc}
	...

080021a0 <chCondSignal>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @api
 */
void chCondSignal(condition_variable_t *cp) {
 80021a0:	b508      	push	{r3, lr}
 80021a2:	4603      	mov	r3, r0
 80021a4:	2220      	movs	r2, #32
 80021a6:	f382 8811 	msr	BASEPRI, r2
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 80021aa:	6800      	ldr	r0, [r0, #0]

  chDbgCheck(cp != NULL);

  chSysLock();
  if (queue_notempty(&cp->queue)) {
 80021ac:	4283      	cmp	r3, r0
 80021ae:	d005      	beq.n	80021bc <chCondSignal+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80021b0:	6802      	ldr	r2, [r0, #0]
 80021b2:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80021b4:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&cp->queue), MSG_OK);
 80021b6:	2100      	movs	r1, #0
 80021b8:	f008 fa42 	bl	800a640 <chSchWakeupS>
 80021bc:	2300      	movs	r3, #0
 80021be:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();
}
 80021c2:	bd08      	pop	{r3, pc}
	...

080021d0 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 80021d0:	b508      	push	{r3, lr}
 80021d2:	2220      	movs	r2, #32
 80021d4:	f382 8811 	msr	BASEPRI, r2

  chSysLock();
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
              "inconsistent semaphore");
  if (++sp->cnt <= (cnt_t)0) {
 80021d8:	6882      	ldr	r2, [r0, #8]
 80021da:	3201      	adds	r2, #1
 80021dc:	6082      	str	r2, [r0, #8]
 80021de:	2a00      	cmp	r2, #0
 80021e0:	dd03      	ble.n	80021ea <chSemSignal+0x1a>
 80021e2:	2300      	movs	r3, #0
 80021e4:	f383 8811 	msr	BASEPRI, r3
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
  }
  chSysUnlock();
}
 80021e8:	bd08      	pop	{r3, pc}
 80021ea:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 80021ec:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 80021ee:	6802      	ldr	r2, [r0, #0]
 80021f0:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80021f2:	6053      	str	r3, [r2, #4]
    chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 80021f4:	2100      	movs	r1, #0
 80021f6:	f008 fa23 	bl	800a640 <chSchWakeupS>
 80021fa:	e7f2      	b.n	80021e2 <chSemSignal+0x12>
 80021fc:	0000      	movs	r0, r0
	...

08002200 <chThdResumeS>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 8002200:	b508      	push	{r3, lr}
 8002202:	4603      	mov	r3, r0

  if (*trp != NULL) {
 8002204:	6800      	ldr	r0, [r0, #0]
 8002206:	b118      	cbz	r0, 8002210 <chThdResumeS+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
    chSchWakeupS(tp, msg);
 800220c:	f008 fa18 	bl	800a640 <chSchWakeupS>
  }
}
 8002210:	bd08      	pop	{r3, pc}
 8002212:	bf00      	nop
	...

08002220 <chThdResume>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @api
 */
void chThdResume(thread_reference_t *trp, msg_t msg) {
 8002220:	b508      	push	{r3, lr}
 8002222:	2320      	movs	r3, #32
 8002224:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdResumeS(trp, msg);
 8002228:	f7ff ffea 	bl	8002200 <chThdResumeS>
 800222c:	2300      	movs	r3, #0
 800222e:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8002232:	bd08      	pop	{r3, pc}
	...

08002240 <bmk_thread4>:
static THD_FUNCTION(bmk_thread4, p) {
 8002240:	b510      	push	{r4, lr}
  return ch.rlist.current;
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <bmk_thread4+0x20>)
 8002244:	699c      	ldr	r4, [r3, #24]
 8002246:	2320      	movs	r3, #32
 8002248:	f383 8811 	msr	BASEPRI, r3
    chSchGoSleepS(CH_STATE_SUSPENDED);
 800224c:	2003      	movs	r0, #3
 800224e:	f008 f9af 	bl	800a5b0 <chSchGoSleepS>
    msg = self->u.rdymsg;
 8002252:	6a63      	ldr	r3, [r4, #36]	; 0x24
  } while (msg == MSG_OK);
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f9      	beq.n	800224c <bmk_thread4+0xc>
 8002258:	2300      	movs	r3, #0
 800225a:	f383 8811 	msr	BASEPRI, r3
}
 800225e:	bd10      	pop	{r4, pc}
 8002260:	20001a18 	.word	0x20001a18
	...

08002270 <chMsgWaitS>:
thread_t *chMsgWaitS(void) {
 8002270:	b508      	push	{r3, lr}
  return (bool)(tp->msgqueue.next != (thread_t *)&tp->msgqueue);
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <chMsgWaitS+0x30>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f853 2f2c 	ldr.w	r2, [r3, #44]!
  if (!chMsgIsPendingI(currp)) {
 800227a:	429a      	cmp	r2, r3
 800227c:	d00b      	beq.n	8002296 <chMsgWaitS+0x26>
  tp = queue_fifo_remove(&currp->msgqueue);
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <chMsgWaitS+0x30>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  thread_t *tp = tqp->next;
 8002286:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tqp->next             = tp->queue.next;
 8002288:	6802      	ldr	r2, [r0, #0]
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
  tqp->next->queue.prev = (thread_t *)tqp;
 800228c:	6051      	str	r1, [r2, #4]
  tp->state = CH_STATE_SNDMSG;
 800228e:	230d      	movs	r3, #13
 8002290:	f880 3020 	strb.w	r3, [r0, #32]
}
 8002294:	bd08      	pop	{r3, pc}
    chSchGoSleepS(CH_STATE_WTMSG);
 8002296:	200e      	movs	r0, #14
 8002298:	f008 f98a 	bl	800a5b0 <chSchGoSleepS>
 800229c:	e7ef      	b.n	800227e <chMsgWaitS+0xe>
 800229e:	bf00      	nop
 80022a0:	20001a18 	.word	0x20001a18
	...

080022b0 <bmk_thread1>:
static THD_FUNCTION(bmk_thread1, p) {
 80022b0:	b510      	push	{r4, lr}
 80022b2:	2320      	movs	r3, #32
 80022b4:	f383 8811 	msr	BASEPRI, r3
  tp = chMsgWaitS();
 80022b8:	f7ff ffda 	bl	8002270 <chMsgWaitS>
 80022bc:	2200      	movs	r2, #0
 80022be:	f382 8811 	msr	BASEPRI, r2
  return tp->u.sentmsg;
 80022c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    chMsgRelease(tp, msg);
 80022c4:	4621      	mov	r1, r4
 80022c6:	f7ff ff5b 	bl	8002180 <chMsgRelease>
  } while (msg);
 80022ca:	2c00      	cmp	r4, #0
 80022cc:	d1f1      	bne.n	80022b2 <bmk_thread1+0x2>
}
 80022ce:	bd10      	pop	{r4, pc}

080022d0 <chDelegateDispatch>:
 *          are sending messages then the requests are served in priority
 *          order.
 *
 * @api
 */
void chDelegateDispatch(void) {
 80022d0:	b510      	push	{r4, lr}
 80022d2:	2320      	movs	r3, #32
 80022d4:	f383 8811 	msr	BASEPRI, r3
  tp = chMsgWaitS();
 80022d8:	f7ff ffca 	bl	8002270 <chMsgWaitS>
 80022dc:	4604      	mov	r4, r0
 80022de:	2300      	movs	r3, #0
 80022e0:	f383 8811 	msr	BASEPRI, r3
  return tp->u.sentmsg;
 80022e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
  cmp = (const call_message_t *)chMsgGet(tp);
  ret = cmp->veneer(cmp->argsp);
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	6858      	ldr	r0, [r3, #4]
 80022ea:	4790      	blx	r2
 80022ec:	4601      	mov	r1, r0

  chMsgRelease(tp, ret);
 80022ee:	4620      	mov	r0, r4
 80022f0:	f7ff ff46 	bl	8002180 <chMsgRelease>
}
 80022f4:	bd10      	pop	{r4, pc}
 80022f6:	bf00      	nop
	...

08002300 <chEvtWaitAll>:
 *                      for, @p ALL_EVENTS requires all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAll(eventmask_t events) {
 8002300:	b538      	push	{r3, r4, r5, lr}
 8002302:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <chEvtWaitAll+0x34>)
 8002306:	699d      	ldr	r5, [r3, #24]
 8002308:	2320      	movs	r3, #32
 800230a:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 800230e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002310:	ea30 0303 	bics.w	r3, r0, r3
 8002314:	d108      	bne.n	8002328 <chEvtWaitAll+0x28>
    ctp->u.ewmask = events;
    chSchGoSleepS(CH_STATE_WTANDEVT);
  }
  ctp->epending &= ~events;
 8002316:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002318:	ea23 0304 	bic.w	r3, r3, r4
 800231c:	636b      	str	r3, [r5, #52]	; 0x34
 800231e:	2300      	movs	r3, #0
 8002320:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
}
 8002324:	4620      	mov	r0, r4
 8002326:	bd38      	pop	{r3, r4, r5, pc}
    ctp->u.ewmask = events;
 8002328:	6268      	str	r0, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 800232a:	200b      	movs	r0, #11
 800232c:	f008 f940 	bl	800a5b0 <chSchGoSleepS>
 8002330:	e7f1      	b.n	8002316 <chEvtWaitAll+0x16>
 8002332:	bf00      	nop
 8002334:	20001a18 	.word	0x20001a18
	...

08002340 <chEvtWaitAny>:
eventmask_t chEvtWaitAny(eventmask_t events) {
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <chEvtWaitAny+0x34>)
 8002346:	699d      	ldr	r5, [r3, #24]
 8002348:	2320      	movs	r3, #32
 800234a:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800234e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 8002350:	4018      	ands	r0, r3
 8002352:	d007      	beq.n	8002364 <chEvtWaitAny+0x24>
  ctp->epending &= ~m;
 8002354:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002356:	ea23 0300 	bic.w	r3, r3, r0
 800235a:	636b      	str	r3, [r5, #52]	; 0x34
 800235c:	2300      	movs	r3, #0
 800235e:	f383 8811 	msr	BASEPRI, r3
}
 8002362:	bd38      	pop	{r3, r4, r5, pc}
    ctp->u.ewmask = events;
 8002364:	626c      	str	r4, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8002366:	200a      	movs	r0, #10
 8002368:	f008 f922 	bl	800a5b0 <chSchGoSleepS>
    m = ctp->epending & events;
 800236c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800236e:	ea03 0004 	and.w	r0, r3, r4
 8002372:	e7ef      	b.n	8002354 <chEvtWaitAny+0x14>
 8002374:	20001a18 	.word	0x20001a18
	...

08002380 <chEvtWaitOne>:
eventmask_t chEvtWaitOne(eventmask_t events) {
 8002380:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <chEvtWaitOne+0x38>)
 8002384:	699d      	ldr	r5, [r3, #24]
 8002386:	2320      	movs	r3, #32
 8002388:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800238c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800238e:	4003      	ands	r3, r0
 8002390:	d009      	beq.n	80023a6 <chEvtWaitOne+0x26>
  m ^= m & (m - (eventmask_t)1);
 8002392:	4258      	negs	r0, r3
 8002394:	4018      	ands	r0, r3
  ctp->epending &= ~m;
 8002396:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002398:	ea23 0300 	bic.w	r3, r3, r0
 800239c:	636b      	str	r3, [r5, #52]	; 0x34
 800239e:	2300      	movs	r3, #0
 80023a0:	f383 8811 	msr	BASEPRI, r3
}
 80023a4:	bd38      	pop	{r3, r4, r5, pc}
 80023a6:	4604      	mov	r4, r0
    ctp->u.ewmask = events;
 80023a8:	6268      	str	r0, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80023aa:	200a      	movs	r0, #10
 80023ac:	f008 f900 	bl	800a5b0 <chSchGoSleepS>
    m = ctp->epending & events;
 80023b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80023b2:	4023      	ands	r3, r4
 80023b4:	e7ed      	b.n	8002392 <chEvtWaitOne+0x12>
 80023b6:	bf00      	nop
 80023b8:	20001a18 	.word	0x20001a18
 80023bc:	00000000 	.word	0x00000000

080023c0 <chSemWaitS>:
  if (--sp->cnt < (cnt_t)0) {
 80023c0:	6883      	ldr	r3, [r0, #8]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6083      	str	r3, [r0, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db01      	blt.n	80023ce <chSemWaitS+0xe>
  return MSG_OK;
 80023ca:	2000      	movs	r0, #0
}
 80023cc:	4770      	bx	lr
msg_t chSemWaitS(semaphore_t *sp) {
 80023ce:	b510      	push	{r4, lr}
    currp->u.wtsemp = sp;
 80023d0:	4c06      	ldr	r4, [pc, #24]	; (80023ec <chSemWaitS+0x2c>)
 80023d2:	69a3      	ldr	r3, [r4, #24]
 80023d4:	6258      	str	r0, [r3, #36]	; 0x24
  tp->queue.next             = (thread_t *)tqp;
 80023d6:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = tqp->prev;
 80023d8:	6842      	ldr	r2, [r0, #4]
 80023da:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80023dc:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 80023de:	6043      	str	r3, [r0, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 80023e0:	2005      	movs	r0, #5
 80023e2:	f008 f8e5 	bl	800a5b0 <chSchGoSleepS>
    return currp->u.rdymsg;
 80023e6:	69a3      	ldr	r3, [r4, #24]
 80023e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80023ea:	bd10      	pop	{r4, pc}
 80023ec:	20001a18 	.word	0x20001a18

080023f0 <lru_get_last_s>:
static oc_object_t *lru_get_last_s(objects_cache_t *ocp) {
 80023f0:	b510      	push	{r4, lr}
 80023f2:	4604      	mov	r4, r0
    (void) chSemWaitS(&ocp->lru_sem);
 80023f4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80023f8:	f7ff ffe2 	bl	80023c0 <chSemWaitS>
    objp = ocp->lru.lru_prev;
 80023fc:	6a21      	ldr	r1, [r4, #32]
    LRU_REMOVE(objp);
 80023fe:	68ca      	ldr	r2, [r1, #12]
 8002400:	688b      	ldr	r3, [r1, #8]
 8002402:	6093      	str	r3, [r2, #8]
 8002404:	68ca      	ldr	r2, [r1, #12]
 8002406:	60da      	str	r2, [r3, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 8002408:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800240a:	f022 0001 	bic.w	r0, r2, #1
 800240e:	6248      	str	r0, [r1, #36]	; 0x24
 */
static inline void chSemFastWaitI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt--;
 8002410:	6a0b      	ldr	r3, [r1, #32]
 8002412:	3b01      	subs	r3, #1
 8002414:	620b      	str	r3, [r1, #32]
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 8002416:	f012 0f10 	tst.w	r2, #16
 800241a:	d00c      	beq.n	8002436 <lru_get_last_s+0x46>
 800241c:	2300      	movs	r3, #0
 800241e:	f383 8811 	msr	BASEPRI, r3
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 8002422:	2322      	movs	r3, #34	; 0x22
 8002424:	624b      	str	r3, [r1, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 8002426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002428:	2201      	movs	r2, #1
 800242a:	4620      	mov	r0, r4
 800242c:	4798      	blx	r3
 800242e:	2320      	movs	r3, #32
 8002430:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002434:	e7de      	b.n	80023f4 <lru_get_last_s+0x4>
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 8002436:	f010 0f02 	tst.w	r0, #2
 800243a:	d005      	beq.n	8002448 <lru_get_last_s+0x58>
        HASH_REMOVE(objp);
 800243c:	684b      	ldr	r3, [r1, #4]
 800243e:	680a      	ldr	r2, [r1, #0]
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	680b      	ldr	r3, [r1, #0]
 8002444:	684a      	ldr	r2, [r1, #4]
 8002446:	605a      	str	r2, [r3, #4]
      objp->obj_flags = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800244c:	4608      	mov	r0, r1
 800244e:	bd10      	pop	{r4, pc}

08002450 <chCacheGetObject>:
                              uint32_t key) {
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	4607      	mov	r7, r0
 8002454:	460e      	mov	r6, r1
 8002456:	4615      	mov	r5, r2
 8002458:	2320      	movs	r3, #32
 800245a:	f383 8811 	msr	BASEPRI, r3
  objp = hash_get_s(ocp, group, key);
 800245e:	f7ff f95f 	bl	8001720 <hash_get_s>
  if (objp != NULL) {
 8002462:	b1c0      	cbz	r0, 8002496 <chCacheGetObject+0x46>
 8002464:	4604      	mov	r4, r0
 */
static inline cnt_t chSemGetCounterI(const semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 8002466:	6a03      	ldr	r3, [r0, #32]
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 8002468:	2b00      	cmp	r3, #0
 800246a:	dd10      	ble.n	800248e <chCacheGetObject+0x3e>
      LRU_REMOVE(objp);
 800246c:	68c2      	ldr	r2, [r0, #12]
 800246e:	6883      	ldr	r3, [r0, #8]
 8002470:	6093      	str	r3, [r2, #8]
 8002472:	68c2      	ldr	r2, [r0, #12]
 8002474:	60da      	str	r2, [r3, #12]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 8002476:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6243      	str	r3, [r0, #36]	; 0x24
  sp->cnt--;
 800247e:	6a03      	ldr	r3, [r0, #32]
 8002480:	3b01      	subs	r3, #1
 8002482:	6203      	str	r3, [r0, #32]
 8002484:	2300      	movs	r3, #0
 8002486:	f383 8811 	msr	BASEPRI, r3
}
 800248a:	4620      	mov	r0, r4
 800248c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void) chSemWaitS(&objp->obj_sem);
 800248e:	3018      	adds	r0, #24
 8002490:	f7ff ff96 	bl	80023c0 <chSemWaitS>
 8002494:	e7f6      	b.n	8002484 <chCacheGetObject+0x34>
    objp = lru_get_last_s(ocp);
 8002496:	4638      	mov	r0, r7
 8002498:	f7ff ffaa 	bl	80023f0 <lru_get_last_s>
 800249c:	4604      	mov	r4, r0
    objp->obj_group = group;
 800249e:	6106      	str	r6, [r0, #16]
    objp->obj_key   = key;
 80024a0:	6145      	str	r5, [r0, #20]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 80024a2:	230a      	movs	r3, #10
 80024a4:	6243      	str	r3, [r0, #36]	; 0x24
    HASH_INSERT(ocp, objp, group, key);
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	1e51      	subs	r1, r2, #1
 80024aa:	1972      	adds	r2, r6, r5
 80024ac:	400a      	ands	r2, r1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80024b4:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80024b8:	6020      	str	r0, [r4, #0]
 80024ba:	6061      	str	r1, [r4, #4]
 80024bc:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 80024c0:	604c      	str	r4, [r1, #4]
 80024c2:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
 80024c6:	e7dd      	b.n	8002484 <chCacheGetObject+0x34>
	...

080024d0 <chSemWait>:
msg_t chSemWait(semaphore_t *sp) {
 80024d0:	b508      	push	{r3, lr}
 80024d2:	2320      	movs	r3, #32
 80024d4:	f383 8811 	msr	BASEPRI, r3
  msg = chSemWaitS(sp);
 80024d8:	f7ff ff72 	bl	80023c0 <chSemWaitS>
 80024dc:	2300      	movs	r3, #0
 80024de:	f383 8811 	msr	BASEPRI, r3
}
 80024e2:	bd08      	pop	{r3, pc}
	...

080024f0 <bmk_thread7>:
static THD_FUNCTION(bmk_thread7, p) {
 80024f0:	b508      	push	{r3, lr}
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <bmk_thread7+0x1c>)
 80024f4:	699b      	ldr	r3, [r3, #24]
 *
 * @xclass
 */
static inline bool chThdShouldTerminateX(void) {

  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80024f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  while (!chThdShouldTerminateX())
 80024fa:	f013 0f04 	tst.w	r3, #4
 80024fe:	d103      	bne.n	8002508 <bmk_thread7+0x18>
    chSemWait(&sem1);
 8002500:	4803      	ldr	r0, [pc, #12]	; (8002510 <bmk_thread7+0x20>)
 8002502:	f7ff ffe5 	bl	80024d0 <chSemWait>
 8002506:	e7f4      	b.n	80024f2 <bmk_thread7+0x2>
}
 8002508:	bd08      	pop	{r3, pc}
 800250a:	bf00      	nop
 800250c:	20001a18 	.word	0x20001a18
 8002510:	20001d2c 	.word	0x20001d2c
	...

08002520 <thread3>:
static THD_FUNCTION(thread3, p) {
 8002520:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8002522:	4c04      	ldr	r4, [pc, #16]	; (8002534 <thread3+0x14>)
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff ffd3 	bl	80024d0 <chSemWait>
  chSemSignal(&sem1);
 800252a:	4620      	mov	r0, r4
 800252c:	f7ff fe50 	bl	80021d0 <chSemSignal>
}
 8002530:	bd10      	pop	{r4, pc}
 8002532:	bf00      	nop
 8002534:	20001d20 	.word	0x20001d20
	...

08002540 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 8002540:	b510      	push	{r4, lr}
 8002542:	4604      	mov	r4, r0
  chSemWait(&sem1);
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <thread1.lto_priv.1+0x14>)
 8002546:	f7ff ffc3 	bl	80024d0 <chSemWait>
  test_emit_token(*(char *)p);
 800254a:	7820      	ldrb	r0, [r4, #0]
 800254c:	f7fe f960 	bl	8000810 <test_emit_token>
}
 8002550:	bd10      	pop	{r4, pc}
 8002552:	bf00      	nop
 8002554:	20001d20 	.word	0x20001d20
	...

08002560 <vtcb>:
static void vtcb(void *p) {
 8002560:	b510      	push	{r4, lr}
 8002562:	2320      	movs	r3, #32
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	2400      	movs	r4, #0
 800256a:	f384 8811 	msr	BASEPRI, r4
 800256e:	f383 8811 	msr	BASEPRI, r3
  sts = chSysGetStatusAndLockX();
 8002572:	f008 f8c5 	bl	800a700 <chSysGetStatusAndLockX>
  chSysRestoreStatusX(sts);
 8002576:	f008 f8ab 	bl	800a6d0 <chSysRestoreStatusX>
 800257a:	f384 8811 	msr	BASEPRI, r4
}
 800257e:	bd10      	pop	{r4, pc}

08002580 <rt_test_002_001_execute>:
static void rt_test_002_001_execute(void) {
 8002580:	b508      	push	{r3, lr}
  test_set_step(1);
 8002582:	2001      	movs	r0, #1
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <rt_test_002_001_execute+0x9c>)
 8002586:	6018      	str	r0, [r3, #0]
 8002588:	2320      	movs	r3, #32
 800258a:	f383 8811 	msr	BASEPRI, r3
    result = chSysIntegrityCheckI(CH_INTEGRITY_RLIST);
 800258e:	f008 f8c7 	bl	800a720 <chSysIntegrityCheckI>
 8002592:	2300      	movs	r3, #0
 8002594:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "ready list check failed");
 8002598:	f080 0001 	eor.w	r0, r0, #1
 800259c:	4920      	ldr	r1, [pc, #128]	; (8002620 <rt_test_002_001_execute+0xa0>)
 800259e:	b2c0      	uxtb	r0, r0
 80025a0:	f7fe fe26 	bl	80011f0 <_test_assert>
 80025a4:	b100      	cbz	r0, 80025a8 <rt_test_002_001_execute+0x28>
}
 80025a6:	bd08      	pop	{r3, pc}
  test_set_step(2);
 80025a8:	2002      	movs	r0, #2
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <rt_test_002_001_execute+0x9c>)
 80025ac:	6018      	str	r0, [r3, #0]
 80025ae:	2320      	movs	r3, #32
 80025b0:	f383 8811 	msr	BASEPRI, r3
    result = chSysIntegrityCheckI(CH_INTEGRITY_VTLIST);
 80025b4:	f008 f8b4 	bl	800a720 <chSysIntegrityCheckI>
 80025b8:	2300      	movs	r3, #0
 80025ba:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "virtual timers list check failed");
 80025be:	f080 0001 	eor.w	r0, r0, #1
 80025c2:	4918      	ldr	r1, [pc, #96]	; (8002624 <rt_test_002_001_execute+0xa4>)
 80025c4:	b2c0      	uxtb	r0, r0
 80025c6:	f7fe fe13 	bl	80011f0 <_test_assert>
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d1eb      	bne.n	80025a6 <rt_test_002_001_execute+0x26>
  test_set_step(3);
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <rt_test_002_001_execute+0x9c>)
 80025d0:	2203      	movs	r2, #3
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	2320      	movs	r3, #32
 80025d6:	f383 8811 	msr	BASEPRI, r3
    result = chSysIntegrityCheckI(CH_INTEGRITY_REGISTRY);
 80025da:	2004      	movs	r0, #4
 80025dc:	f008 f8a0 	bl	800a720 <chSysIntegrityCheckI>
 80025e0:	2300      	movs	r3, #0
 80025e2:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "registry list check failed");
 80025e6:	f080 0001 	eor.w	r0, r0, #1
 80025ea:	490f      	ldr	r1, [pc, #60]	; (8002628 <rt_test_002_001_execute+0xa8>)
 80025ec:	b2c0      	uxtb	r0, r0
 80025ee:	f7fe fdff 	bl	80011f0 <_test_assert>
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d1d7      	bne.n	80025a6 <rt_test_002_001_execute+0x26>
  test_set_step(4);
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <rt_test_002_001_execute+0x9c>)
 80025f8:	2204      	movs	r2, #4
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	2320      	movs	r3, #32
 80025fe:	f383 8811 	msr	BASEPRI, r3
    result = chSysIntegrityCheckI(CH_INTEGRITY_PORT);
 8002602:	2008      	movs	r0, #8
 8002604:	f008 f88c 	bl	800a720 <chSysIntegrityCheckI>
 8002608:	2300      	movs	r3, #0
 800260a:	f383 8811 	msr	BASEPRI, r3
    test_assert(result == false, "port layer check failed");
 800260e:	f080 0001 	eor.w	r0, r0, #1
 8002612:	4906      	ldr	r1, [pc, #24]	; (800262c <rt_test_002_001_execute+0xac>)
 8002614:	b2c0      	uxtb	r0, r0
 8002616:	f7fe fdeb 	bl	80011f0 <_test_assert>
  test_end_step(4);
 800261a:	e7c4      	b.n	80025a6 <rt_test_002_001_execute+0x26>
 800261c:	20002454 	.word	0x20002454
 8002620:	0800c2d0 	.word	0x0800c2d0
 8002624:	0800c2e8 	.word	0x0800c2e8
 8002628:	0800c30c 	.word	0x0800c30c
 800262c:	0800c328 	.word	0x0800c328

08002630 <save_history>:
  if (shp == NULL)
 8002630:	2800      	cmp	r0, #0
 8002632:	d04d      	beq.n	80026d0 <save_history+0xa0>
static void save_history(ShellHistory *shp, char *line, int length) {
 8002634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002638:	460e      	mov	r6, r1
 800263a:	4614      	mov	r4, r2
 800263c:	4605      	mov	r5, r0
  if (length > shp->sh_size - 2)
 800263e:	6843      	ldr	r3, [r0, #4]
 8002640:	3b01      	subs	r3, #1
 8002642:	4293      	cmp	r3, r2
 8002644:	dc01      	bgt.n	800264a <save_history+0x1a>
 8002646:	e032      	b.n	80026ae <save_history+0x7e>
    length--;
 8002648:	3c01      	subs	r4, #1
  while ((*(line + length -1) == ' ') && (length > 0))
 800264a:	4627      	mov	r7, r4
 800264c:	1e63      	subs	r3, r4, #1
 800264e:	5cf3      	ldrb	r3, [r6, r3]
 8002650:	2b20      	cmp	r3, #32
 8002652:	d101      	bne.n	8002658 <save_history+0x28>
 8002654:	2c00      	cmp	r4, #0
 8002656:	dcf7      	bgt.n	8002648 <save_history+0x18>
  if (length <= 0)
 8002658:	2c00      	cmp	r4, #0
 800265a:	dc03      	bgt.n	8002664 <save_history+0x34>
 800265c:	e027      	b.n	80026ae <save_history+0x7e>
    del_histbuff_entry(shp);
 800265e:	4628      	mov	r0, r5
 8002660:	f7fe fece 	bl	8001400 <del_histbuff_entry>
  while (!is_histbuff_space(shp, length))
 8002664:	4621      	mov	r1, r4
 8002666:	4628      	mov	r0, r5
 8002668:	f7fe feb2 	bl	80013d0 <is_histbuff_space>
 800266c:	2800      	cmp	r0, #0
 800266e:	d0f6      	beq.n	800265e <save_history+0x2e>
  if (length < shp->sh_size - shp->sh_end - 1)
 8002670:	686b      	ldr	r3, [r5, #4]
 8002672:	68e8      	ldr	r0, [r5, #12]
 8002674:	1a1b      	subs	r3, r3, r0
 8002676:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800267a:	45a0      	cmp	r8, r4
 800267c:	dd19      	ble.n	80026b2 <save_history+0x82>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 800267e:	682b      	ldr	r3, [r5, #0]
 8002680:	3001      	adds	r0, #1
 8002682:	463a      	mov	r2, r7
 8002684:	4631      	mov	r1, r6
 8002686:	4418      	add	r0, r3
 8002688:	f7fd fe30 	bl	80002ec <memcpy>
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 800268c:	682a      	ldr	r2, [r5, #0]
 800268e:	68eb      	ldr	r3, [r5, #12]
 8002690:	54d4      	strb	r4, [r2, r3]
  shp->sh_end += length + 1;
 8002692:	3401      	adds	r4, #1
 8002694:	68eb      	ldr	r3, [r5, #12]
 8002696:	441c      	add	r4, r3
 8002698:	60ec      	str	r4, [r5, #12]
  if (shp->sh_end >= shp->sh_size)
 800269a:	686b      	ldr	r3, [r5, #4]
 800269c:	429c      	cmp	r4, r3
 800269e:	db01      	blt.n	80026a4 <save_history+0x74>
    shp->sh_end -= shp->sh_size;
 80026a0:	1ae4      	subs	r4, r4, r3
 80026a2:	60ec      	str	r4, [r5, #12]
  *(shp->sh_buffer + shp->sh_end) = 0;
 80026a4:	6829      	ldr	r1, [r5, #0]
 80026a6:	68ea      	ldr	r2, [r5, #12]
 80026a8:	2300      	movs	r3, #0
 80026aa:	548b      	strb	r3, [r1, r2]
  shp->sh_cur = 0;
 80026ac:	612b      	str	r3, [r5, #16]
}
 80026ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, part_len);
 80026b2:	682b      	ldr	r3, [r5, #0]
 80026b4:	3001      	adds	r0, #1
 80026b6:	4642      	mov	r2, r8
 80026b8:	4631      	mov	r1, r6
 80026ba:	4418      	add	r0, r3
 80026bc:	f7fd fe16 	bl	80002ec <memcpy>
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 80026c0:	eba4 0208 	sub.w	r2, r4, r8
 80026c4:	eb06 0108 	add.w	r1, r6, r8
 80026c8:	6828      	ldr	r0, [r5, #0]
 80026ca:	f7fd fe0f 	bl	80002ec <memcpy>
 80026ce:	e7dd      	b.n	800268c <save_history+0x5c>
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
	...

080026e0 <get_history>:
static int get_history(ShellHistory *shp, char *line, int dir) {
 80026e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (shp == NULL)
 80026e4:	2800      	cmp	r0, #0
 80026e6:	d067      	beq.n	80027b8 <get_history+0xd8>
 80026e8:	460e      	mov	r6, r1
 80026ea:	4605      	mov	r5, r0
  int idx = shp->sh_beg;
 80026ec:	6884      	ldr	r4, [r0, #8]
 80026ee:	4623      	mov	r3, r4
  int count=0;
 80026f0:	2700      	movs	r7, #0
 80026f2:	e000      	b.n	80026f6 <get_history+0x16>
    count++;
 80026f4:	3701      	adds	r7, #1
  while (idx != shp->sh_end) {
 80026f6:	68e9      	ldr	r1, [r5, #12]
 80026f8:	4299      	cmp	r1, r3
 80026fa:	d008      	beq.n	800270e <get_history+0x2e>
    idx += *(shp->sh_buffer + idx) + 1;
 80026fc:	6829      	ldr	r1, [r5, #0]
 80026fe:	5cc8      	ldrb	r0, [r1, r3]
 8002700:	3001      	adds	r0, #1
 8002702:	4403      	add	r3, r0
    if (idx >= shp->sh_size)
 8002704:	6869      	ldr	r1, [r5, #4]
 8002706:	4299      	cmp	r1, r3
 8002708:	dcf4      	bgt.n	80026f4 <get_history+0x14>
      idx -= shp->sh_size;
 800270a:	1a5b      	subs	r3, r3, r1
 800270c:	e7f2      	b.n	80026f4 <get_history+0x14>
  if (dir == SHELL_HIST_DIR_FW) {
 800270e:	2a01      	cmp	r2, #1
 8002710:	d005      	beq.n	800271e <get_history+0x3e>
  if (count >= shp->sh_cur) {
 8002712:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8002716:	45bc      	cmp	ip, r7
 8002718:	dc07      	bgt.n	800272a <get_history+0x4a>
    int i = 0;
 800271a:	2000      	movs	r0, #0
 800271c:	e009      	b.n	8002732 <get_history+0x52>
    if (shp->sh_cur > 0)
 800271e:	692b      	ldr	r3, [r5, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	dd4c      	ble.n	80027be <get_history+0xde>
      shp->sh_cur -= 2;
 8002724:	3b02      	subs	r3, #2
 8002726:	612b      	str	r3, [r5, #16]
 8002728:	e7f3      	b.n	8002712 <get_history+0x32>
  return -1;
 800272a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800272e:	e01b      	b.n	8002768 <get_history+0x88>
      i++;
 8002730:	3001      	adds	r0, #1
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8002732:	42a1      	cmp	r1, r4
 8002734:	d00c      	beq.n	8002750 <get_history+0x70>
 8002736:	1a3b      	subs	r3, r7, r0
 8002738:	3b01      	subs	r3, #1
 800273a:	459c      	cmp	ip, r3
 800273c:	d008      	beq.n	8002750 <get_history+0x70>
      idx += *(shp->sh_buffer + idx) + 1;
 800273e:	682b      	ldr	r3, [r5, #0]
 8002740:	5d1b      	ldrb	r3, [r3, r4]
 8002742:	3301      	adds	r3, #1
 8002744:	441c      	add	r4, r3
      if (idx >= shp->sh_size)
 8002746:	686b      	ldr	r3, [r5, #4]
 8002748:	42a3      	cmp	r3, r4
 800274a:	dcf1      	bgt.n	8002730 <get_history+0x50>
        idx -= shp->sh_size;
 800274c:	1ae4      	subs	r4, r4, r3
 800274e:	e7ef      	b.n	8002730 <get_history+0x50>
    int length = *(shp->sh_buffer + idx);
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	46a1      	mov	r9, r4
 8002754:	5d1f      	ldrb	r7, [r3, r4]
 8002756:	46b8      	mov	r8, r7
    if (length > 0) {
 8002758:	b94f      	cbnz	r7, 800276e <get_history+0x8e>
    else if (dir == SHELL_HIST_DIR_FW) {
 800275a:	2a01      	cmp	r2, #1
 800275c:	d132      	bne.n	80027c4 <get_history+0xe4>
      shp->sh_cur++;
 800275e:	f10c 0301 	add.w	r3, ip, #1
 8002762:	612b      	str	r3, [r5, #16]
      return 0;
 8002764:	f04f 0800 	mov.w	r8, #0
}
 8002768:	4640      	mov	r0, r8
 800276a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      shp->sh_cur++;
 800276e:	f10c 0301 	add.w	r3, ip, #1
 8002772:	612b      	str	r3, [r5, #16]
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 8002774:	2240      	movs	r2, #64	; 0x40
 8002776:	2100      	movs	r1, #0
 8002778:	4630      	mov	r0, r6
 800277a:	f008 fdf5 	bl	800b368 <memset>
      if ((idx + length) < shp->sh_size) {
 800277e:	19e2      	adds	r2, r4, r7
 8002780:	686b      	ldr	r3, [r5, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	da08      	bge.n	8002798 <get_history+0xb8>
        memcpy(line, (shp->sh_buffer + idx + 1), length);
 8002786:	6829      	ldr	r1, [r5, #0]
 8002788:	f104 0901 	add.w	r9, r4, #1
 800278c:	463a      	mov	r2, r7
 800278e:	4449      	add	r1, r9
 8002790:	4630      	mov	r0, r6
 8002792:	f7fd fdab 	bl	80002ec <memcpy>
 8002796:	e7e7      	b.n	8002768 <get_history+0x88>
        int part_len = shp->sh_size - idx - 1;
 8002798:	1b1c      	subs	r4, r3, r4
 800279a:	3c01      	subs	r4, #1
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 800279c:	6829      	ldr	r1, [r5, #0]
 800279e:	f109 0901 	add.w	r9, r9, #1
 80027a2:	4622      	mov	r2, r4
 80027a4:	4449      	add	r1, r9
 80027a6:	4630      	mov	r0, r6
 80027a8:	f7fd fda0 	bl	80002ec <memcpy>
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 80027ac:	1b3a      	subs	r2, r7, r4
 80027ae:	6829      	ldr	r1, [r5, #0]
 80027b0:	1930      	adds	r0, r6, r4
 80027b2:	f7fd fd9b 	bl	80002ec <memcpy>
      return length;
 80027b6:	e7d7      	b.n	8002768 <get_history+0x88>
    return -1;
 80027b8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80027bc:	e7d4      	b.n	8002768 <get_history+0x88>
      return 0;
 80027be:	f04f 0800 	mov.w	r8, #0
 80027c2:	e7d1      	b.n	8002768 <get_history+0x88>
  return -1;
 80027c4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80027c8:	e7ce      	b.n	8002768 <get_history+0x88>
 80027ca:	bf00      	nop
 80027cc:	0000      	movs	r0, r0
	...

080027d0 <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 80027d0:	b538      	push	{r3, r4, r5, lr}
 80027d2:	460d      	mov	r5, r1
  if (str != NULL)
 80027d4:	b100      	cbz	r0, 80027d8 <parse_arguments+0x8>
    *saveptr = str;
 80027d6:	6028      	str	r0, [r5, #0]
  p = *saveptr;
 80027d8:	682c      	ldr	r4, [r5, #0]
  if (!p) {
 80027da:	b1a4      	cbz	r4, 8002806 <parse_arguments+0x36>
  p += strspn(p, " \t");
 80027dc:	490f      	ldr	r1, [pc, #60]	; (800281c <parse_arguments+0x4c>)
 80027de:	4620      	mov	r0, r4
 80027e0:	f008 ff08 	bl	800b5f4 <strspn>
 80027e4:	4404      	add	r4, r0
  if (*p == '"') {
 80027e6:	7823      	ldrb	r3, [r4, #0]
 80027e8:	2b22      	cmp	r3, #34	; 0x22
 80027ea:	d00e      	beq.n	800280a <parse_arguments+0x3a>
    *saveptr = strpbrk(p, " \t");
 80027ec:	490b      	ldr	r1, [pc, #44]	; (800281c <parse_arguments+0x4c>)
 80027ee:	4620      	mov	r0, r4
 80027f0:	f008 fee4 	bl	800b5bc <strpbrk>
 80027f4:	6028      	str	r0, [r5, #0]
  if (*saveptr != NULL) {
 80027f6:	682b      	ldr	r3, [r5, #0]
 80027f8:	b11b      	cbz	r3, 8002802 <parse_arguments+0x32>
    *(*saveptr)++ = '\0';
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	602a      	str	r2, [r5, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
  return *p != '\0' ? p : NULL;
 8002802:	7823      	ldrb	r3, [r4, #0]
 8002804:	b143      	cbz	r3, 8002818 <parse_arguments+0x48>
}
 8002806:	4620      	mov	r0, r4
 8002808:	bd38      	pop	{r3, r4, r5, pc}
    p++;
 800280a:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 800280c:	2122      	movs	r1, #34	; 0x22
 800280e:	4620      	mov	r0, r4
 8002810:	f008 fdfa 	bl	800b408 <strchr>
 8002814:	6028      	str	r0, [r5, #0]
 8002816:	e7ee      	b.n	80027f6 <parse_arguments+0x26>
  return *p != '\0' ? p : NULL;
 8002818:	2400      	movs	r4, #0
 800281a:	e7f4      	b.n	8002806 <parse_arguments+0x36>
 800281c:	0800c340 	.word	0x0800c340

08002820 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002820:	b40e      	push	{r1, r2, r3}
 8002822:	b500      	push	{lr}
 8002824:	b082      	sub	sp, #8
 8002826:	aa03      	add	r2, sp, #12
 8002828:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800282c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 800282e:	f7fe fe27 	bl	8001480 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8002832:	b002      	add	sp, #8
 8002834:	f85d eb04 	ldr.w	lr, [sp], #4
 8002838:	b003      	add	sp, #12
 800283a:	4770      	bx	lr
 800283c:	0000      	movs	r0, r0
	...

08002840 <ti_help>:
}  
/*
 * shell commands for user entry
 * Provides a list of comamnds and their description to Chibios shell user.
 */
static void ti_help(BaseSequentialStream *sd, int argc, char *argv[]) {
 8002840:	b510      	push	{r4, lr}
 8002842:	4604      	mov	r4, r0

  (void) argc;
  (void) argv;
  
  chprintf(sd, "Available commands:\r\n");
 8002844:	4907      	ldr	r1, [pc, #28]	; (8002864 <ti_help+0x24>)
 8002846:	f7ff ffeb 	bl	8002820 <chprintf>
  chprintf(sd, "    reg:   Update registers,Usage reg <value> register address concated with its value\r\n");
 800284a:	4907      	ldr	r1, [pc, #28]	; (8002868 <ti_help+0x28>)
 800284c:	4620      	mov	r0, r4
 800284e:	f7ff ffe7 	bl	8002820 <chprintf>
  chprintf(sd, "    c:   loop through available profiles\n\n\r\n");
 8002852:	4906      	ldr	r1, [pc, #24]	; (800286c <ti_help+0x2c>)
 8002854:	4620      	mov	r0, r4
 8002856:	f7ff ffe3 	bl	8002820 <chprintf>
  chprintf(sd, "    ?:   provides list of commands\n\n\r\n");
 800285a:	4905      	ldr	r1, [pc, #20]	; (8002870 <ti_help+0x30>)
 800285c:	4620      	mov	r0, r4
 800285e:	f7ff ffdf 	bl	8002820 <chprintf>
}
 8002862:	bd10      	pop	{r4, pc}
 8002864:	0800c344 	.word	0x0800c344
 8002868:	0800c35c 	.word	0x0800c35c
 800286c:	0800c3b8 	.word	0x0800c3b8
 8002870:	0800c3e8 	.word	0x0800c3e8
	...

08002880 <app_init>:
{
 8002880:	b510      	push	{r4, lr}
    sdStart(&DEBUG_SERIAL, &ser_cfg);
 8002882:	4c09      	ldr	r4, [pc, #36]	; (80028a8 <app_init+0x28>)
 8002884:	4909      	ldr	r1, [pc, #36]	; (80028ac <app_init+0x2c>)
 8002886:	4620      	mov	r0, r4
 8002888:	f008 fb12 	bl	800aeb0 <sdStart>
    chprintf(DEBUG_CHP, "\r\n Initializing ChibiOS\r\n");
 800288c:	4908      	ldr	r1, [pc, #32]	; (80028b0 <app_init+0x30>)
 800288e:	4620      	mov	r0, r4
 8002890:	f7ff ffc6 	bl	8002820 <chprintf>
    spiStart(&SPID1, &spicfg_rx);
 8002894:	4907      	ldr	r1, [pc, #28]	; (80028b4 <app_init+0x34>)
 8002896:	4808      	ldr	r0, [pc, #32]	; (80028b8 <app_init+0x38>)
 8002898:	f008 fafa 	bl	800ae90 <spiStart>
    spiStart(&SPID2, &spicfg_tx);
 800289c:	4907      	ldr	r1, [pc, #28]	; (80028bc <app_init+0x3c>)
 800289e:	4808      	ldr	r0, [pc, #32]	; (80028c0 <app_init+0x40>)
 80028a0:	f008 faf6 	bl	800ae90 <spiStart>
}
 80028a4:	bd10      	pop	{r4, pc}
 80028a6:	bf00      	nop
 80028a8:	200018e8 	.word	0x200018e8
 80028ac:	200014ac 	.word	0x200014ac
 80028b0:	0800c410 	.word	0x0800c410
 80028b4:	0800e210 	.word	0x0800e210
 80028b8:	20001964 	.word	0x20001964
 80028bc:	0800e224 	.word	0x0800e224
 80028c0:	20001994 	.word	0x20001994
	...

080028d0 <cmd_systime>:
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
}
#endif

#if (SHELL_CMD_SYSTIME_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {
 80028d0:	b510      	push	{r4, lr}
 80028d2:	4604      	mov	r4, r0

  (void)argv;
  if (argc > 0) {
 80028d4:	2900      	cmp	r1, #0
 80028d6:	dc0d      	bgt.n	80028f4 <cmd_systime+0x24>
 80028d8:	2320      	movs	r3, #32
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f008 fb07 	bl	800aef0 <stGetCounter>
 80028e2:	4602      	mov	r2, r0
 80028e4:	2300      	movs	r3, #0
 80028e6:	f383 8811 	msr	BASEPRI, r3
    shellUsage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 80028ea:	4905      	ldr	r1, [pc, #20]	; (8002900 <cmd_systime+0x30>)
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7ff ff97 	bl	8002820 <chprintf>
}
 80028f2:	bd10      	pop	{r4, pc}
    shellUsage(chp, "systime");
 80028f4:	4a03      	ldr	r2, [pc, #12]	; (8002904 <cmd_systime+0x34>)
 80028f6:	4904      	ldr	r1, [pc, #16]	; (8002908 <cmd_systime+0x38>)
 80028f8:	f7ff ff92 	bl	8002820 <chprintf>
    return;
 80028fc:	e7f9      	b.n	80028f2 <cmd_systime+0x22>
 80028fe:	bf00      	nop
 8002900:	0800c440 	.word	0x0800c440
 8002904:	0800c42c 	.word	0x0800c42c
 8002908:	0800c434 	.word	0x0800c434
 800290c:	00000000 	.word	0x00000000

08002910 <cmd_echo>:
static void cmd_echo(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002910:	b508      	push	{r3, lr}
  if (argc != 1) {
 8002912:	2901      	cmp	r1, #1
 8002914:	d004      	beq.n	8002920 <cmd_echo+0x10>
    shellUsage(chp, "echo \"message\"");
 8002916:	4a05      	ldr	r2, [pc, #20]	; (800292c <cmd_echo+0x1c>)
 8002918:	4905      	ldr	r1, [pc, #20]	; (8002930 <cmd_echo+0x20>)
 800291a:	f7ff ff81 	bl	8002820 <chprintf>
}
 800291e:	bd08      	pop	{r3, pc}
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	4904      	ldr	r1, [pc, #16]	; (8002934 <cmd_echo+0x24>)
 8002924:	f7ff ff7c 	bl	8002820 <chprintf>
 8002928:	e7f9      	b.n	800291e <cmd_echo+0xe>
 800292a:	bf00      	nop
 800292c:	0800c448 	.word	0x0800c448
 8002930:	0800c434 	.word	0x0800c434
 8002934:	0800c458 	.word	0x0800c458
	...

08002940 <cmd_info>:
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8002940:	b510      	push	{r4, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	4604      	mov	r4, r0
  if (argc > 0) {
 8002946:	2900      	cmp	r1, #0
 8002948:	dc2b      	bgt.n	80029a2 <cmd_info+0x62>
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <cmd_info+0x6c>)
 800294c:	4918      	ldr	r1, [pc, #96]	; (80029b0 <cmd_info+0x70>)
 800294e:	f7ff ff67 	bl	8002820 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 8002952:	4a18      	ldr	r2, [pc, #96]	; (80029b4 <cmd_info+0x74>)
 8002954:	4918      	ldr	r1, [pc, #96]	; (80029b8 <cmd_info+0x78>)
 8002956:	4620      	mov	r0, r4
 8002958:	f7ff ff62 	bl	8002820 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 800295c:	4a17      	ldr	r2, [pc, #92]	; (80029bc <cmd_info+0x7c>)
 800295e:	4918      	ldr	r1, [pc, #96]	; (80029c0 <cmd_info+0x80>)
 8002960:	4620      	mov	r0, r4
 8002962:	f7ff ff5d 	bl	8002820 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 8002966:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <cmd_info+0x84>)
 8002968:	4917      	ldr	r1, [pc, #92]	; (80029c8 <cmd_info+0x88>)
 800296a:	4620      	mov	r0, r4
 800296c:	f7ff ff58 	bl	8002820 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8002970:	4a16      	ldr	r2, [pc, #88]	; (80029cc <cmd_info+0x8c>)
 8002972:	4917      	ldr	r1, [pc, #92]	; (80029d0 <cmd_info+0x90>)
 8002974:	4620      	mov	r0, r4
 8002976:	f7ff ff53 	bl	8002820 <chprintf>
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <cmd_info+0x94>)
 800297c:	4916      	ldr	r1, [pc, #88]	; (80029d8 <cmd_info+0x98>)
 800297e:	4620      	mov	r0, r4
 8002980:	f7ff ff4e 	bl	8002820 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 8002984:	4a15      	ldr	r2, [pc, #84]	; (80029dc <cmd_info+0x9c>)
 8002986:	4916      	ldr	r1, [pc, #88]	; (80029e0 <cmd_info+0xa0>)
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff ff49 	bl	8002820 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <cmd_info+0xa4>)
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <cmd_info+0xa8>)
 8002994:	4a15      	ldr	r2, [pc, #84]	; (80029ec <cmd_info+0xac>)
 8002996:	4916      	ldr	r1, [pc, #88]	; (80029f0 <cmd_info+0xb0>)
 8002998:	4620      	mov	r0, r4
 800299a:	f7ff ff41 	bl	8002820 <chprintf>
}
 800299e:	b002      	add	sp, #8
 80029a0:	bd10      	pop	{r4, pc}
    shellUsage(chp, "info");
 80029a2:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <cmd_info+0xb4>)
 80029a4:	4914      	ldr	r1, [pc, #80]	; (80029f8 <cmd_info+0xb8>)
 80029a6:	f7ff ff3b 	bl	8002820 <chprintf>
    return;
 80029aa:	e7f8      	b.n	800299e <cmd_info+0x5e>
 80029ac:	0800c1bc 	.word	0x0800c1bc
 80029b0:	0800c468 	.word	0x0800c468
 80029b4:	0800ba9c 	.word	0x0800ba9c
 80029b8:	0800c47c 	.word	0x0800c47c
 80029bc:	0800ba2c 	.word	0x0800ba2c
 80029c0:	0800c490 	.word	0x0800c490
 80029c4:	0800ba64 	.word	0x0800ba64
 80029c8:	0800c4a4 	.word	0x0800c4a4
 80029cc:	0800bad4 	.word	0x0800bad4
 80029d0:	0800c4b8 	.word	0x0800c4b8
 80029d4:	0800c4cc 	.word	0x0800c4cc
 80029d8:	0800c4f8 	.word	0x0800c4f8
 80029dc:	0800c50c 	.word	0x0800c50c
 80029e0:	0800c538 	.word	0x0800c538
 80029e4:	0800c574 	.word	0x0800c574
 80029e8:	0800c54c 	.word	0x0800c54c
 80029ec:	0800c550 	.word	0x0800c550
 80029f0:	0800c55c 	.word	0x0800c55c
 80029f4:	0800c460 	.word	0x0800c460
 80029f8:	0800c434 	.word	0x0800c434
 80029fc:	00000000 	.word	0x00000000

08002a00 <shellGetLine>:
 * @retval true         the channel was reset or CTRL-D pressed.
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
 8002a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a04:	b083      	sub	sp, #12
 8002a06:	4688      	mov	r8, r1
 8002a08:	4691      	mov	r9, r2
 8002a0a:	469a      	mov	sl, r3
  char *p = line;
  BaseSequentialStream *chp = scfg->sc_channel;
 8002a0c:	6804      	ldr	r4, [r0, #0]
  char *p = line;
 8002a0e:	460e      	mov	r6, r1
#if SHELL_USE_ESC_SEQ == TRUE
  bool escape = false;
  bool bracket = false;
 8002a10:	2700      	movs	r7, #0
  bool escape = false;
 8002a12:	463d      	mov	r5, r7
 8002a14:	e03d      	b.n	8002a92 <shellGetLine+0x92>
      }
      if (bracket) {
        bracket = false;
#if SHELL_USE_HISTORY == TRUE
        if (c == 'A') {
          int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8002a16:	2200      	movs	r2, #0
 8002a18:	4641      	mov	r1, r8
 8002a1a:	4650      	mov	r0, sl
 8002a1c:	f7ff fe60 	bl	80026e0 <get_history>

          if (len > 0) {
 8002a20:	1e05      	subs	r5, r0, #0
 8002a22:	dc02      	bgt.n	8002a2a <shellGetLine+0x2a>
        bracket = false;
 8002a24:	2700      	movs	r7, #0
      escape = false;
 8002a26:	463d      	mov	r5, r7
 8002a28:	e033      	b.n	8002a92 <shellGetLine+0x92>
            _shell_reset_cur(chp);
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	2246      	movs	r2, #70	; 0x46
 8002a2e:	4969      	ldr	r1, [pc, #420]	; (8002bd4 <shellGetLine+0x1d4>)
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7ff fef5 	bl	8002820 <chprintf>
            _shell_clr_line(chp);
 8002a36:	4968      	ldr	r1, [pc, #416]	; (8002bd8 <shellGetLine+0x1d8>)
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7ff fef1 	bl	8002820 <chprintf>
            chprintf(chp, "%s", line);
 8002a3e:	4642      	mov	r2, r8
 8002a40:	4966      	ldr	r1, [pc, #408]	; (8002bdc <shellGetLine+0x1dc>)
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7ff feec 	bl	8002820 <chprintf>
            p = line + len;
 8002a48:	eb08 0605 	add.w	r6, r8, r5
 8002a4c:	e7ea      	b.n	8002a24 <shellGetLine+0x24>
          }
          continue;
        }
        if (c == 'B') {
          int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4641      	mov	r1, r8
 8002a52:	4650      	mov	r0, sl
 8002a54:	f7ff fe44 	bl	80026e0 <get_history>

          if (len == 0)
 8002a58:	4605      	mov	r5, r0
 8002a5a:	b910      	cbnz	r0, 8002a62 <shellGetLine+0x62>
            *line = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f888 3000 	strb.w	r3, [r8]

          if (len >= 0) {
 8002a62:	2d00      	cmp	r5, #0
 8002a64:	da02      	bge.n	8002a6c <shellGetLine+0x6c>
        bracket = false;
 8002a66:	2700      	movs	r7, #0
      escape = false;
 8002a68:	463d      	mov	r5, r7
 8002a6a:	e012      	b.n	8002a92 <shellGetLine+0x92>
            _shell_reset_cur(chp);
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	2246      	movs	r2, #70	; 0x46
 8002a70:	4958      	ldr	r1, [pc, #352]	; (8002bd4 <shellGetLine+0x1d4>)
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff fed4 	bl	8002820 <chprintf>
            _shell_clr_line(chp);
 8002a78:	4957      	ldr	r1, [pc, #348]	; (8002bd8 <shellGetLine+0x1d8>)
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f7ff fed0 	bl	8002820 <chprintf>
            chprintf(chp, "%s", line);
 8002a80:	4642      	mov	r2, r8
 8002a82:	4956      	ldr	r1, [pc, #344]	; (8002bdc <shellGetLine+0x1dc>)
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff fecb 	bl	8002820 <chprintf>
            p = line + len;
 8002a8a:	eb08 0605 	add.w	r6, r8, r5
 8002a8e:	e7ea      	b.n	8002a66 <shellGetLine+0x66>
      escape = false;
 8002a90:	2500      	movs	r5, #0
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f10d 0107 	add.w	r1, sp, #7
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	4798      	blx	r3
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	f000 808d 	beq.w	8002bc0 <shellGetLine+0x1c0>
    if (c == 27) {
 8002aa6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002aaa:	291b      	cmp	r1, #27
 8002aac:	f000 808d 	beq.w	8002bca <shellGetLine+0x1ca>
    if (escape) {
 8002ab0:	b155      	cbz	r5, 8002ac8 <shellGetLine+0xc8>
      if (c == '[') {
 8002ab2:	295b      	cmp	r1, #91	; 0x5b
 8002ab4:	f000 808b 	beq.w	8002bce <shellGetLine+0x1ce>
      if (bracket) {
 8002ab8:	2f00      	cmp	r7, #0
 8002aba:	d0e9      	beq.n	8002a90 <shellGetLine+0x90>
        if (c == 'A') {
 8002abc:	2941      	cmp	r1, #65	; 0x41
 8002abe:	d0aa      	beq.n	8002a16 <shellGetLine+0x16>
        if (c == 'B') {
 8002ac0:	2942      	cmp	r1, #66	; 0x42
 8002ac2:	d0c4      	beq.n	8002a4e <shellGetLine+0x4e>
        bracket = false;
 8002ac4:	2700      	movs	r7, #0
 8002ac6:	e7e3      	b.n	8002a90 <shellGetLine+0x90>
      }
      continue;
    }
#endif
#if (SHELL_CMD_EXIT_ENABLED == TRUE) && !defined(_CHIBIOS_NIL_)
    if (c == 4) {
 8002ac8:	2904      	cmp	r1, #4
 8002aca:	d019      	beq.n	8002b00 <shellGetLine+0x100>
      chprintf(chp, "^D");
      return true;
    }
#endif
    if ((c == 8) || (c == 127)) {
 8002acc:	2908      	cmp	r1, #8
 8002ace:	d01d      	beq.n	8002b0c <shellGetLine+0x10c>
 8002ad0:	297f      	cmp	r1, #127	; 0x7f
 8002ad2:	d01b      	beq.n	8002b0c <shellGetLine+0x10c>
        streamPut(chp, 0x08);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 8002ad4:	290d      	cmp	r1, #13
 8002ad6:	d02c      	beq.n	8002b32 <shellGetLine+0x132>
      }
      continue;
    }
#endif
#if SHELL_USE_HISTORY == TRUE
    if (c == 14) {
 8002ad8:	290e      	cmp	r1, #14
 8002ada:	d037      	beq.n	8002b4c <shellGetLine+0x14c>
        chprintf(chp, "%s", line);
        p = line + len;
      }
      continue;
    }
    if (c == 16) {
 8002adc:	2910      	cmp	r1, #16
 8002ade:	d054      	beq.n	8002b8a <shellGetLine+0x18a>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 8002ae0:	291f      	cmp	r1, #31
 8002ae2:	d9d6      	bls.n	8002a92 <shellGetLine+0x92>
      continue;
    if (p < line + size - 1) {
 8002ae4:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8002ae8:	4443      	add	r3, r8
 8002aea:	42b3      	cmp	r3, r6
 8002aec:	d9d1      	bls.n	8002a92 <shellGetLine+0x92>
      streamPut(chp, c);
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	4620      	mov	r0, r4
 8002af4:	4798      	blx	r3
      *p++ = (char)c;
 8002af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002afa:	f806 3b01 	strb.w	r3, [r6], #1
 8002afe:	e7c8      	b.n	8002a92 <shellGetLine+0x92>
      chprintf(chp, "^D");
 8002b00:	4937      	ldr	r1, [pc, #220]	; (8002be0 <shellGetLine+0x1e0>)
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7ff fe8c 	bl	8002820 <chprintf>
      return true;
 8002b08:	2501      	movs	r5, #1
 8002b0a:	e05a      	b.n	8002bc2 <shellGetLine+0x1c2>
      if (p != line) {
 8002b0c:	4546      	cmp	r6, r8
 8002b0e:	d0c0      	beq.n	8002a92 <shellGetLine+0x92>
        streamPut(chp, 0x08);
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2108      	movs	r1, #8
 8002b16:	4620      	mov	r0, r4
 8002b18:	4798      	blx	r3
        streamPut(chp, 0x20);
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2120      	movs	r1, #32
 8002b20:	4620      	mov	r0, r4
 8002b22:	4798      	blx	r3
        streamPut(chp, 0x08);
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2108      	movs	r1, #8
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	4798      	blx	r3
        p--;
 8002b2e:	3e01      	subs	r6, #1
      continue;
 8002b30:	e7af      	b.n	8002a92 <shellGetLine+0x92>
      chprintf(chp, SHELL_NEWLINE_STR);
 8002b32:	492c      	ldr	r1, [pc, #176]	; (8002be4 <shellGetLine+0x1e4>)
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7ff fe73 	bl	8002820 <chprintf>
      save_history(shp, line, p - line);
 8002b3a:	eba6 0208 	sub.w	r2, r6, r8
 8002b3e:	4641      	mov	r1, r8
 8002b40:	4650      	mov	r0, sl
 8002b42:	f7ff fd75 	bl	8002630 <save_history>
      *p = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	7033      	strb	r3, [r6, #0]
      return false;
 8002b4a:	e03a      	b.n	8002bc2 <shellGetLine+0x1c2>
      int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4641      	mov	r1, r8
 8002b50:	4650      	mov	r0, sl
 8002b52:	f7ff fdc5 	bl	80026e0 <get_history>
      if (len == 0)
 8002b56:	4683      	mov	fp, r0
 8002b58:	b910      	cbnz	r0, 8002b60 <shellGetLine+0x160>
        *line = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f888 3000 	strb.w	r3, [r8]
      if (len >= 0) {
 8002b60:	f1bb 0f00 	cmp.w	fp, #0
 8002b64:	db95      	blt.n	8002a92 <shellGetLine+0x92>
        _shell_reset_cur(chp);
 8002b66:	2304      	movs	r3, #4
 8002b68:	2246      	movs	r2, #70	; 0x46
 8002b6a:	491a      	ldr	r1, [pc, #104]	; (8002bd4 <shellGetLine+0x1d4>)
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7ff fe57 	bl	8002820 <chprintf>
        _shell_clr_line(chp);
 8002b72:	4919      	ldr	r1, [pc, #100]	; (8002bd8 <shellGetLine+0x1d8>)
 8002b74:	4620      	mov	r0, r4
 8002b76:	f7ff fe53 	bl	8002820 <chprintf>
        chprintf(chp, "%s", line);
 8002b7a:	4642      	mov	r2, r8
 8002b7c:	4917      	ldr	r1, [pc, #92]	; (8002bdc <shellGetLine+0x1dc>)
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f7ff fe4e 	bl	8002820 <chprintf>
        p = line + len;
 8002b84:	eb08 060b 	add.w	r6, r8, fp
      continue;
 8002b88:	e783      	b.n	8002a92 <shellGetLine+0x92>
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4641      	mov	r1, r8
 8002b8e:	4650      	mov	r0, sl
 8002b90:	f7ff fda6 	bl	80026e0 <get_history>
      if (len > 0) {
 8002b94:	f1b0 0b00 	subs.w	fp, r0, #0
 8002b98:	f77f af7b 	ble.w	8002a92 <shellGetLine+0x92>
        _shell_reset_cur(chp);
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	2246      	movs	r2, #70	; 0x46
 8002ba0:	490c      	ldr	r1, [pc, #48]	; (8002bd4 <shellGetLine+0x1d4>)
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7ff fe3c 	bl	8002820 <chprintf>
        _shell_clr_line(chp);
 8002ba8:	490b      	ldr	r1, [pc, #44]	; (8002bd8 <shellGetLine+0x1d8>)
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7ff fe38 	bl	8002820 <chprintf>
        chprintf(chp, "%s", line);
 8002bb0:	4642      	mov	r2, r8
 8002bb2:	490a      	ldr	r1, [pc, #40]	; (8002bdc <shellGetLine+0x1dc>)
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7ff fe33 	bl	8002820 <chprintf>
        p = line + len;
 8002bba:	eb08 060b 	add.w	r6, r8, fp
      continue;
 8002bbe:	e768      	b.n	8002a92 <shellGetLine+0x92>
      return true;
 8002bc0:	2501      	movs	r5, #1
    }
  }
}
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	b003      	add	sp, #12
 8002bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      escape = true;
 8002bca:	2501      	movs	r5, #1
 8002bcc:	e761      	b.n	8002a92 <shellGetLine+0x92>
        bracket = true;
 8002bce:	462f      	mov	r7, r5
 8002bd0:	e75f      	b.n	8002a92 <shellGetLine+0x92>
 8002bd2:	bf00      	nop
 8002bd4:	0800c580 	.word	0x0800c580
 8002bd8:	0800c58c 	.word	0x0800c58c
 8002bdc:	0800c590 	.word	0x0800c590
 8002be0:	0800c594 	.word	0x0800c594
 8002be4:	0800c40c 	.word	0x0800c40c
	...

08002bf0 <list_commands>:
static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {
 8002bf0:	b538      	push	{r3, r4, r5, lr}
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	460c      	mov	r4, r1
  while (scp->sc_name != NULL) {
 8002bf6:	6822      	ldr	r2, [r4, #0]
 8002bf8:	b12a      	cbz	r2, 8002c06 <list_commands+0x16>
    chprintf(chp, "%s ", scp->sc_name);
 8002bfa:	4903      	ldr	r1, [pc, #12]	; (8002c08 <list_commands+0x18>)
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f7ff fe0f 	bl	8002820 <chprintf>
    scp++;
 8002c02:	3408      	adds	r4, #8
 8002c04:	e7f7      	b.n	8002bf6 <list_commands+0x6>
}
 8002c06:	bd38      	pop	{r3, r4, r5, pc}
 8002c08:	0800c598 	.word	0x0800c598
 8002c0c:	00000000 	.word	0x00000000

08002c10 <lmx2572_reset>:
 * @param[in]  spip               pointer to the @p SPIDriver object.
 * @param[in]  value              LMX2572 register address and value.   
 *
 * @return                        None
 */ 
void lmx2572_reset(SPIDriver * spip){
 8002c10:	b510      	push	{r4, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	4604      	mov	r4, r0
  uint8_t spi_buf[3] = {0,0,0};
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <lmx2572_reset+0x38>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  spi_buf[2] = 0x1E;
 8002c1e:	231e      	movs	r3, #30
 8002c20:	f88d 3006 	strb.w	r3, [sp, #6]
  spi_buf[1] = 0x21;
 8002c24:	2321      	movs	r3, #33	; 0x21
 8002c26:	f88d 3005 	strb.w	r3, [sp, #5]
  spi_buf[0] = 0x00;
  spiSelect(spip);
 8002c2a:	f008 f921 	bl	800ae70 <spiSelect>
  spiStartSend(spip, 3, spi_buf);
 8002c2e:	aa01      	add	r2, sp, #4
 8002c30:	2103      	movs	r1, #3
 8002c32:	4620      	mov	r0, r4
 8002c34:	f008 f8fc 	bl	800ae30 <spiStartSend>
  while((*spip).state != SPI_READY) { }
 8002c38:	7823      	ldrb	r3, [r4, #0]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d1fc      	bne.n	8002c38 <lmx2572_reset+0x28>
  spiUnselect(spip);
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f008 f906 	bl	800ae50 <spiUnselect>

}
 8002c44:	b002      	add	sp, #8
 8002c46:	bd10      	pop	{r4, pc}
 8002c48:	0800b624 	.word	0x0800b624
 8002c4c:	00000000 	.word	0x00000000

08002c50 <lmx2572_write_reg>:
void lmx2572_write_reg(SPIDriver * spip, uint32_t value){
 8002c50:	b510      	push	{r4, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	4604      	mov	r4, r0
  spi_buf[2] = value;
 8002c56:	f88d 1006 	strb.w	r1, [sp, #6]
  spi_buf[1] = value >> 8;
 8002c5a:	0a0b      	lsrs	r3, r1, #8
 8002c5c:	f88d 3005 	strb.w	r3, [sp, #5]
  spi_buf[0] = value >> 16;
 8002c60:	0c09      	lsrs	r1, r1, #16
 8002c62:	f88d 1004 	strb.w	r1, [sp, #4]
  spiSelect(spip);
 8002c66:	f008 f903 	bl	800ae70 <spiSelect>
  spiStartSend(spip, 3, spi_buf);
 8002c6a:	aa01      	add	r2, sp, #4
 8002c6c:	2103      	movs	r1, #3
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f008 f8de 	bl	800ae30 <spiStartSend>
  while((*spip).state != SPI_READY) { }
 8002c74:	7823      	ldrb	r3, [r4, #0]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d1fc      	bne.n	8002c74 <lmx2572_write_reg+0x24>
  spiUnselect(spip);
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f008 f8e8 	bl	800ae50 <spiUnselect>
}
 8002c80:	b002      	add	sp, #8
 8002c82:	bd10      	pop	{r4, pc}
	...

08002c90 <reg>:
static void reg(BaseSequentialStream *sd, int argc, char *argv[]) {
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4605      	mov	r5, r0
 8002c94:	4614      	mov	r4, r2
  if (argc != 1) {
 8002c96:	2901      	cmp	r1, #1
 8002c98:	d119      	bne.n	8002cce <reg+0x3e>
  value = strtoul((argv[0][0] == '0' && argv[0][1] == 'b') ?  argv[0]+2: argv[0], NULL, (argv[0][0] == '0' && argv[0][1] == 'b') ? 2 : 0);
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	2a30      	cmp	r2, #48	; 0x30
 8002ca0:	d025      	beq.n	8002cee <reg+0x5e>
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	2a30      	cmp	r2, #48	; 0x30
 8002ca6:	d029      	beq.n	8002cfc <reg+0x6c>
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2100      	movs	r1, #0
 8002cac:	f008 fb20 	bl	800b2f0 <strtoul>
 8002cb0:	4604      	mov	r4, r0
  lmx2572_write_reg(&SPID1, value);
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	4815      	ldr	r0, [pc, #84]	; (8002d0c <reg+0x7c>)
 8002cb6:	f7ff ffcb 	bl	8002c50 <lmx2572_write_reg>
  lmx2572_write_reg(&SPID2, value);
 8002cba:	4621      	mov	r1, r4
 8002cbc:	4814      	ldr	r0, [pc, #80]	; (8002d10 <reg+0x80>)
 8002cbe:	f7ff ffc7 	bl	8002c50 <lmx2572_write_reg>
  chprintf(sd, "INFO: Updated with value 0x%x.\r\n", value);
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	4913      	ldr	r1, [pc, #76]	; (8002d14 <reg+0x84>)
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	f7ff fdaa 	bl	8002820 <chprintf>
}
 8002ccc:	bd38      	pop	{r3, r4, r5, pc}
    chprintf(sd, "Usage: reg <value> register address concated with its value\r\n");
 8002cce:	4912      	ldr	r1, [pc, #72]	; (8002d18 <reg+0x88>)
 8002cd0:	f7ff fda6 	bl	8002820 <chprintf>
    chprintf(sd, "Example:   reg 12\r\n");
 8002cd4:	4911      	ldr	r1, [pc, #68]	; (8002d1c <reg+0x8c>)
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	f7ff fda2 	bl	8002820 <chprintf>
    chprintf(sd, "           reg 0xCA\r\n");
 8002cdc:	4910      	ldr	r1, [pc, #64]	; (8002d20 <reg+0x90>)
 8002cde:	4628      	mov	r0, r5
 8002ce0:	f7ff fd9e 	bl	8002820 <chprintf>
    chprintf(sd, "           reg 0b10\r\n");
 8002ce4:	490f      	ldr	r1, [pc, #60]	; (8002d24 <reg+0x94>)
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	f7ff fd9a 	bl	8002820 <chprintf>
 8002cec:	e7d5      	b.n	8002c9a <reg+0xa>
  value = strtoul((argv[0][0] == '0' && argv[0][1] == 'b') ?  argv[0]+2: argv[0], NULL, (argv[0][0] == '0' && argv[0][1] == 'b') ? 2 : 0);
 8002cee:	7859      	ldrb	r1, [r3, #1]
 8002cf0:	2962      	cmp	r1, #98	; 0x62
 8002cf2:	d001      	beq.n	8002cf8 <reg+0x68>
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	e7d5      	b.n	8002ca4 <reg+0x14>
 8002cf8:	1c98      	adds	r0, r3, #2
 8002cfa:	e7d3      	b.n	8002ca4 <reg+0x14>
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	2b62      	cmp	r3, #98	; 0x62
 8002d00:	d001      	beq.n	8002d06 <reg+0x76>
 8002d02:	2200      	movs	r2, #0
 8002d04:	e7d1      	b.n	8002caa <reg+0x1a>
 8002d06:	2202      	movs	r2, #2
 8002d08:	e7cf      	b.n	8002caa <reg+0x1a>
 8002d0a:	bf00      	nop
 8002d0c:	20001964 	.word	0x20001964
 8002d10:	20001994 	.word	0x20001994
 8002d14:	0800c620 	.word	0x0800c620
 8002d18:	0800c59c 	.word	0x0800c59c
 8002d1c:	0800c5dc 	.word	0x0800c5dc
 8002d20:	0800c5f0 	.word	0x0800c5f0
 8002d24:	0800c608 	.word	0x0800c608
	...

08002d30 <lmx2572_load_regs>:
void lmx2572_load_regs(SPIDriver * spip, uint32_t lmx2572Regs[]){
 8002d30:	b570      	push	{r4, r5, r6, lr}
 8002d32:	4605      	mov	r5, r0
 8002d34:	460e      	mov	r6, r1
  int i = 0;
 8002d36:	2400      	movs	r4, #0
  while ((lmx2572Regs[i] & 0x00FF0000) != 0) {
 8002d38:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8002d3c:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
 8002d40:	d004      	beq.n	8002d4c <lmx2572_load_regs+0x1c>
    lmx2572_write_reg(spip,lmx2572Regs[i]);
 8002d42:	4628      	mov	r0, r5
 8002d44:	f7ff ff84 	bl	8002c50 <lmx2572_write_reg>
    i++;
 8002d48:	3401      	adds	r4, #1
 8002d4a:	e7f5      	b.n	8002d38 <lmx2572_load_regs+0x8>
  lmx2572_write_reg(spip,lmx2572Regs[i]);
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	f7ff ff7f 	bl	8002c50 <lmx2572_write_reg>
}
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d60 <change>:
static void change(BaseSequentialStream *sd, int argc, char *argv[]) {
 8002d60:	b510      	push	{r4, lr}
 8002d62:	4604      	mov	r4, r0
  shell_counter = shell_counter + 1;
 8002d64:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <change+0xa8>)
 8002d66:	6813      	ldr	r3, [r2, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]
  if(shell_counter > 6)
 8002d6c:	2b06      	cmp	r3, #6
 8002d6e:	dd02      	ble.n	8002d76 <change+0x16>
    shell_counter = 0;
 8002d70:	4613      	mov	r3, r2
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
  switch(shell_counter){
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <change+0xa8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d83a      	bhi.n	8002df4 <change+0x94>
 8002d7e:	e8df f003 	tbb	[pc, r3]
 8002d82:	0c03      	.short	0x0c03
 8002d84:	30271e15 	.word	0x30271e15
    lmx2572_load_regs(&SPID1, reg_values_430);
 8002d88:	4920      	ldr	r1, [pc, #128]	; (8002e0c <change+0xac>)
 8002d8a:	4821      	ldr	r0, [pc, #132]	; (8002e10 <change+0xb0>)
 8002d8c:	f7ff ffd0 	bl	8002d30 <lmx2572_load_regs>
    chprintf(sd, "\r\n Done Loading LMX2572 430MHz reg values\r\n");
 8002d90:	4920      	ldr	r1, [pc, #128]	; (8002e14 <change+0xb4>)
 8002d92:	4620      	mov	r0, r4
 8002d94:	f7ff fd44 	bl	8002820 <chprintf>
}  
 8002d98:	bd10      	pop	{r4, pc}
    lmx2572_load_regs(&SPID1, reg_values_51);
 8002d9a:	491f      	ldr	r1, [pc, #124]	; (8002e18 <change+0xb8>)
 8002d9c:	481c      	ldr	r0, [pc, #112]	; (8002e10 <change+0xb0>)
 8002d9e:	f7ff ffc7 	bl	8002d30 <lmx2572_load_regs>
    chprintf(sd, "\r\n Done Loading LMX2572 51.5MHz, 3296MHz  reg values\r\n");
 8002da2:	491e      	ldr	r1, [pc, #120]	; (8002e1c <change+0xbc>)
 8002da4:	4620      	mov	r0, r4
 8002da6:	f7ff fd3b 	bl	8002820 <chprintf>
    break;
 8002daa:	e7f5      	b.n	8002d98 <change+0x38>
    lmx2572_load_regs(&SPID1, reg_values_330);
 8002dac:	491c      	ldr	r1, [pc, #112]	; (8002e20 <change+0xc0>)
 8002dae:	4818      	ldr	r0, [pc, #96]	; (8002e10 <change+0xb0>)
 8002db0:	f7ff ffbe 	bl	8002d30 <lmx2572_load_regs>
    chprintf(sd, "\r\n Done Loading LMX2572 330MHz, 5280MHz reg values\r\n");
 8002db4:	491b      	ldr	r1, [pc, #108]	; (8002e24 <change+0xc4>)
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7ff fd32 	bl	8002820 <chprintf>
    break;
 8002dbc:	e7ec      	b.n	8002d98 <change+0x38>
    lmx2572_load_regs(&SPID1, reg_values_1275);
 8002dbe:	491a      	ldr	r1, [pc, #104]	; (8002e28 <change+0xc8>)
 8002dc0:	4813      	ldr	r0, [pc, #76]	; (8002e10 <change+0xb0>)
 8002dc2:	f7ff ffb5 	bl	8002d30 <lmx2572_load_regs>
    chprintf(sd, "\r\n Done Loading LMX2572 1275MHz, 5100MHz reg values\r\n");
 8002dc6:	4919      	ldr	r1, [pc, #100]	; (8002e2c <change+0xcc>)
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f7ff fd29 	bl	8002820 <chprintf>
    break;
 8002dce:	e7e3      	b.n	8002d98 <change+0x38>
    lmx2572_load_regs(&SPID1, reg_values_3100);
 8002dd0:	4917      	ldr	r1, [pc, #92]	; (8002e30 <change+0xd0>)
 8002dd2:	480f      	ldr	r0, [pc, #60]	; (8002e10 <change+0xb0>)
 8002dd4:	f7ff ffac 	bl	8002d30 <lmx2572_load_regs>
    chprintf(sd, "\r\n Done Loading LMX2572 3100MHz, 6200MHz reg values\r\n");
 8002dd8:	4916      	ldr	r1, [pc, #88]	; (8002e34 <change+0xd4>)
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7ff fd20 	bl	8002820 <chprintf>
    break;
 8002de0:	e7da      	b.n	8002d98 <change+0x38>
    lmx2572_load_regs(&SPID1, reg_values_4100);
 8002de2:	4915      	ldr	r1, [pc, #84]	; (8002e38 <change+0xd8>)
 8002de4:	480a      	ldr	r0, [pc, #40]	; (8002e10 <change+0xb0>)
 8002de6:	f7ff ffa3 	bl	8002d30 <lmx2572_load_regs>
    chprintf(sd, "\r\n Done Loading LMX2572 4100MHz VCO reg values\r\n");
 8002dea:	4914      	ldr	r1, [pc, #80]	; (8002e3c <change+0xdc>)
 8002dec:	4620      	mov	r0, r4
 8002dee:	f7ff fd17 	bl	8002820 <chprintf>
    break;
 8002df2:	e7d1      	b.n	8002d98 <change+0x38>
    lmx2572_load_regs(&SPID1, reg_values_430);
 8002df4:	4905      	ldr	r1, [pc, #20]	; (8002e0c <change+0xac>)
 8002df6:	4806      	ldr	r0, [pc, #24]	; (8002e10 <change+0xb0>)
 8002df8:	f7ff ff9a 	bl	8002d30 <lmx2572_load_regs>
    chprintf(sd, "\r\n Done Loading LMX2572 430MHz reg values\r\n");
 8002dfc:	4905      	ldr	r1, [pc, #20]	; (8002e14 <change+0xb4>)
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f7ff fd0e 	bl	8002820 <chprintf>
    break;    
 8002e04:	e7c8      	b.n	8002d98 <change+0x38>
 8002e06:	bf00      	nop
 8002e08:	20001d38 	.word	0x20001d38
 8002e0c:	200010bc 	.word	0x200010bc
 8002e10:	20001964 	.word	0x20001964
 8002e14:	0800c644 	.word	0x0800c644
 8002e18:	200012b4 	.word	0x200012b4
 8002e1c:	0800c670 	.word	0x0800c670
 8002e20:	20000ccc 	.word	0x20000ccc
 8002e24:	0800c6a8 	.word	0x0800c6a8
 8002e28:	200008dc 	.word	0x200008dc
 8002e2c:	0800c6e0 	.word	0x0800c6e0
 8002e30:	20000ad4 	.word	0x20000ad4
 8002e34:	0800c718 	.word	0x0800c718
 8002e38:	20000ec4 	.word	0x20000ec4
 8002e3c:	0800c750 	.word	0x0800c750

08002e40 <dyn_list_find>:
static dyn_element_t *dyn_list_find(const char *name, dyn_list_t *dlp) {
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	4606      	mov	r6, r0
 8002e44:	460d      	mov	r5, r1
  dyn_element_t *p = dlp->next;
 8002e46:	680c      	ldr	r4, [r1, #0]
  while (p != (dyn_element_t *)dlp) {
 8002e48:	42ac      	cmp	r4, r5
 8002e4a:	d007      	beq.n	8002e5c <dyn_list_find+0x1c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	4631      	mov	r1, r6
 8002e50:	18a0      	adds	r0, r4, r2
 8002e52:	f008 fb41 	bl	800b4d8 <strncmp>
 8002e56:	b110      	cbz	r0, 8002e5e <dyn_list_find+0x1e>
    p = p->next;
 8002e58:	6824      	ldr	r4, [r4, #0]
 8002e5a:	e7f5      	b.n	8002e48 <dyn_list_find+0x8>
  return NULL;
 8002e5c:	2400      	movs	r4, #0
}
 8002e5e:	4620      	mov	r0, r4
 8002e60:	bd70      	pop	{r4, r5, r6, pc}
 8002e62:	bf00      	nop
	...

08002e70 <dyn_find_object>:
#endif /* CH_FACTORY_REQUIRES_POOLS */

static dyn_element_t *dyn_find_object(const char *name, dyn_list_t *dlp) {
 8002e70:	b508      	push	{r3, lr}
  dyn_element_t *dep;

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
 8002e72:	f7ff ffe5 	bl	8002e40 <dyn_list_find>
  if (dep != NULL) {
 8002e76:	4603      	mov	r3, r0
 8002e78:	b110      	cbz	r0, 8002e80 <dyn_find_object+0x10>
    /* Increasing references counter.*/
    dep->refs++;
 8002e7a:	6842      	ldr	r2, [r0, #4]
 8002e7c:	3201      	adds	r2, #1
 8002e7e:	6042      	str	r2, [r0, #4]
  }

  return dep;
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd08      	pop	{r3, pc}
	...

08002e90 <dyn_create_object_pool>:
                                             memory_pool_t *mp) {
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	4605      	mov	r5, r0
 8002e94:	460e      	mov	r6, r1
 8002e96:	4614      	mov	r4, r2
  dep = dyn_list_find(name, dlp);
 8002e98:	f7ff ffd2 	bl	8002e40 <dyn_list_find>
  if (dep != NULL) {
 8002e9c:	b978      	cbnz	r0, 8002ebe <dyn_create_object_pool+0x2e>
  dep = (dyn_element_t *)chPoolAlloc(mp);
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7fe fc8e 	bl	80017c0 <chPoolAlloc>
  if (dep == NULL) {
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	b158      	cbz	r0, 8002ec0 <dyn_create_object_pool+0x30>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	4629      	mov	r1, r5
 8002eac:	4410      	add	r0, r2
 8002eae:	f008 fb51 	bl	800b554 <strncpy>
  dep->refs = (ucnt_t)1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	6063      	str	r3, [r4, #4]
  dep->next = dlp->next;
 8002eb6:	6833      	ldr	r3, [r6, #0]
 8002eb8:	6023      	str	r3, [r4, #0]
  dlp->next = (dyn_element_t *)dep;
 8002eba:	6034      	str	r4, [r6, #0]
  return dep;
 8002ebc:	e000      	b.n	8002ec0 <dyn_create_object_pool+0x30>
    return NULL;
 8002ebe:	2400      	movs	r4, #0
}
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ed0 <chThdCreateFromMemoryPool>:
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
                                    tprio_t prio, tfunc_t pf, void *arg) {
 8002ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	4688      	mov	r8, r1
 8002eda:	4617      	mov	r7, r2
 8002edc:	461e      	mov	r6, r3
  thread_t *tp;
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
 8002ede:	f7fe fc6f 	bl	80017c0 <chPoolAlloc>
  if (wsp == NULL) {
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	b1d0      	cbz	r0, 8002f1c <chThdCreateFromMemoryPool+0x4c>
    return NULL;
  }

  thread_descriptor_t td = {
 8002ee6:	f8cd 8000 	str.w	r8, [sp]
 8002eea:	9001      	str	r0, [sp, #4]
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 8002eec:	6868      	ldr	r0, [r5, #4]
 8002eee:	4420      	add	r0, r4
  thread_descriptor_t td = {
 8002ef0:	9002      	str	r0, [sp, #8]
 8002ef2:	9703      	str	r7, [sp, #12]
 8002ef4:	9604      	str	r6, [sp, #16]
 8002ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ef8:	9305      	str	r3, [sp, #20]
 8002efa:	2320      	movs	r3, #32
 8002efc:	f383 8811 	msr	BASEPRI, r3
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 8002f00:	4668      	mov	r0, sp
 8002f02:	f007 fafd 	bl	800a500 <chThdCreateSuspendedI>
 8002f06:	4604      	mov	r4, r0
  tp->flags = CH_FLAG_MODE_MPOOL;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 8002f0e:	6405      	str	r5, [r0, #64]	; 0x40
  chSchWakeupS(tp, MSG_OK);
 8002f10:	2100      	movs	r1, #0
 8002f12:	f007 fb95 	bl	800a640 <chSchWakeupS>
 8002f16:	2300      	movs	r3, #0
 8002f18:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	b006      	add	sp, #24
 8002f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002f30 <chMsgSend>:
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8002f30:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <chMsgSend+0x3c>)
 8002f34:	699c      	ldr	r4, [r3, #24]
 8002f36:	2320      	movs	r3, #32
 8002f38:	f383 8811 	msr	BASEPRI, r3
  ctp->u.sentmsg = msg;
 8002f3c:	6261      	str	r1, [r4, #36]	; 0x24
  msg_insert(ctp, &tp->msgqueue);
 8002f3e:	f100 032c 	add.w	r3, r0, #44	; 0x2c
  tp->queue.next             = (thread_t *)tqp;
 8002f42:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = tqp->prev;
 8002f44:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002f46:	6063      	str	r3, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8002f48:	601c      	str	r4, [r3, #0]
  tqp->prev                  = tp;
 8002f4a:	6304      	str	r4, [r0, #48]	; 0x30
  if (tp->state == CH_STATE_WTMSG) {
 8002f4c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002f50:	2b0e      	cmp	r3, #14
 8002f52:	d007      	beq.n	8002f64 <chMsgSend+0x34>
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 8002f54:	200c      	movs	r0, #12
 8002f56:	f007 fb2b 	bl	800a5b0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 8002f5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f383 8811 	msr	BASEPRI, r3
}
 8002f62:	bd10      	pop	{r4, pc}
    (void) chSchReadyI(tp);
 8002f64:	f007 fb3c 	bl	800a5e0 <chSchReadyI>
 8002f68:	e7f4      	b.n	8002f54 <chMsgSend+0x24>
 8002f6a:	bf00      	nop
 8002f6c:	20001a18 	.word	0x20001a18

08002f70 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 8002f70:	b510      	push	{r4, lr}
 8002f72:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 8002f74:	2141      	movs	r1, #65	; 0x41
 8002f76:	f7ff ffdb 	bl	8002f30 <chMsgSend>
  chMsgSend(p, 'B');
 8002f7a:	2142      	movs	r1, #66	; 0x42
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7ff ffd7 	bl	8002f30 <chMsgSend>
  chMsgSend(p, 'C');
 8002f82:	2143      	movs	r1, #67	; 0x43
 8002f84:	4620      	mov	r0, r4
 8002f86:	f7ff ffd3 	bl	8002f30 <chMsgSend>
  chMsgSend(p, 'D');
 8002f8a:	2144      	movs	r1, #68	; 0x44
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7ff ffcf 	bl	8002f30 <chMsgSend>
}
 8002f92:	bd10      	pop	{r4, pc}
	...

08002fa0 <chDelegateCallVeneer>:
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 8002fa0:	b40e      	push	{r1, r2, r3}
 8002fa2:	b500      	push	{lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	ab05      	add	r3, sp, #20
 8002fa8:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(args, veneer);
 8002fac:	9303      	str	r3, [sp, #12]
  cm.veneer = veneer;
 8002fae:	9201      	str	r2, [sp, #4]
  cm.argsp  = &args;
 8002fb0:	ab03      	add	r3, sp, #12
 8002fb2:	9302      	str	r3, [sp, #8]
  msg = chMsgSend(tp, (msg_t)&cm);
 8002fb4:	a901      	add	r1, sp, #4
 8002fb6:	f7ff ffbb 	bl	8002f30 <chMsgSend>
}
 8002fba:	b004      	add	sp, #16
 8002fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fc0:	b003      	add	sp, #12
 8002fc2:	4770      	bx	lr
	...

08002fd0 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8002fd0:	b508      	push	{r3, lr}
  tp->epending |= events;
 8002fd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002fd4:	4319      	orrs	r1, r3
 8002fd6:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002fd8:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002fdc:	2b0a      	cmp	r3, #10
 8002fde:	d002      	beq.n	8002fe6 <chEvtSignalI+0x16>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8002fe0:	2b0b      	cmp	r3, #11
 8002fe2:	d008      	beq.n	8002ff6 <chEvtSignalI+0x26>
}
 8002fe4:	bd08      	pop	{r3, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8002fe6:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002fe8:	4211      	tst	r1, r2
 8002fea:	d0f9      	beq.n	8002fe0 <chEvtSignalI+0x10>
    tp->u.rdymsg = MSG_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002ff0:	f007 faf6 	bl	800a5e0 <chSchReadyI>
 8002ff4:	e7f6      	b.n	8002fe4 <chEvtSignalI+0x14>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8002ff6:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8002ff8:	438b      	bics	r3, r1
 8002ffa:	d1f3      	bne.n	8002fe4 <chEvtSignalI+0x14>
 8002ffc:	e7f6      	b.n	8002fec <chEvtSignalI+0x1c>
 8002ffe:	bf00      	nop

08003000 <chEvtSignal>:
void chEvtSignal(thread_t *tp, eventmask_t events) {
 8003000:	b508      	push	{r3, lr}
 8003002:	2320      	movs	r3, #32
 8003004:	f383 8811 	msr	BASEPRI, r3
  chEvtSignalI(tp, events);
 8003008:	f7ff ffe2 	bl	8002fd0 <chEvtSignalI>
  chSchRescheduleS();
 800300c:	f007 fac0 	bl	800a590 <chSchRescheduleS>
 8003010:	2300      	movs	r3, #0
 8003012:	f383 8811 	msr	BASEPRI, r3
}
 8003016:	bd08      	pop	{r3, pc}
	...

08003020 <chCondBroadcastI>:
 *
 * @param[in] cp        pointer to the @p condition_variable_t structure
 *
 * @iclass
 */
void chCondBroadcastI(condition_variable_t *cp) {
 8003020:	b510      	push	{r4, lr}
 8003022:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003024:	6820      	ldr	r0, [r4, #0]
  chDbgCheck(cp != NULL);

  /* Empties the condition variable queue and inserts all the threads into the
     ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
     order to make a chCondBroadcast() detectable from a chCondSignal().*/
  while (queue_notempty(&cp->queue)) {
 8003026:	4284      	cmp	r4, r0
 8003028:	d008      	beq.n	800303c <chCondBroadcastI+0x1c>
  tqp->next             = tp->queue.next;
 800302a:	6803      	ldr	r3, [r0, #0]
 800302c:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800302e:	605c      	str	r4, [r3, #4]
    chSchReadyI(queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8003030:	f007 fad6 	bl	800a5e0 <chSchReadyI>
 8003034:	f06f 0301 	mvn.w	r3, #1
 8003038:	6243      	str	r3, [r0, #36]	; 0x24
 800303a:	e7f3      	b.n	8003024 <chCondBroadcastI+0x4>
  }
}
 800303c:	bd10      	pop	{r4, pc}
 800303e:	bf00      	nop

08003040 <chCondBroadcast>:
void chCondBroadcast(condition_variable_t *cp) {
 8003040:	b508      	push	{r3, lr}
 8003042:	2320      	movs	r3, #32
 8003044:	f383 8811 	msr	BASEPRI, r3
  chCondBroadcastI(cp);
 8003048:	f7ff ffea 	bl	8003020 <chCondBroadcastI>
  chSchRescheduleS();
 800304c:	f007 faa0 	bl	800a590 <chSchRescheduleS>
 8003050:	2300      	movs	r3, #0
 8003052:	f383 8811 	msr	BASEPRI, r3
}
 8003056:	bd08      	pop	{r3, pc}
	...

08003060 <chCondSignalI>:
void chCondSignalI(condition_variable_t *cp) {
 8003060:	b508      	push	{r3, lr}
 8003062:	4603      	mov	r3, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003064:	6800      	ldr	r0, [r0, #0]
  if (queue_notempty(&cp->queue)) {
 8003066:	4283      	cmp	r3, r0
 8003068:	d006      	beq.n	8003078 <chCondSignalI+0x18>
  tqp->next             = tp->queue.next;
 800306a:	6802      	ldr	r2, [r0, #0]
 800306c:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800306e:	6053      	str	r3, [r2, #4]
    tp->u.rdymsg = MSG_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8003074:	f007 fab4 	bl	800a5e0 <chSchReadyI>
}
 8003078:	bd08      	pop	{r3, pc}
 800307a:	bf00      	nop
 800307c:	0000      	movs	r0, r0
	...

08003080 <chMtxUnlockAll>:
 *          this function does not have any overhead related to the priority
 *          inheritance mechanism.
 *
 * @api
 */
void chMtxUnlockAll(void) {
 8003080:	b510      	push	{r4, lr}
  thread_t *ctp = currp;
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <chMtxUnlockAll+0x4c>)
 8003084:	699c      	ldr	r4, [r3, #24]
 8003086:	2320      	movs	r3, #32
 8003088:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if (ctp->mtxlist != NULL) {
 800308c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800308e:	b95b      	cbnz	r3, 80030a8 <chMtxUnlockAll+0x28>
 8003090:	e017      	b.n	80030c2 <chMtxUnlockAll+0x42>
  tqp->next             = tp->queue.next;
 8003092:	6802      	ldr	r2, [r0, #0]
 8003094:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003096:	6053      	str	r3, [r2, #4]
      if (chMtxQueueNotEmptyS(mp)) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)1;
#endif
        thread_t *tp = queue_fifo_remove(&mp->queue);
        mp->owner = tp;
 8003098:	6098      	str	r0, [r3, #8]
        mp->next = tp->mtxlist;
 800309a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800309c:	60da      	str	r2, [r3, #12]
        tp->mtxlist = mp;
 800309e:	6383      	str	r3, [r0, #56]	; 0x38
        (void) chSchReadyI(tp);
 80030a0:	f007 fa9e 	bl	800a5e0 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
      }
    } while (ctp->mtxlist != NULL);
 80030a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030a6:	b143      	cbz	r3, 80030ba <chMtxUnlockAll+0x3a>
      mutex_t *mp = ctp->mtxlist;
 80030a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      ctp->mtxlist = mp->next;
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	63a2      	str	r2, [r4, #56]	; 0x38
  return (bool)(tqp->next != (const thread_t *)tqp);
 80030ae:	6818      	ldr	r0, [r3, #0]
      if (chMtxQueueNotEmptyS(mp)) {
 80030b0:	4283      	cmp	r3, r0
 80030b2:	d1ee      	bne.n	8003092 <chMtxUnlockAll+0x12>
        mp->owner = NULL;
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	e7f4      	b.n	80030a4 <chMtxUnlockAll+0x24>
    ctp->prio = ctp->realprio;
 80030ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030bc:	60a3      	str	r3, [r4, #8]
    chSchRescheduleS();
 80030be:	f007 fa67 	bl	800a590 <chSchRescheduleS>
 80030c2:	2300      	movs	r3, #0
 80030c4:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();
}
 80030c8:	bd10      	pop	{r4, pc}
 80030ca:	bf00      	nop
 80030cc:	20001a18 	.word	0x20001a18

080030d0 <chMtxUnlockS>:
void chMtxUnlockS(mutex_t *mp) {
 80030d0:	b510      	push	{r4, lr}
 80030d2:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <chMtxUnlockS+0x48>)
 80030d6:	699c      	ldr	r4, [r3, #24]
    ctp->mtxlist = mp->next;
 80030d8:	68c3      	ldr	r3, [r0, #12]
 80030da:	63a3      	str	r3, [r4, #56]	; 0x38
 80030dc:	6802      	ldr	r2, [r0, #0]
    if (chMtxQueueNotEmptyS(mp)) {
 80030de:	4282      	cmp	r2, r0
 80030e0:	d017      	beq.n	8003112 <chMtxUnlockS+0x42>
      tprio_t newprio = ctp->realprio;
 80030e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      while (lmp != NULL) {
 80030e4:	e000      	b.n	80030e8 <chMtxUnlockS+0x18>
        lmp = lmp->next;
 80030e6:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 80030e8:	b13b      	cbz	r3, 80030fa <chMtxUnlockS+0x2a>
 80030ea:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d0fa      	beq.n	80030e6 <chMtxUnlockS+0x16>
            (lmp->queue.next->prio > newprio)) {
 80030f0:	6892      	ldr	r2, [r2, #8]
        if (chMtxQueueNotEmptyS(lmp) &&
 80030f2:	4290      	cmp	r0, r2
 80030f4:	d2f7      	bcs.n	80030e6 <chMtxUnlockS+0x16>
          newprio = lmp->queue.next->prio;
 80030f6:	4610      	mov	r0, r2
 80030f8:	e7f5      	b.n	80030e6 <chMtxUnlockS+0x16>
      ctp->prio = newprio;
 80030fa:	60a0      	str	r0, [r4, #8]
  thread_t *tp = tqp->next;
 80030fc:	6808      	ldr	r0, [r1, #0]
  tqp->next             = tp->queue.next;
 80030fe:	6803      	ldr	r3, [r0, #0]
 8003100:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003102:	6059      	str	r1, [r3, #4]
      mp->owner = tp;
 8003104:	6088      	str	r0, [r1, #8]
      mp->next = tp->mtxlist;
 8003106:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003108:	60cb      	str	r3, [r1, #12]
      tp->mtxlist = mp;
 800310a:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 800310c:	f007 fa68 	bl	800a5e0 <chSchReadyI>
}
 8003110:	bd10      	pop	{r4, pc}
      mp->owner = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	6083      	str	r3, [r0, #8]
 8003116:	e7fb      	b.n	8003110 <chMtxUnlockS+0x40>
 8003118:	20001a18 	.word	0x20001a18
 800311c:	00000000 	.word	0x00000000

08003120 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 8003120:	b510      	push	{r4, lr}
 8003122:	4601      	mov	r1, r0
  thread_t *ctp = currp;
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <chMtxUnlock+0x58>)
 8003126:	699c      	ldr	r4, [r3, #24]
 8003128:	2320      	movs	r3, #32
 800312a:	f383 8811 	msr	BASEPRI, r3
    ctp->mtxlist = mp->next;
 800312e:	68c3      	ldr	r3, [r0, #12]
 8003130:	63a3      	str	r3, [r4, #56]	; 0x38
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003132:	6802      	ldr	r2, [r0, #0]
    if (chMtxQueueNotEmptyS(mp)) {
 8003134:	4282      	cmp	r2, r0
 8003136:	d01c      	beq.n	8003172 <chMtxUnlock+0x52>
      tprio_t newprio = ctp->realprio;
 8003138:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      while (lmp != NULL) {
 800313a:	e000      	b.n	800313e <chMtxUnlock+0x1e>
        lmp = lmp->next;
 800313c:	68db      	ldr	r3, [r3, #12]
      while (lmp != NULL) {
 800313e:	b13b      	cbz	r3, 8003150 <chMtxUnlock+0x30>
 8003140:	681a      	ldr	r2, [r3, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8003142:	4293      	cmp	r3, r2
 8003144:	d0fa      	beq.n	800313c <chMtxUnlock+0x1c>
            (lmp->queue.next->prio > newprio)) {
 8003146:	6892      	ldr	r2, [r2, #8]
        if (chMtxQueueNotEmptyS(lmp) &&
 8003148:	4290      	cmp	r0, r2
 800314a:	d2f7      	bcs.n	800313c <chMtxUnlock+0x1c>
          newprio = lmp->queue.next->prio;
 800314c:	4610      	mov	r0, r2
 800314e:	e7f5      	b.n	800313c <chMtxUnlock+0x1c>
      ctp->prio = newprio;
 8003150:	60a0      	str	r0, [r4, #8]
  thread_t *tp = tqp->next;
 8003152:	6808      	ldr	r0, [r1, #0]
  tqp->next             = tp->queue.next;
 8003154:	6803      	ldr	r3, [r0, #0]
 8003156:	600b      	str	r3, [r1, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003158:	6059      	str	r1, [r3, #4]
      mp->owner = tp;
 800315a:	6088      	str	r0, [r1, #8]
      mp->next = tp->mtxlist;
 800315c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800315e:	60cb      	str	r3, [r1, #12]
      tp->mtxlist = mp;
 8003160:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 8003162:	f007 fa3d 	bl	800a5e0 <chSchReadyI>
      chSchRescheduleS();
 8003166:	f007 fa13 	bl	800a590 <chSchRescheduleS>
 800316a:	2300      	movs	r3, #0
 800316c:	f383 8811 	msr	BASEPRI, r3
}
 8003170:	bd10      	pop	{r4, pc}
      mp->owner = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	6083      	str	r3, [r0, #8]
 8003176:	e7f8      	b.n	800316a <chMtxUnlock+0x4a>
 8003178:	20001a18 	.word	0x20001a18
 800317c:	00000000 	.word	0x00000000

08003180 <rt_test_007_005_execute>:

static void rt_test_007_005_setup(void) {
  chMtxObjectInit(&m1);
}

static void rt_test_007_005_execute(void) {
 8003180:	b538      	push	{r3, r4, r5, lr}
  return ch.rlist.current;
 8003182:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <rt_test_007_005_execute+0x100>)
 8003184:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8003186:	689c      	ldr	r4, [r3, #8]
  }
  test_end_step(1);

  /* [7.5.2] Locking the mutex first time, it must be possible because
     it is not owned.*/
  test_set_step(2);
 8003188:	4b3e      	ldr	r3, [pc, #248]	; (8003284 <rt_test_007_005_execute+0x104>)
 800318a:	2202      	movs	r2, #2
 800318c:	601a      	str	r2, [r3, #0]
  {
    b = chMtxTryLock(&m1);
 800318e:	483e      	ldr	r0, [pc, #248]	; (8003288 <rt_test_007_005_execute+0x108>)
 8003190:	f7fe fd96 	bl	8001cc0 <chMtxTryLock>
    test_assert(b, "already locked");
 8003194:	493d      	ldr	r1, [pc, #244]	; (800328c <rt_test_007_005_execute+0x10c>)
 8003196:	f7fe f82b 	bl	80011f0 <_test_assert>
 800319a:	b100      	cbz	r0, 800319e <rt_test_007_005_execute+0x1e>
  test_set_step(7);
  {
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
  }
  test_end_step(7);
}
 800319c:	bd38      	pop	{r3, r4, r5, pc}
  test_set_step(3);
 800319e:	4b39      	ldr	r3, [pc, #228]	; (8003284 <rt_test_007_005_execute+0x104>)
 80031a0:	2203      	movs	r2, #3
 80031a2:	601a      	str	r2, [r3, #0]
    b = chMtxTryLock(&m1);
 80031a4:	4838      	ldr	r0, [pc, #224]	; (8003288 <rt_test_007_005_execute+0x108>)
 80031a6:	f7fe fd8b 	bl	8001cc0 <chMtxTryLock>
    test_assert(!b, "not locked");
 80031aa:	f080 0001 	eor.w	r0, r0, #1
 80031ae:	4938      	ldr	r1, [pc, #224]	; (8003290 <rt_test_007_005_execute+0x110>)
 80031b0:	b2c0      	uxtb	r0, r0
 80031b2:	f7fe f81d 	bl	80011f0 <_test_assert>
 80031b6:	2800      	cmp	r0, #0
 80031b8:	d1f0      	bne.n	800319c <rt_test_007_005_execute+0x1c>
  test_set_step(4);
 80031ba:	4b32      	ldr	r3, [pc, #200]	; (8003284 <rt_test_007_005_execute+0x104>)
 80031bc:	2204      	movs	r2, #4
 80031be:	601a      	str	r2, [r3, #0]
    chMtxUnlock(&m1);
 80031c0:	4d31      	ldr	r5, [pc, #196]	; (8003288 <rt_test_007_005_execute+0x108>)
 80031c2:	4628      	mov	r0, r5
 80031c4:	f7ff ffac 	bl	8003120 <chMtxUnlock>
    test_assert(m1.owner == NULL, "still owned");
 80031c8:	68a8      	ldr	r0, [r5, #8]
 80031ca:	4932      	ldr	r1, [pc, #200]	; (8003294 <rt_test_007_005_execute+0x114>)
 80031cc:	fab0 f080 	clz	r0, r0
 80031d0:	0940      	lsrs	r0, r0, #5
 80031d2:	f7fe f80d 	bl	80011f0 <_test_assert>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d1e0      	bne.n	800319c <rt_test_007_005_execute+0x1c>
  return (bool)(tqp->next == (const thread_t *)tqp);
 80031da:	6828      	ldr	r0, [r5, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 80031dc:	492e      	ldr	r1, [pc, #184]	; (8003298 <rt_test_007_005_execute+0x118>)
 80031de:	42a8      	cmp	r0, r5
 80031e0:	bf14      	ite	ne
 80031e2:	2000      	movne	r0, #0
 80031e4:	2001      	moveq	r0, #1
 80031e6:	f7fe f803 	bl	80011f0 <_test_assert>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d1d6      	bne.n	800319c <rt_test_007_005_execute+0x1c>
  test_set_step(5);
 80031ee:	4b25      	ldr	r3, [pc, #148]	; (8003284 <rt_test_007_005_execute+0x104>)
 80031f0:	2205      	movs	r2, #5
 80031f2:	601a      	str	r2, [r3, #0]
  return ch.rlist.current;
 80031f4:	4b22      	ldr	r3, [pc, #136]	; (8003280 <rt_test_007_005_execute+0x100>)
 80031f6:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80031f8:	6898      	ldr	r0, [r3, #8]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80031fa:	4928      	ldr	r1, [pc, #160]	; (800329c <rt_test_007_005_execute+0x11c>)
 80031fc:	4284      	cmp	r4, r0
 80031fe:	bf14      	ite	ne
 8003200:	2000      	movne	r0, #0
 8003202:	2001      	moveq	r0, #1
 8003204:	f7fd fff4 	bl	80011f0 <_test_assert>
 8003208:	2800      	cmp	r0, #0
 800320a:	d1c7      	bne.n	800319c <rt_test_007_005_execute+0x1c>
  test_set_step(6);
 800320c:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <rt_test_007_005_execute+0x104>)
 800320e:	2206      	movs	r2, #6
 8003210:	601a      	str	r2, [r3, #0]
    b = chMtxTryLock(&m1);
 8003212:	4628      	mov	r0, r5
 8003214:	f7fe fd54 	bl	8001cc0 <chMtxTryLock>
    test_assert(b, "already locked");
 8003218:	491c      	ldr	r1, [pc, #112]	; (800328c <rt_test_007_005_execute+0x10c>)
 800321a:	f7fd ffe9 	bl	80011f0 <_test_assert>
 800321e:	2800      	cmp	r0, #0
 8003220:	d1bc      	bne.n	800319c <rt_test_007_005_execute+0x1c>
    b = chMtxTryLock(&m1);
 8003222:	4628      	mov	r0, r5
 8003224:	f7fe fd4c 	bl	8001cc0 <chMtxTryLock>
    test_assert(!b, "not locked");
 8003228:	f080 0001 	eor.w	r0, r0, #1
 800322c:	4918      	ldr	r1, [pc, #96]	; (8003290 <rt_test_007_005_execute+0x110>)
 800322e:	b2c0      	uxtb	r0, r0
 8003230:	f7fd ffde 	bl	80011f0 <_test_assert>
 8003234:	2800      	cmp	r0, #0
 8003236:	d1b1      	bne.n	800319c <rt_test_007_005_execute+0x1c>
    chMtxUnlockAll();
 8003238:	f7ff ff22 	bl	8003080 <chMtxUnlockAll>
    test_assert(m1.owner == NULL, "still owned");
 800323c:	68a8      	ldr	r0, [r5, #8]
 800323e:	4915      	ldr	r1, [pc, #84]	; (8003294 <rt_test_007_005_execute+0x114>)
 8003240:	fab0 f080 	clz	r0, r0
 8003244:	0940      	lsrs	r0, r0, #5
 8003246:	f7fd ffd3 	bl	80011f0 <_test_assert>
 800324a:	2800      	cmp	r0, #0
 800324c:	d1a6      	bne.n	800319c <rt_test_007_005_execute+0x1c>
 800324e:	6828      	ldr	r0, [r5, #0]
    test_assert(queue_isempty(&m1.queue), "queue not empty");
 8003250:	4911      	ldr	r1, [pc, #68]	; (8003298 <rt_test_007_005_execute+0x118>)
 8003252:	42a8      	cmp	r0, r5
 8003254:	bf14      	ite	ne
 8003256:	2000      	movne	r0, #0
 8003258:	2001      	moveq	r0, #1
 800325a:	f7fd ffc9 	bl	80011f0 <_test_assert>
 800325e:	2800      	cmp	r0, #0
 8003260:	d19c      	bne.n	800319c <rt_test_007_005_execute+0x1c>
  test_set_step(7);
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <rt_test_007_005_execute+0x104>)
 8003264:	2207      	movs	r2, #7
 8003266:	601a      	str	r2, [r3, #0]
  return ch.rlist.current;
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <rt_test_007_005_execute+0x100>)
 800326a:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 800326c:	6898      	ldr	r0, [r3, #8]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 800326e:	490b      	ldr	r1, [pc, #44]	; (800329c <rt_test_007_005_execute+0x11c>)
 8003270:	4284      	cmp	r4, r0
 8003272:	bf14      	ite	ne
 8003274:	2000      	movne	r0, #0
 8003276:	2001      	moveq	r0, #1
 8003278:	f7fd ffba 	bl	80011f0 <_test_assert>
  test_end_step(7);
 800327c:	e78e      	b.n	800319c <rt_test_007_005_execute+0x1c>
 800327e:	bf00      	nop
 8003280:	20001a18 	.word	0x20001a18
 8003284:	20002454 	.word	0x20002454
 8003288:	2000082c 	.word	0x2000082c
 800328c:	0800c784 	.word	0x0800c784
 8003290:	0800c794 	.word	0x0800c794
 8003294:	0800c7a0 	.word	0x0800c7a0
 8003298:	0800c7ac 	.word	0x0800c7ac
 800329c:	0800c7bc 	.word	0x0800c7bc

080032a0 <chMtxLockS>:
void chMtxLockS(mutex_t *mp) {
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4605      	mov	r5, r0
  thread_t *ctp = currp;
 80032a4:	4b2d      	ldr	r3, [pc, #180]	; (800335c <chMtxLockS+0xbc>)
 80032a6:	699c      	ldr	r4, [r3, #24]
  if (mp->owner != NULL) {
 80032a8:	6880      	ldr	r0, [r0, #8]
 80032aa:	2800      	cmp	r0, #0
 80032ac:	d051      	beq.n	8003352 <chMtxLockS+0xb2>
      while (tp->prio < ctp->prio) {
 80032ae:	6882      	ldr	r2, [r0, #8]
 80032b0:	68a3      	ldr	r3, [r4, #8]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d208      	bcs.n	80032c8 <chMtxLockS+0x28>
        tp->prio = ctp->prio;
 80032b6:	6083      	str	r3, [r0, #8]
        switch (tp->state) {
 80032b8:	f890 3020 	ldrb.w	r3, [r0, #32]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d016      	beq.n	80032ee <chMtxLockS+0x4e>
 80032c0:	2b07      	cmp	r3, #7
 80032c2:	d02a      	beq.n	800331a <chMtxLockS+0x7a>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d03c      	beq.n	8003342 <chMtxLockS+0xa2>
      queue_prio_insert(ctp, &mp->queue);
 80032c8:	4628      	mov	r0, r5
  thread_t *cp = (thread_t *)tqp;
 80032ca:	462b      	mov	r3, r5
    cp = cp->queue.next;
 80032cc:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80032ce:	4298      	cmp	r0, r3
 80032d0:	d003      	beq.n	80032da <chMtxLockS+0x3a>
 80032d2:	6899      	ldr	r1, [r3, #8]
 80032d4:	68a2      	ldr	r2, [r4, #8]
 80032d6:	4291      	cmp	r1, r2
 80032d8:	d2f8      	bcs.n	80032cc <chMtxLockS+0x2c>
  tp->queue.next             = cp;
 80032da:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 80032e0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80032e2:	605c      	str	r4, [r3, #4]
      ctp->u.wtmtxp = mp;
 80032e4:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 80032e6:	2006      	movs	r0, #6
 80032e8:	f007 f962 	bl	800a5b0 <chSchGoSleepS>
}
 80032ec:	bd70      	pop	{r4, r5, r6, pc}
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80032ee:	6842      	ldr	r2, [r0, #4]
 80032f0:	6803      	ldr	r3, [r0, #0]
 80032f2:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80032f4:	6842      	ldr	r2, [r0, #4]
 80032f6:	605a      	str	r2, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 80032f8:	6a46      	ldr	r6, [r0, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 80032fa:	4633      	mov	r3, r6
    cp = cp->queue.next;
 80032fc:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 80032fe:	429e      	cmp	r6, r3
 8003300:	d003      	beq.n	800330a <chMtxLockS+0x6a>
 8003302:	6899      	ldr	r1, [r3, #8]
 8003304:	6882      	ldr	r2, [r0, #8]
 8003306:	4291      	cmp	r1, r2
 8003308:	d2f8      	bcs.n	80032fc <chMtxLockS+0x5c>
  tp->queue.next             = cp;
 800330a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8003310:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8003312:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8003314:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003316:	6898      	ldr	r0, [r3, #8]
          continue;
 8003318:	e7c9      	b.n	80032ae <chMtxLockS+0xe>
  tp->queue.prev->queue.next = tp->queue.next;
 800331a:	6842      	ldr	r2, [r0, #4]
 800331c:	6803      	ldr	r3, [r0, #0]
 800331e:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003320:	6842      	ldr	r2, [r0, #4]
 8003322:	605a      	str	r2, [r3, #4]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8003324:	6a46      	ldr	r6, [r0, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8003326:	4633      	mov	r3, r6
    cp = cp->queue.next;
 8003328:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800332a:	429e      	cmp	r6, r3
 800332c:	d003      	beq.n	8003336 <chMtxLockS+0x96>
 800332e:	6899      	ldr	r1, [r3, #8]
 8003330:	6882      	ldr	r2, [r0, #8]
 8003332:	4291      	cmp	r1, r2
 8003334:	d2f8      	bcs.n	8003328 <chMtxLockS+0x88>
  tp->queue.next             = cp;
 8003336:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 800333c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800333e:	6058      	str	r0, [r3, #4]
 8003340:	e7c2      	b.n	80032c8 <chMtxLockS+0x28>
  tp->queue.prev->queue.next = tp->queue.next;
 8003342:	6842      	ldr	r2, [r0, #4]
 8003344:	6803      	ldr	r3, [r0, #0]
 8003346:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003348:	6842      	ldr	r2, [r0, #4]
 800334a:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI(queue_dequeue(tp));
 800334c:	f007 f948 	bl	800a5e0 <chSchReadyI>
          break;
 8003350:	e7ba      	b.n	80032c8 <chMtxLockS+0x28>
    mp->owner = ctp;
 8003352:	60ac      	str	r4, [r5, #8]
    mp->next = ctp->mtxlist;
 8003354:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003356:	60eb      	str	r3, [r5, #12]
    ctp->mtxlist = mp;
 8003358:	63a5      	str	r5, [r4, #56]	; 0x38
 800335a:	e7c7      	b.n	80032ec <chMtxLockS+0x4c>
 800335c:	20001a18 	.word	0x20001a18

08003360 <chCondWaitS>:
 * @retval MSG_RESET    if the condition variable has been signaled using
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <chCondWaitS+0x40>)
 8003366:	699d      	ldr	r5, [r3, #24]
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 8003368:	6bae      	ldr	r6, [r5, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck(cp != NULL);
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 800336a:	4630      	mov	r0, r6
 800336c:	f7ff feb0 	bl	80030d0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->u.wtobjp = cp;
 8003370:	626c      	str	r4, [r5, #36]	; 0x24
  queue_prio_insert(ctp, &cp->queue);
 8003372:	4621      	mov	r1, r4
    cp = cp->queue.next;
 8003374:	6824      	ldr	r4, [r4, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003376:	42a1      	cmp	r1, r4
 8003378:	d003      	beq.n	8003382 <chCondWaitS+0x22>
 800337a:	68a2      	ldr	r2, [r4, #8]
 800337c:	68ab      	ldr	r3, [r5, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	d2f8      	bcs.n	8003374 <chCondWaitS+0x14>
  tp->queue.next             = cp;
 8003382:	602c      	str	r4, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 8003384:	6863      	ldr	r3, [r4, #4]
 8003386:	606b      	str	r3, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8003388:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 800338a:	6065      	str	r5, [r4, #4]
  chSchGoSleepS(CH_STATE_WTCOND);
 800338c:	2007      	movs	r0, #7
 800338e:	f007 f90f 	bl	800a5b0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
 8003392:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  chMtxLockS(mp);
 8003394:	4630      	mov	r0, r6
 8003396:	f7ff ff83 	bl	80032a0 <chMtxLockS>

  return msg;
}
 800339a:	4620      	mov	r0, r4
 800339c:	bd70      	pop	{r4, r5, r6, pc}
 800339e:	bf00      	nop
 80033a0:	20001a18 	.word	0x20001a18
	...

080033b0 <chCondWait>:
msg_t chCondWait(condition_variable_t *cp) {
 80033b0:	b508      	push	{r3, lr}
 80033b2:	2320      	movs	r3, #32
 80033b4:	f383 8811 	msr	BASEPRI, r3
  msg = chCondWaitS(cp);
 80033b8:	f7ff ffd2 	bl	8003360 <chCondWaitS>
 80033bc:	2300      	movs	r3, #0
 80033be:	f383 8811 	msr	BASEPRI, r3
}
 80033c2:	bd08      	pop	{r3, pc}
	...

080033d0 <chMtxLock>:
void chMtxLock(mutex_t *mp) {
 80033d0:	b508      	push	{r3, lr}
 80033d2:	2320      	movs	r3, #32
 80033d4:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(mp);
 80033d8:	f7ff ff62 	bl	80032a0 <chMtxLockS>
 80033dc:	2300      	movs	r3, #0
 80033de:	f383 8811 	msr	BASEPRI, r3
}
 80033e2:	bd08      	pop	{r3, pc}
	...

080033f0 <thread6>:
static THD_FUNCTION(thread6, p) {
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	4604      	mov	r4, r0
  chMtxLock(&m1);
 80033f4:	4d06      	ldr	r5, [pc, #24]	; (8003410 <thread6+0x20>)
 80033f6:	4628      	mov	r0, r5
 80033f8:	f7ff ffea 	bl	80033d0 <chMtxLock>
  chCondWait(&c1);
 80033fc:	4805      	ldr	r0, [pc, #20]	; (8003414 <thread6+0x24>)
 80033fe:	f7ff ffd7 	bl	80033b0 <chCondWait>
  test_emit_token(*(char *)p);
 8003402:	7820      	ldrb	r0, [r4, #0]
 8003404:	f7fd fa04 	bl	8000810 <test_emit_token>
  chMtxUnlock(&m1);
 8003408:	4628      	mov	r0, r5
 800340a:	f7ff fe89 	bl	8003120 <chMtxUnlock>
}
 800340e:	bd38      	pop	{r3, r4, r5, pc}
 8003410:	2000082c 	.word	0x2000082c
 8003414:	20000800 	.word	0x20000800
	...

08003420 <thread9>:
static THD_FUNCTION(thread9, p) {
 8003420:	b538      	push	{r3, r4, r5, lr}
 8003422:	4604      	mov	r4, r0
  chMtxLock(&m2);
 8003424:	4d05      	ldr	r5, [pc, #20]	; (800343c <thread9+0x1c>)
 8003426:	4628      	mov	r0, r5
 8003428:	f7ff ffd2 	bl	80033d0 <chMtxLock>
  test_emit_token(*(char *)p);
 800342c:	7820      	ldrb	r0, [r4, #0]
 800342e:	f7fd f9ef 	bl	8000810 <test_emit_token>
  chMtxUnlock(&m2);
 8003432:	4628      	mov	r0, r5
 8003434:	f7ff fe74 	bl	8003120 <chMtxUnlock>
}
 8003438:	bd38      	pop	{r3, r4, r5, pc}
 800343a:	bf00      	nop
 800343c:	2000083c 	.word	0x2000083c

08003440 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4604      	mov	r4, r0
  chMtxLock(&m1);
 8003444:	4d05      	ldr	r5, [pc, #20]	; (800345c <thread1.lto_priv.2+0x1c>)
 8003446:	4628      	mov	r0, r5
 8003448:	f7ff ffc2 	bl	80033d0 <chMtxLock>
  test_emit_token(*(char *)p);
 800344c:	7820      	ldrb	r0, [r4, #0]
 800344e:	f7fd f9df 	bl	8000810 <test_emit_token>
  chMtxUnlock(&m1);
 8003452:	4628      	mov	r0, r5
 8003454:	f7ff fe64 	bl	8003120 <chMtxUnlock>
}
 8003458:	bd38      	pop	{r3, r4, r5, pc}
 800345a:	bf00      	nop
 800345c:	2000082c 	.word	0x2000082c

08003460 <chFactoryFindPipe>:
 * @retval NULL         if a dynamic pipe object with the specified
 *                      name does not exist.
 *
 * @api
 */
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 8003460:	b538      	push	{r3, r4, r5, lr}
 8003462:	4604      	mov	r4, r0
  dyn_pipe_t *dpp;

  F_LOCK();
 8003464:	4d07      	ldr	r5, [pc, #28]	; (8003484 <chFactoryFindPipe+0x24>)
 8003466:	4628      	mov	r0, r5
 8003468:	f7ff ffb2 	bl	80033d0 <chMtxLock>

  dpp = (dyn_pipe_t *)dyn_find_object(name, &ch_factory.pipe_list);
 800346c:	f105 0144 	add.w	r1, r5, #68	; 0x44
 8003470:	4620      	mov	r0, r4
 8003472:	f7ff fcfd 	bl	8002e70 <dyn_find_object>
 8003476:	4604      	mov	r4, r0

  F_UNLOCK();
 8003478:	4628      	mov	r0, r5
 800347a:	f7ff fe51 	bl	8003120 <chMtxUnlock>

  return dpp;
}
 800347e:	4620      	mov	r0, r4
 8003480:	bd38      	pop	{r3, r4, r5, pc}
 8003482:	bf00      	nop
 8003484:	20001a90 	.word	0x20001a90
	...

08003490 <chFactoryFindObjectsFIFO>:
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	4604      	mov	r4, r0
  F_LOCK();
 8003494:	4d07      	ldr	r5, [pc, #28]	; (80034b4 <chFactoryFindObjectsFIFO+0x24>)
 8003496:	4628      	mov	r0, r5
 8003498:	f7ff ff9a 	bl	80033d0 <chMtxLock>
  dofp = (dyn_objects_fifo_t *)dyn_find_object(name, &ch_factory.fifo_list);
 800349c:	f105 0140 	add.w	r1, r5, #64	; 0x40
 80034a0:	4620      	mov	r0, r4
 80034a2:	f7ff fce5 	bl	8002e70 <dyn_find_object>
 80034a6:	4604      	mov	r4, r0
  F_UNLOCK();
 80034a8:	4628      	mov	r0, r5
 80034aa:	f7ff fe39 	bl	8003120 <chMtxUnlock>
}
 80034ae:	4620      	mov	r0, r4
 80034b0:	bd38      	pop	{r3, r4, r5, pc}
 80034b2:	bf00      	nop
 80034b4:	20001a90 	.word	0x20001a90
	...

080034c0 <chFactoryFindMailbox>:
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 80034c0:	b538      	push	{r3, r4, r5, lr}
 80034c2:	4604      	mov	r4, r0
  F_LOCK();
 80034c4:	4d07      	ldr	r5, [pc, #28]	; (80034e4 <chFactoryFindMailbox+0x24>)
 80034c6:	4628      	mov	r0, r5
 80034c8:	f7ff ff82 	bl	80033d0 <chMtxLock>
  dmp = (dyn_mailbox_t *)dyn_find_object(name, &ch_factory.mbx_list);
 80034cc:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 80034d0:	4620      	mov	r0, r4
 80034d2:	f7ff fccd 	bl	8002e70 <dyn_find_object>
 80034d6:	4604      	mov	r4, r0
  F_UNLOCK();
 80034d8:	4628      	mov	r0, r5
 80034da:	f7ff fe21 	bl	8003120 <chMtxUnlock>
}
 80034de:	4620      	mov	r0, r4
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
 80034e2:	bf00      	nop
 80034e4:	20001a90 	.word	0x20001a90
	...

080034f0 <chFactoryReleaseSemaphore>:
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	4605      	mov	r5, r0
  F_LOCK();
 80034f4:	4c07      	ldr	r4, [pc, #28]	; (8003514 <chFactoryReleaseSemaphore+0x24>)
 80034f6:	4620      	mov	r0, r4
 80034f8:	f7ff ff6a 	bl	80033d0 <chMtxLock>
  dyn_release_object_pool(&dsp->element,
 80034fc:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8003500:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8003504:	4628      	mov	r0, r5
 8003506:	f7fe f93b 	bl	8001780 <dyn_release_object_pool>
  F_UNLOCK();
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff fe08 	bl	8003120 <chMtxUnlock>
}
 8003510:	bd38      	pop	{r3, r4, r5, pc}
 8003512:	bf00      	nop
 8003514:	20001a90 	.word	0x20001a90
	...

08003520 <chFactoryFindSemaphore>:
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 8003520:	b538      	push	{r3, r4, r5, lr}
 8003522:	4604      	mov	r4, r0
  F_LOCK();
 8003524:	4d07      	ldr	r5, [pc, #28]	; (8003544 <chFactoryFindSemaphore+0x24>)
 8003526:	4628      	mov	r0, r5
 8003528:	f7ff ff52 	bl	80033d0 <chMtxLock>
  dsp = (dyn_semaphore_t *)dyn_find_object(name, &ch_factory.sem_list);
 800352c:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8003530:	4620      	mov	r0, r4
 8003532:	f7ff fc9d 	bl	8002e70 <dyn_find_object>
 8003536:	4604      	mov	r4, r0
  F_UNLOCK();
 8003538:	4628      	mov	r0, r5
 800353a:	f7ff fdf1 	bl	8003120 <chMtxUnlock>
}
 800353e:	4620      	mov	r0, r4
 8003540:	bd38      	pop	{r3, r4, r5, pc}
 8003542:	bf00      	nop
 8003544:	20001a90 	.word	0x20001a90
	...

08003550 <oslib_test_009_003_teardown>:
 * - [9.3.6] Retrieving the dynamic semaphore by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_003_teardown(void) {
 8003550:	b510      	push	{r4, lr}
  dyn_semaphore_t *dsp;

  dsp = chFactoryFindSemaphore("mysem");
 8003552:	4806      	ldr	r0, [pc, #24]	; (800356c <oslib_test_009_003_teardown+0x1c>)
 8003554:	f7ff ffe4 	bl	8003520 <chFactoryFindSemaphore>
  if (dsp != NULL) {
 8003558:	4604      	mov	r4, r0
 800355a:	b918      	cbnz	r0, 8003564 <oslib_test_009_003_teardown+0x14>
 800355c:	e005      	b.n	800356a <oslib_test_009_003_teardown+0x1a>
    while (dsp->element.refs > 0U) {
      chFactoryReleaseSemaphore(dsp);
 800355e:	4620      	mov	r0, r4
 8003560:	f7ff ffc6 	bl	80034f0 <chFactoryReleaseSemaphore>
    while (dsp->element.refs > 0U) {
 8003564:	6863      	ldr	r3, [r4, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f9      	bne.n	800355e <oslib_test_009_003_teardown+0xe>
    }
  }
}
 800356a:	bd10      	pop	{r4, pc}
 800356c:	0800c7d4 	.word	0x0800c7d4

08003570 <chFactoryCreateSemaphore>:
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	4604      	mov	r4, r0
 8003574:	460e      	mov	r6, r1
  F_LOCK();
 8003576:	4d0b      	ldr	r5, [pc, #44]	; (80035a4 <chFactoryCreateSemaphore+0x34>)
 8003578:	4628      	mov	r0, r5
 800357a:	f7ff ff29 	bl	80033d0 <chMtxLock>
  dsp = (dyn_semaphore_t *)dyn_create_object_pool(name,
 800357e:	f105 022c 	add.w	r2, r5, #44	; 0x2c
 8003582:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8003586:	4620      	mov	r0, r4
 8003588:	f7ff fc82 	bl	8002e90 <dyn_create_object_pool>
  if (dsp != NULL) {
 800358c:	4604      	mov	r4, r0
 800358e:	b118      	cbz	r0, 8003598 <chFactoryCreateSemaphore+0x28>
    chSemObjectInit(&dsp->sem, n);
 8003590:	4631      	mov	r1, r6
 8003592:	3010      	adds	r0, #16
 8003594:	f7fe fba4 	bl	8001ce0 <chSemObjectInit>
  F_UNLOCK();
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <chFactoryCreateSemaphore+0x34>)
 800359a:	f7ff fdc1 	bl	8003120 <chMtxUnlock>
}
 800359e:	4620      	mov	r0, r4
 80035a0:	bd70      	pop	{r4, r5, r6, pc}
 80035a2:	bf00      	nop
 80035a4:	20001a90 	.word	0x20001a90
	...

080035b0 <oslib_test_009_003_execute>:

static void oslib_test_009_003_execute(void) {
 80035b0:	b538      	push	{r3, r4, r5, lr}
  dyn_semaphore_t *dsp;

  /* [9.3.1] Retrieving a dynamic semaphore by name, must not exist.*/
  test_set_step(1);
 80035b2:	4b47      	ldr	r3, [pc, #284]	; (80036d0 <oslib_test_009_003_execute+0x120>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
  {
    dsp = chFactoryFindSemaphore("mysem");
 80035b8:	4846      	ldr	r0, [pc, #280]	; (80036d4 <oslib_test_009_003_execute+0x124>)
 80035ba:	f7ff ffb1 	bl	8003520 <chFactoryFindSemaphore>
    test_assert(dsp == NULL, "found");
 80035be:	4946      	ldr	r1, [pc, #280]	; (80036d8 <oslib_test_009_003_execute+0x128>)
 80035c0:	fab0 f080 	clz	r0, r0
 80035c4:	0940      	lsrs	r0, r0, #5
 80035c6:	f7fd fe13 	bl	80011f0 <_test_assert>
 80035ca:	b100      	cbz	r0, 80035ce <oslib_test_009_003_execute+0x1e>
  {
    dsp = chFactoryFindSemaphore("mysem");
    test_assert(dsp == NULL, "found");
  }
  test_end_step(6);
}
 80035cc:	bd38      	pop	{r3, r4, r5, pc}
  test_set_step(2);
 80035ce:	4b40      	ldr	r3, [pc, #256]	; (80036d0 <oslib_test_009_003_execute+0x120>)
 80035d0:	2202      	movs	r2, #2
 80035d2:	601a      	str	r2, [r3, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 80035d4:	2100      	movs	r1, #0
 80035d6:	483f      	ldr	r0, [pc, #252]	; (80036d4 <oslib_test_009_003_execute+0x124>)
 80035d8:	f7ff ffca 	bl	8003570 <chFactoryCreateSemaphore>
    test_assert(dsp != NULL, "cannot create");
 80035dc:	4604      	mov	r4, r0
 80035de:	493f      	ldr	r1, [pc, #252]	; (80036dc <oslib_test_009_003_execute+0x12c>)
 80035e0:	3800      	subs	r0, #0
 80035e2:	bf18      	it	ne
 80035e4:	2001      	movne	r0, #1
 80035e6:	f7fd fe03 	bl	80011f0 <_test_assert>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d1ee      	bne.n	80035cc <oslib_test_009_003_execute+0x1c>
  test_set_step(3);
 80035ee:	4b38      	ldr	r3, [pc, #224]	; (80036d0 <oslib_test_009_003_execute+0x120>)
 80035f0:	2203      	movs	r2, #3
 80035f2:	601a      	str	r2, [r3, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 80035f4:	2100      	movs	r1, #0
 80035f6:	4837      	ldr	r0, [pc, #220]	; (80036d4 <oslib_test_009_003_execute+0x124>)
 80035f8:	f7ff ffba 	bl	8003570 <chFactoryCreateSemaphore>
    test_assert(dsp1 == NULL, "can create");
 80035fc:	4938      	ldr	r1, [pc, #224]	; (80036e0 <oslib_test_009_003_execute+0x130>)
 80035fe:	fab0 f080 	clz	r0, r0
 8003602:	0940      	lsrs	r0, r0, #5
 8003604:	f7fd fdf4 	bl	80011f0 <_test_assert>
 8003608:	2800      	cmp	r0, #0
 800360a:	d1df      	bne.n	80035cc <oslib_test_009_003_execute+0x1c>
  test_set_step(4);
 800360c:	4b30      	ldr	r3, [pc, #192]	; (80036d0 <oslib_test_009_003_execute+0x120>)
 800360e:	2204      	movs	r2, #4
 8003610:	601a      	str	r2, [r3, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 8003612:	4830      	ldr	r0, [pc, #192]	; (80036d4 <oslib_test_009_003_execute+0x124>)
 8003614:	f7ff ff84 	bl	8003520 <chFactoryFindSemaphore>
    test_assert(dsp1 != NULL, "not found");
 8003618:	4605      	mov	r5, r0
 800361a:	4932      	ldr	r1, [pc, #200]	; (80036e4 <oslib_test_009_003_execute+0x134>)
 800361c:	3800      	subs	r0, #0
 800361e:	bf18      	it	ne
 8003620:	2001      	movne	r0, #1
 8003622:	f7fd fde5 	bl	80011f0 <_test_assert>
 8003626:	2800      	cmp	r0, #0
 8003628:	d1d0      	bne.n	80035cc <oslib_test_009_003_execute+0x1c>
    test_assert(dsp == dsp1, "object reference mismatch");
 800362a:	492f      	ldr	r1, [pc, #188]	; (80036e8 <oslib_test_009_003_execute+0x138>)
 800362c:	42ac      	cmp	r4, r5
 800362e:	bf14      	ite	ne
 8003630:	2000      	movne	r0, #0
 8003632:	2001      	moveq	r0, #1
 8003634:	f7fd fddc 	bl	80011f0 <_test_assert>
 8003638:	2800      	cmp	r0, #0
 800363a:	d1c7      	bne.n	80035cc <oslib_test_009_003_execute+0x1c>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 800363c:	6868      	ldr	r0, [r5, #4]
 800363e:	492a      	ldr	r1, [pc, #168]	; (80036e8 <oslib_test_009_003_execute+0x138>)
 8003640:	2802      	cmp	r0, #2
 8003642:	bf14      	ite	ne
 8003644:	2000      	movne	r0, #0
 8003646:	2001      	moveq	r0, #1
 8003648:	f7fd fdd2 	bl	80011f0 <_test_assert>
 800364c:	2800      	cmp	r0, #0
 800364e:	d1bd      	bne.n	80035cc <oslib_test_009_003_execute+0x1c>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 8003650:	686b      	ldr	r3, [r5, #4]
 8003652:	3301      	adds	r3, #1
 8003654:	606b      	str	r3, [r5, #4]
    test_assert(dsp1 == dsp2, "object reference mismatch");
 8003656:	4924      	ldr	r1, [pc, #144]	; (80036e8 <oslib_test_009_003_execute+0x138>)
 8003658:	2001      	movs	r0, #1
 800365a:	f7fd fdc9 	bl	80011f0 <_test_assert>
 800365e:	2800      	cmp	r0, #0
 8003660:	d1b4      	bne.n	80035cc <oslib_test_009_003_execute+0x1c>
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 8003662:	6868      	ldr	r0, [r5, #4]
 8003664:	4920      	ldr	r1, [pc, #128]	; (80036e8 <oslib_test_009_003_execute+0x138>)
 8003666:	2803      	cmp	r0, #3
 8003668:	bf14      	ite	ne
 800366a:	2000      	movne	r0, #0
 800366c:	2001      	moveq	r0, #1
 800366e:	f7fd fdbf 	bl	80011f0 <_test_assert>
 8003672:	2800      	cmp	r0, #0
 8003674:	d1aa      	bne.n	80035cc <oslib_test_009_003_execute+0x1c>
    chFactoryReleaseSemaphore(dsp2);
 8003676:	4628      	mov	r0, r5
 8003678:	f7ff ff3a 	bl	80034f0 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 800367c:	6868      	ldr	r0, [r5, #4]
 800367e:	491b      	ldr	r1, [pc, #108]	; (80036ec <oslib_test_009_003_execute+0x13c>)
 8003680:	2802      	cmp	r0, #2
 8003682:	bf14      	ite	ne
 8003684:	2000      	movne	r0, #0
 8003686:	2001      	moveq	r0, #1
 8003688:	f7fd fdb2 	bl	80011f0 <_test_assert>
 800368c:	2800      	cmp	r0, #0
 800368e:	d19d      	bne.n	80035cc <oslib_test_009_003_execute+0x1c>
    chFactoryReleaseSemaphore(dsp1);
 8003690:	4628      	mov	r0, r5
 8003692:	f7ff ff2d 	bl	80034f0 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 8003696:	6860      	ldr	r0, [r4, #4]
 8003698:	4914      	ldr	r1, [pc, #80]	; (80036ec <oslib_test_009_003_execute+0x13c>)
 800369a:	2801      	cmp	r0, #1
 800369c:	bf14      	ite	ne
 800369e:	2000      	movne	r0, #0
 80036a0:	2001      	moveq	r0, #1
 80036a2:	f7fd fda5 	bl	80011f0 <_test_assert>
 80036a6:	2800      	cmp	r0, #0
 80036a8:	d190      	bne.n	80035cc <oslib_test_009_003_execute+0x1c>
  test_set_step(5);
 80036aa:	4d09      	ldr	r5, [pc, #36]	; (80036d0 <oslib_test_009_003_execute+0x120>)
 80036ac:	2305      	movs	r3, #5
 80036ae:	602b      	str	r3, [r5, #0]
    chFactoryReleaseSemaphore(dsp);
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7ff ff1d 	bl	80034f0 <chFactoryReleaseSemaphore>
  test_set_step(6);
 80036b6:	2306      	movs	r3, #6
 80036b8:	602b      	str	r3, [r5, #0]
    dsp = chFactoryFindSemaphore("mysem");
 80036ba:	4806      	ldr	r0, [pc, #24]	; (80036d4 <oslib_test_009_003_execute+0x124>)
 80036bc:	f7ff ff30 	bl	8003520 <chFactoryFindSemaphore>
    test_assert(dsp == NULL, "found");
 80036c0:	4905      	ldr	r1, [pc, #20]	; (80036d8 <oslib_test_009_003_execute+0x128>)
 80036c2:	fab0 f080 	clz	r0, r0
 80036c6:	0940      	lsrs	r0, r0, #5
 80036c8:	f7fd fd92 	bl	80011f0 <_test_assert>
  test_end_step(6);
 80036cc:	e77e      	b.n	80035cc <oslib_test_009_003_execute+0x1c>
 80036ce:	bf00      	nop
 80036d0:	20002454 	.word	0x20002454
 80036d4:	0800c7d4 	.word	0x0800c7d4
 80036d8:	0800c7fc 	.word	0x0800c7fc
 80036dc:	0800c7dc 	.word	0x0800c7dc
 80036e0:	0800c7ec 	.word	0x0800c7ec
 80036e4:	0800c7f8 	.word	0x0800c7f8
 80036e8:	0800c804 	.word	0x0800c804
 80036ec:	0800c820 	.word	0x0800c820

080036f0 <chFactoryFindBuffer>:
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	4604      	mov	r4, r0
  F_LOCK();
 80036f4:	4d07      	ldr	r5, [pc, #28]	; (8003714 <chFactoryFindBuffer+0x24>)
 80036f6:	4628      	mov	r0, r5
 80036f8:	f7ff fe6a 	bl	80033d0 <chMtxLock>
  dbp = (dyn_buffer_t *)dyn_find_object(name, &ch_factory.buf_list);
 80036fc:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff fbb5 	bl	8002e70 <dyn_find_object>
 8003706:	4604      	mov	r4, r0
  F_UNLOCK();
 8003708:	4628      	mov	r0, r5
 800370a:	f7ff fd09 	bl	8003120 <chMtxUnlock>
}
 800370e:	4620      	mov	r0, r4
 8003710:	bd38      	pop	{r3, r4, r5, pc}
 8003712:	bf00      	nop
 8003714:	20001a90 	.word	0x20001a90
	...

08003720 <chFactoryReleaseObject>:
void chFactoryReleaseObject(registered_object_t *rop) {
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4605      	mov	r5, r0
  F_LOCK();
 8003724:	4c07      	ldr	r4, [pc, #28]	; (8003744 <chFactoryReleaseObject+0x24>)
 8003726:	4620      	mov	r0, r4
 8003728:	f7ff fe52 	bl	80033d0 <chMtxLock>
  dyn_release_object_pool(&rop->element,
 800372c:	f104 0214 	add.w	r2, r4, #20
 8003730:	f104 0110 	add.w	r1, r4, #16
 8003734:	4628      	mov	r0, r5
 8003736:	f7fe f823 	bl	8001780 <dyn_release_object_pool>
  F_UNLOCK();
 800373a:	4620      	mov	r0, r4
 800373c:	f7ff fcf0 	bl	8003120 <chMtxUnlock>
}
 8003740:	bd38      	pop	{r3, r4, r5, pc}
 8003742:	bf00      	nop
 8003744:	20001a90 	.word	0x20001a90
	...

08003750 <chFactoryFindObject>:
registered_object_t *chFactoryFindObject(const char *name) {
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4604      	mov	r4, r0
  F_LOCK();
 8003754:	4d07      	ldr	r5, [pc, #28]	; (8003774 <chFactoryFindObject+0x24>)
 8003756:	4628      	mov	r0, r5
 8003758:	f7ff fe3a 	bl	80033d0 <chMtxLock>
  rop = (registered_object_t *)dyn_find_object(name, &ch_factory.obj_list);
 800375c:	f105 0110 	add.w	r1, r5, #16
 8003760:	4620      	mov	r0, r4
 8003762:	f7ff fb85 	bl	8002e70 <dyn_find_object>
 8003766:	4604      	mov	r4, r0
  F_UNLOCK();
 8003768:	4628      	mov	r0, r5
 800376a:	f7ff fcd9 	bl	8003120 <chMtxUnlock>
}
 800376e:	4620      	mov	r0, r4
 8003770:	bd38      	pop	{r3, r4, r5, pc}
 8003772:	bf00      	nop
 8003774:	20001a90 	.word	0x20001a90
	...

08003780 <oslib_test_009_001_teardown>:
static void oslib_test_009_001_teardown(void) {
 8003780:	b510      	push	{r4, lr}
  rop = chFactoryFindObject("myobj");
 8003782:	4806      	ldr	r0, [pc, #24]	; (800379c <oslib_test_009_001_teardown+0x1c>)
 8003784:	f7ff ffe4 	bl	8003750 <chFactoryFindObject>
  if (rop != NULL) {
 8003788:	4604      	mov	r4, r0
 800378a:	b918      	cbnz	r0, 8003794 <oslib_test_009_001_teardown+0x14>
 800378c:	e005      	b.n	800379a <oslib_test_009_001_teardown+0x1a>
      chFactoryReleaseObject(rop);
 800378e:	4620      	mov	r0, r4
 8003790:	f7ff ffc6 	bl	8003720 <chFactoryReleaseObject>
    while (rop->element.refs > 0U) {
 8003794:	6863      	ldr	r3, [r4, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f9      	bne.n	800378e <oslib_test_009_001_teardown+0xe>
}
 800379a:	bd10      	pop	{r4, pc}
 800379c:	0800c834 	.word	0x0800c834

080037a0 <chFactoryRegisterObject>:
                                             void *objp) {
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	4604      	mov	r4, r0
 80037a4:	460e      	mov	r6, r1
  F_LOCK();
 80037a6:	4d09      	ldr	r5, [pc, #36]	; (80037cc <chFactoryRegisterObject+0x2c>)
 80037a8:	4628      	mov	r0, r5
 80037aa:	f7ff fe11 	bl	80033d0 <chMtxLock>
  rop = (registered_object_t *)dyn_create_object_pool(name,
 80037ae:	f105 0214 	add.w	r2, r5, #20
 80037b2:	f105 0110 	add.w	r1, r5, #16
 80037b6:	4620      	mov	r0, r4
 80037b8:	f7ff fb6a 	bl	8002e90 <dyn_create_object_pool>
  if (rop != NULL) {
 80037bc:	4604      	mov	r4, r0
 80037be:	b100      	cbz	r0, 80037c2 <chFactoryRegisterObject+0x22>
    rop->objp = objp;
 80037c0:	6106      	str	r6, [r0, #16]
  F_UNLOCK();
 80037c2:	4802      	ldr	r0, [pc, #8]	; (80037cc <chFactoryRegisterObject+0x2c>)
 80037c4:	f7ff fcac 	bl	8003120 <chMtxUnlock>
}
 80037c8:	4620      	mov	r0, r4
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
 80037cc:	20001a90 	.word	0x20001a90

080037d0 <oslib_test_009_001_execute>:
static void oslib_test_009_001_execute(void) {
 80037d0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 80037d2:	4b54      	ldr	r3, [pc, #336]	; (8003924 <oslib_test_009_001_execute+0x154>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
    rop = chFactoryFindObject("myobj");
 80037d8:	4853      	ldr	r0, [pc, #332]	; (8003928 <oslib_test_009_001_execute+0x158>)
 80037da:	f7ff ffb9 	bl	8003750 <chFactoryFindObject>
    test_assert(rop == NULL, "found");
 80037de:	4953      	ldr	r1, [pc, #332]	; (800392c <oslib_test_009_001_execute+0x15c>)
 80037e0:	fab0 f080 	clz	r0, r0
 80037e4:	0940      	lsrs	r0, r0, #5
 80037e6:	f7fd fd03 	bl	80011f0 <_test_assert>
 80037ea:	b100      	cbz	r0, 80037ee <oslib_test_009_001_execute+0x1e>
}
 80037ec:	bd38      	pop	{r3, r4, r5, pc}
  test_set_step(2);
 80037ee:	4b4d      	ldr	r3, [pc, #308]	; (8003924 <oslib_test_009_001_execute+0x154>)
 80037f0:	2202      	movs	r2, #2
 80037f2:	601a      	str	r2, [r3, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 80037f4:	494e      	ldr	r1, [pc, #312]	; (8003930 <oslib_test_009_001_execute+0x160>)
 80037f6:	484c      	ldr	r0, [pc, #304]	; (8003928 <oslib_test_009_001_execute+0x158>)
 80037f8:	f7ff ffd2 	bl	80037a0 <chFactoryRegisterObject>
    test_assert(rop != NULL, "cannot register");
 80037fc:	4604      	mov	r4, r0
 80037fe:	494d      	ldr	r1, [pc, #308]	; (8003934 <oslib_test_009_001_execute+0x164>)
 8003800:	3800      	subs	r0, #0
 8003802:	bf18      	it	ne
 8003804:	2001      	movne	r0, #1
 8003806:	f7fd fcf3 	bl	80011f0 <_test_assert>
 800380a:	2800      	cmp	r0, #0
 800380c:	d1ee      	bne.n	80037ec <oslib_test_009_001_execute+0x1c>
  test_set_step(3);
 800380e:	4b45      	ldr	r3, [pc, #276]	; (8003924 <oslib_test_009_001_execute+0x154>)
 8003810:	2203      	movs	r2, #3
 8003812:	601a      	str	r2, [r3, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 8003814:	4948      	ldr	r1, [pc, #288]	; (8003938 <oslib_test_009_001_execute+0x168>)
 8003816:	4844      	ldr	r0, [pc, #272]	; (8003928 <oslib_test_009_001_execute+0x158>)
 8003818:	f7ff ffc2 	bl	80037a0 <chFactoryRegisterObject>
    test_assert(rop1 == NULL, "can register");
 800381c:	4947      	ldr	r1, [pc, #284]	; (800393c <oslib_test_009_001_execute+0x16c>)
 800381e:	fab0 f080 	clz	r0, r0
 8003822:	0940      	lsrs	r0, r0, #5
 8003824:	f7fd fce4 	bl	80011f0 <_test_assert>
 8003828:	2800      	cmp	r0, #0
 800382a:	d1df      	bne.n	80037ec <oslib_test_009_001_execute+0x1c>
  test_set_step(4);
 800382c:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <oslib_test_009_001_execute+0x154>)
 800382e:	2204      	movs	r2, #4
 8003830:	601a      	str	r2, [r3, #0]
    rop1 = chFactoryFindObject("myobj");
 8003832:	483d      	ldr	r0, [pc, #244]	; (8003928 <oslib_test_009_001_execute+0x158>)
 8003834:	f7ff ff8c 	bl	8003750 <chFactoryFindObject>
    test_assert(rop1 != NULL, "not found");
 8003838:	4605      	mov	r5, r0
 800383a:	4941      	ldr	r1, [pc, #260]	; (8003940 <oslib_test_009_001_execute+0x170>)
 800383c:	3800      	subs	r0, #0
 800383e:	bf18      	it	ne
 8003840:	2001      	movne	r0, #1
 8003842:	f7fd fcd5 	bl	80011f0 <_test_assert>
 8003846:	2800      	cmp	r0, #0
 8003848:	d1d0      	bne.n	80037ec <oslib_test_009_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 800384a:	692b      	ldr	r3, [r5, #16]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	493d      	ldr	r1, [pc, #244]	; (8003944 <oslib_test_009_001_execute+0x174>)
 8003850:	f245 53aa 	movw	r3, #21930	; 0x55aa
 8003854:	4298      	cmp	r0, r3
 8003856:	bf14      	ite	ne
 8003858:	2000      	movne	r0, #0
 800385a:	2001      	moveq	r0, #1
 800385c:	f7fd fcc8 	bl	80011f0 <_test_assert>
 8003860:	2800      	cmp	r0, #0
 8003862:	d1c3      	bne.n	80037ec <oslib_test_009_001_execute+0x1c>
    test_assert(rop == rop1, "object reference mismatch");
 8003864:	4938      	ldr	r1, [pc, #224]	; (8003948 <oslib_test_009_001_execute+0x178>)
 8003866:	42ac      	cmp	r4, r5
 8003868:	bf14      	ite	ne
 800386a:	2000      	movne	r0, #0
 800386c:	2001      	moveq	r0, #1
 800386e:	f7fd fcbf 	bl	80011f0 <_test_assert>
 8003872:	2800      	cmp	r0, #0
 8003874:	d1ba      	bne.n	80037ec <oslib_test_009_001_execute+0x1c>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 8003876:	6868      	ldr	r0, [r5, #4]
 8003878:	4933      	ldr	r1, [pc, #204]	; (8003948 <oslib_test_009_001_execute+0x178>)
 800387a:	2802      	cmp	r0, #2
 800387c:	bf14      	ite	ne
 800387e:	2000      	movne	r0, #0
 8003880:	2001      	moveq	r0, #1
 8003882:	f7fd fcb5 	bl	80011f0 <_test_assert>
 8003886:	2800      	cmp	r0, #0
 8003888:	d1b0      	bne.n	80037ec <oslib_test_009_001_execute+0x1c>
 800388a:	686b      	ldr	r3, [r5, #4]
 800388c:	3301      	adds	r3, #1
 800388e:	606b      	str	r3, [r5, #4]
    test_assert(rop1 == rop2, "object reference mismatch");
 8003890:	492d      	ldr	r1, [pc, #180]	; (8003948 <oslib_test_009_001_execute+0x178>)
 8003892:	2001      	movs	r0, #1
 8003894:	f7fd fcac 	bl	80011f0 <_test_assert>
 8003898:	2800      	cmp	r0, #0
 800389a:	d1a7      	bne.n	80037ec <oslib_test_009_001_execute+0x1c>
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 800389c:	692b      	ldr	r3, [r5, #16]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	4928      	ldr	r1, [pc, #160]	; (8003944 <oslib_test_009_001_execute+0x174>)
 80038a2:	f245 53aa 	movw	r3, #21930	; 0x55aa
 80038a6:	4298      	cmp	r0, r3
 80038a8:	bf14      	ite	ne
 80038aa:	2000      	movne	r0, #0
 80038ac:	2001      	moveq	r0, #1
 80038ae:	f7fd fc9f 	bl	80011f0 <_test_assert>
 80038b2:	2800      	cmp	r0, #0
 80038b4:	d19a      	bne.n	80037ec <oslib_test_009_001_execute+0x1c>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 80038b6:	6868      	ldr	r0, [r5, #4]
 80038b8:	4923      	ldr	r1, [pc, #140]	; (8003948 <oslib_test_009_001_execute+0x178>)
 80038ba:	2803      	cmp	r0, #3
 80038bc:	bf14      	ite	ne
 80038be:	2000      	movne	r0, #0
 80038c0:	2001      	moveq	r0, #1
 80038c2:	f7fd fc95 	bl	80011f0 <_test_assert>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d190      	bne.n	80037ec <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop2);
 80038ca:	4628      	mov	r0, r5
 80038cc:	f7ff ff28 	bl	8003720 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 80038d0:	6868      	ldr	r0, [r5, #4]
 80038d2:	491e      	ldr	r1, [pc, #120]	; (800394c <oslib_test_009_001_execute+0x17c>)
 80038d4:	2802      	cmp	r0, #2
 80038d6:	bf14      	ite	ne
 80038d8:	2000      	movne	r0, #0
 80038da:	2001      	moveq	r0, #1
 80038dc:	f7fd fc88 	bl	80011f0 <_test_assert>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d183      	bne.n	80037ec <oslib_test_009_001_execute+0x1c>
    chFactoryReleaseObject(rop1);
 80038e4:	4628      	mov	r0, r5
 80038e6:	f7ff ff1b 	bl	8003720 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 80038ea:	6860      	ldr	r0, [r4, #4]
 80038ec:	4917      	ldr	r1, [pc, #92]	; (800394c <oslib_test_009_001_execute+0x17c>)
 80038ee:	2801      	cmp	r0, #1
 80038f0:	bf14      	ite	ne
 80038f2:	2000      	movne	r0, #0
 80038f4:	2001      	moveq	r0, #1
 80038f6:	f7fd fc7b 	bl	80011f0 <_test_assert>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	f47f af76 	bne.w	80037ec <oslib_test_009_001_execute+0x1c>
  test_set_step(5);
 8003900:	4d08      	ldr	r5, [pc, #32]	; (8003924 <oslib_test_009_001_execute+0x154>)
 8003902:	2305      	movs	r3, #5
 8003904:	602b      	str	r3, [r5, #0]
    chFactoryReleaseObject(rop);
 8003906:	4620      	mov	r0, r4
 8003908:	f7ff ff0a 	bl	8003720 <chFactoryReleaseObject>
  test_set_step(6);
 800390c:	2306      	movs	r3, #6
 800390e:	602b      	str	r3, [r5, #0]
    rop = chFactoryFindObject("myobj");
 8003910:	4805      	ldr	r0, [pc, #20]	; (8003928 <oslib_test_009_001_execute+0x158>)
 8003912:	f7ff ff1d 	bl	8003750 <chFactoryFindObject>
    test_assert(rop == NULL, "found");
 8003916:	4905      	ldr	r1, [pc, #20]	; (800392c <oslib_test_009_001_execute+0x15c>)
 8003918:	fab0 f080 	clz	r0, r0
 800391c:	0940      	lsrs	r0, r0, #5
 800391e:	f7fd fc67 	bl	80011f0 <_test_assert>
  test_end_step(6);
 8003922:	e763      	b.n	80037ec <oslib_test_009_001_execute+0x1c>
 8003924:	20002454 	.word	0x20002454
 8003928:	0800c834 	.word	0x0800c834
 800392c:	0800c7fc 	.word	0x0800c7fc
 8003930:	20000884 	.word	0x20000884
 8003934:	0800c83c 	.word	0x0800c83c
 8003938:	20000888 	.word	0x20000888
 800393c:	0800c84c 	.word	0x0800c84c
 8003940:	0800c7f8 	.word	0x0800c7f8
 8003944:	0800c85c 	.word	0x0800c85c
 8003948:	0800c804 	.word	0x0800c804
 800394c:	0800c820 	.word	0x0800c820

08003950 <pipe_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t pipe_read(pipe_t *pp, uint8_t *bp, size_t n) {
 8003950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003954:	4605      	mov	r5, r0
 8003956:	460f      	mov	r7, r1
 8003958:	4614      	mov	r4, r2
  size_t s1, s2;

  PC_LOCK(pp);
 800395a:	f100 0820 	add.w	r8, r0, #32
 800395e:	4640      	mov	r0, r8
 8003960:	f7ff fd36 	bl	80033d0 <chMtxLock>
 *
 * @api
 */
static inline size_t chPipeGetUsedCount(const pipe_t *pp) {

  return pp->cnt;
 8003964:	692b      	ldr	r3, [r5, #16]

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > chPipeGetUsedCount(pp)) {
 8003966:	429c      	cmp	r4, r3
 8003968:	d900      	bls.n	800396c <pipe_read+0x1c>
    n = chPipeGetUsedCount(pp);
 800396a:	461c      	mov	r4, r3
  }
  pp->cnt -= n;
 800396c:	1b1b      	subs	r3, r3, r4
 800396e:	612b      	str	r3, [r5, #16]

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(pp->top - pp->rdptr);
 8003970:	686e      	ldr	r6, [r5, #4]
 8003972:	68e9      	ldr	r1, [r5, #12]
 8003974:	1a76      	subs	r6, r6, r1
  /*lint -restore*/

  if (n < s1) {
 8003976:	42b4      	cmp	r4, r6
 8003978:	d315      	bcc.n	80039a6 <pipe_read+0x56>
    memcpy((void *)bp, (void *)pp->rdptr, n);
    pp->rdptr += n;
  }
  else if (n > s1) {
 800397a:	42b4      	cmp	r4, r6
 800397c:	d91b      	bls.n	80039b6 <pipe_read+0x66>
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800397e:	4632      	mov	r2, r6
 8003980:	4638      	mov	r0, r7
 8003982:	f7fc fcb3 	bl	80002ec <memcpy>
    bp += s1;
    s2 = n - s1;
 8003986:	eba4 0906 	sub.w	r9, r4, r6
    memcpy((void *)bp, (void *)pp->buffer, s2);
 800398a:	464a      	mov	r2, r9
 800398c:	6829      	ldr	r1, [r5, #0]
 800398e:	19b8      	adds	r0, r7, r6
 8003990:	f7fc fcac 	bl	80002ec <memcpy>
    pp->rdptr = pp->buffer + s2;
 8003994:	682a      	ldr	r2, [r5, #0]
 8003996:	444a      	add	r2, r9
 8003998:	60ea      	str	r2, [r5, #12]
  else {
    memcpy((void *)bp, (void *)pp->rdptr, n);
    pp->rdptr = pp->buffer;
  }

  PC_UNLOCK(pp);
 800399a:	4640      	mov	r0, r8
 800399c:	f7ff fbc0 	bl	8003120 <chMtxUnlock>

  return n;
}
 80039a0:	4620      	mov	r0, r4
 80039a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy((void *)bp, (void *)pp->rdptr, n);
 80039a6:	4622      	mov	r2, r4
 80039a8:	4638      	mov	r0, r7
 80039aa:	f7fc fc9f 	bl	80002ec <memcpy>
    pp->rdptr += n;
 80039ae:	68eb      	ldr	r3, [r5, #12]
 80039b0:	4423      	add	r3, r4
 80039b2:	60eb      	str	r3, [r5, #12]
 80039b4:	e7f1      	b.n	800399a <pipe_read+0x4a>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 80039b6:	4622      	mov	r2, r4
 80039b8:	4638      	mov	r0, r7
 80039ba:	f7fc fc97 	bl	80002ec <memcpy>
    pp->rdptr = pp->buffer;
 80039be:	682b      	ldr	r3, [r5, #0]
 80039c0:	60eb      	str	r3, [r5, #12]
 80039c2:	e7ea      	b.n	800399a <pipe_read+0x4a>
	...

080039d0 <pipe_write>:
static size_t pipe_write(pipe_t *pp, const uint8_t *bp, size_t n) {
 80039d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039d4:	4605      	mov	r5, r0
 80039d6:	460f      	mov	r7, r1
 80039d8:	4691      	mov	r9, r2
  PC_LOCK(pp);
 80039da:	f100 0820 	add.w	r8, r0, #32
 80039de:	4640      	mov	r0, r8
 80039e0:	f7ff fcf6 	bl	80033d0 <chMtxLock>
  return (size_t)(pp->top - pp->buffer);
 80039e4:	686e      	ldr	r6, [r5, #4]
 80039e6:	682c      	ldr	r4, [r5, #0]
 80039e8:	1b34      	subs	r4, r6, r4
  return pp->cnt;
 80039ea:	692b      	ldr	r3, [r5, #16]
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 80039ec:	1ae4      	subs	r4, r4, r3
  if (n > chPipeGetFreeCount(pp)) {
 80039ee:	45a1      	cmp	r9, r4
 80039f0:	d800      	bhi.n	80039f4 <pipe_write+0x24>
 80039f2:	464c      	mov	r4, r9
  pp->cnt += n;
 80039f4:	4423      	add	r3, r4
 80039f6:	612b      	str	r3, [r5, #16]
  s1 = (size_t)(pp->top - pp->wrptr);
 80039f8:	68a8      	ldr	r0, [r5, #8]
 80039fa:	1a36      	subs	r6, r6, r0
  if (n < s1) {
 80039fc:	42b4      	cmp	r4, r6
 80039fe:	d315      	bcc.n	8003a2c <pipe_write+0x5c>
  else if (n > s1) {
 8003a00:	42b4      	cmp	r4, r6
 8003a02:	d91b      	bls.n	8003a3c <pipe_write+0x6c>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 8003a04:	4632      	mov	r2, r6
 8003a06:	4639      	mov	r1, r7
 8003a08:	f7fc fc70 	bl	80002ec <memcpy>
    s2 = n - s1;
 8003a0c:	eba4 0906 	sub.w	r9, r4, r6
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 8003a10:	464a      	mov	r2, r9
 8003a12:	19b9      	adds	r1, r7, r6
 8003a14:	6828      	ldr	r0, [r5, #0]
 8003a16:	f7fc fc69 	bl	80002ec <memcpy>
    pp->wrptr = pp->buffer + s2;
 8003a1a:	682a      	ldr	r2, [r5, #0]
 8003a1c:	444a      	add	r2, r9
 8003a1e:	60aa      	str	r2, [r5, #8]
  PC_UNLOCK(pp);
 8003a20:	4640      	mov	r0, r8
 8003a22:	f7ff fb7d 	bl	8003120 <chMtxUnlock>
}
 8003a26:	4620      	mov	r0, r4
 8003a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	4639      	mov	r1, r7
 8003a30:	f7fc fc5c 	bl	80002ec <memcpy>
    pp->wrptr += n;
 8003a34:	68ab      	ldr	r3, [r5, #8]
 8003a36:	4423      	add	r3, r4
 8003a38:	60ab      	str	r3, [r5, #8]
 8003a3a:	e7f1      	b.n	8003a20 <pipe_write+0x50>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 8003a3c:	4622      	mov	r2, r4
 8003a3e:	4639      	mov	r1, r7
 8003a40:	f7fc fc54 	bl	80002ec <memcpy>
    pp->wrptr = pp->buffer;
 8003a44:	682b      	ldr	r3, [r5, #0]
 8003a46:	60ab      	str	r3, [r5, #8]
 8003a48:	e7ea      	b.n	8003a20 <pipe_write+0x50>
 8003a4a:	bf00      	nop
 8003a4c:	0000      	movs	r0, r0
	...

08003a50 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8003a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a54:	460e      	mov	r6, r1
 8003a56:	4615      	mov	r5, r2
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
 8003a58:	4604      	mov	r4, r0
 8003a5a:	b190      	cbz	r0, 8003a82 <chHeapStatus+0x32>
    heapp = &default_heap;
  }

  H_LOCK(heapp);
 8003a5c:	f104 070c 	add.w	r7, r4, #12
 8003a60:	4638      	mov	r0, r7
 8003a62:	f7ff fcb5 	bl	80033d0 <chMtxLock>
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
 8003a66:	1d23      	adds	r3, r4, #4
  lpages = 0U;
 8003a68:	2200      	movs	r2, #0
  tpages = 0U;
 8003a6a:	4614      	mov	r4, r2
  n = 0U;
 8003a6c:	4690      	mov	r8, r2
  while (H_NEXT(qp) != NULL) {
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	b14b      	cbz	r3, 8003a86 <chHeapStatus+0x36>
    size_t pages = H_PAGES(H_NEXT(qp));
 8003a72:	6858      	ldr	r0, [r3, #4]

    /* Updating counters.*/
    n++;
 8003a74:	f108 0801 	add.w	r8, r8, #1
    tpages += pages;
 8003a78:	4404      	add	r4, r0
    if (pages > lpages) {
 8003a7a:	4282      	cmp	r2, r0
 8003a7c:	d2f7      	bcs.n	8003a6e <chHeapStatus+0x1e>
      lpages = pages;
 8003a7e:	4602      	mov	r2, r0
 8003a80:	e7f5      	b.n	8003a6e <chHeapStatus+0x1e>
    heapp = &default_heap;
 8003a82:	4c07      	ldr	r4, [pc, #28]	; (8003aa0 <chHeapStatus+0x50>)
 8003a84:	e7ea      	b.n	8003a5c <chHeapStatus+0xc>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 8003a86:	b10e      	cbz	r6, 8003a8c <chHeapStatus+0x3c>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 8003a88:	00e4      	lsls	r4, r4, #3
 8003a8a:	6034      	str	r4, [r6, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 8003a8c:	b10d      	cbz	r5, 8003a92 <chHeapStatus+0x42>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 8003a8e:	00d2      	lsls	r2, r2, #3
 8003a90:	602a      	str	r2, [r5, #0]
  }
  H_UNLOCK(heapp);
 8003a92:	4638      	mov	r0, r7
 8003a94:	f7ff fb44 	bl	8003120 <chMtxUnlock>

  return n;
}
 8003a98:	4640      	mov	r0, r8
 8003a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20001ae0 	.word	0x20001ae0
	...

08003ab0 <cmd_mem>:
#endif

#if (SHELL_CMD_MEM_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003ab0:	b530      	push	{r4, r5, lr}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	4604      	mov	r4, r0
  size_t n, total, largest;

  (void)argv;
  if (argc > 0) {
 8003ab6:	2900      	cmp	r1, #0
 8003ab8:	dc1d      	bgt.n	8003af6 <cmd_mem+0x46>
    shellUsage(chp, "mem");
    return;
  }
  n = chHeapStatus(NULL, &total, &largest);
 8003aba:	466a      	mov	r2, sp
 8003abc:	a901      	add	r1, sp, #4
 8003abe:	2000      	movs	r0, #0
 8003ac0:	f7ff ffc6 	bl	8003a50 <chHeapStatus>
 8003ac4:	4605      	mov	r5, r0
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 8003ac6:	f7fd ff3b 	bl	8001940 <chCoreGetStatusX>
 8003aca:	4602      	mov	r2, r0
 8003acc:	490c      	ldr	r1, [pc, #48]	; (8003b00 <cmd_mem+0x50>)
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7fe fea6 	bl	8002820 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 8003ad4:	462a      	mov	r2, r5
 8003ad6:	490b      	ldr	r1, [pc, #44]	; (8003b04 <cmd_mem+0x54>)
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f7fe fea1 	bl	8002820 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 8003ade:	9a01      	ldr	r2, [sp, #4]
 8003ae0:	4909      	ldr	r1, [pc, #36]	; (8003b08 <cmd_mem+0x58>)
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f7fe fe9c 	bl	8002820 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 8003ae8:	9a00      	ldr	r2, [sp, #0]
 8003aea:	4908      	ldr	r1, [pc, #32]	; (8003b0c <cmd_mem+0x5c>)
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7fe fe97 	bl	8002820 <chprintf>
}
 8003af2:	b003      	add	sp, #12
 8003af4:	bd30      	pop	{r4, r5, pc}
    shellUsage(chp, "mem");
 8003af6:	4a06      	ldr	r2, [pc, #24]	; (8003b10 <cmd_mem+0x60>)
 8003af8:	4906      	ldr	r1, [pc, #24]	; (8003b14 <cmd_mem+0x64>)
 8003afa:	f7fe fe91 	bl	8002820 <chprintf>
    return;
 8003afe:	e7f8      	b.n	8003af2 <cmd_mem+0x42>
 8003b00:	0800c870 	.word	0x0800c870
 8003b04:	0800c890 	.word	0x0800c890
 8003b08:	0800c8a8 	.word	0x0800c8a8
 8003b0c:	0800c8c8 	.word	0x0800c8c8
 8003b10:	0800c86c 	.word	0x0800c86c
 8003b14:	0800c434 	.word	0x0800c434
	...

08003b20 <chHeapFree>:
void chHeapFree(void *p) {
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	4606      	mov	r6, r0
  hp = (heap_header_t *)p - 1U;
 8003b24:	f1a0 0408 	sub.w	r4, r0, #8
  heapp = H_HEAP(hp);
 8003b28:	f850 7c08 	ldr.w	r7, [r0, #-8]
  qp = &heapp->header;
 8003b2c:	1d3d      	adds	r5, r7, #4
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8003b2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003b32:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8003b34:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8003b36:	f840 3c04 	str.w	r3, [r0, #-4]
  H_LOCK(heapp);
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	f7ff fc47 	bl	80033d0 <chMtxLock>
  qp = &heapp->header;
 8003b42:	462b      	mov	r3, r5
 8003b44:	e004      	b.n	8003b50 <chHeapFree+0x30>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8003b46:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8003b48:	b13a      	cbz	r2, 8003b5a <chHeapFree+0x3a>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8003b4a:	4294      	cmp	r4, r2
 8003b4c:	d305      	bcc.n	8003b5a <chHeapFree+0x3a>
    qp = H_NEXT(qp);
 8003b4e:	681b      	ldr	r3, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8003b50:	42ab      	cmp	r3, r5
 8003b52:	d0f8      	beq.n	8003b46 <chHeapFree+0x26>
 8003b54:	429c      	cmp	r4, r3
 8003b56:	d9fa      	bls.n	8003b4e <chHeapFree+0x2e>
 8003b58:	e7f5      	b.n	8003b46 <chHeapFree+0x26>
      H_NEXT(hp) = H_NEXT(qp);
 8003b5a:	f846 2c08 	str.w	r2, [r6, #-8]
      H_NEXT(qp) = hp;
 8003b5e:	601c      	str	r4, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8003b60:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8003b64:	1c4a      	adds	r2, r1, #1
 8003b66:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003b6a:	f856 0c08 	ldr.w	r0, [r6, #-8]
 8003b6e:	4282      	cmp	r2, r0
 8003b70:	d009      	beq.n	8003b86 <chHeapFree+0x66>
      if ((H_LIMIT(qp) == hp)) {
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	1c4a      	adds	r2, r1, #1
 8003b76:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8003b7a:	4294      	cmp	r4, r2
 8003b7c:	d00c      	beq.n	8003b98 <chHeapFree+0x78>
  H_UNLOCK(heapp);
 8003b7e:	4638      	mov	r0, r7
 8003b80:	f7ff face 	bl	8003120 <chMtxUnlock>
}
 8003b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8003b86:	6842      	ldr	r2, [r0, #4]
 8003b88:	4411      	add	r1, r2
 8003b8a:	3101      	adds	r1, #1
 8003b8c:	f846 1c04 	str.w	r1, [r6, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8003b90:	6802      	ldr	r2, [r0, #0]
 8003b92:	f846 2c08 	str.w	r2, [r6, #-8]
 8003b96:	e7ec      	b.n	8003b72 <chHeapFree+0x52>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8003b98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8003b9c:	4411      	add	r1, r2
 8003b9e:	3101      	adds	r1, #1
 8003ba0:	6059      	str	r1, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 8003ba2:	f856 2c08 	ldr.w	r2, [r6, #-8]
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e7e9      	b.n	8003b7e <chHeapFree+0x5e>
 8003baa:	bf00      	nop
 8003bac:	0000      	movs	r0, r0
	...

08003bb0 <dyn_release_object_heap>:
                                    dyn_list_t *dlp) {
 8003bb0:	b508      	push	{r3, lr}
  dep->refs--;
 8003bb2:	6843      	ldr	r3, [r0, #4]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	6043      	str	r3, [r0, #4]
  if (dep->refs == (ucnt_t)0) {
 8003bb8:	b103      	cbz	r3, 8003bbc <dyn_release_object_heap+0xc>
}
 8003bba:	bd08      	pop	{r3, pc}
    dep = dyn_list_unlink(dep, dlp);
 8003bbc:	f7fd fd98 	bl	80016f0 <dyn_list_unlink>
    chHeapFree((void *)dep);
 8003bc0:	f7ff ffae 	bl	8003b20 <chHeapFree>
 8003bc4:	e7f9      	b.n	8003bba <dyn_release_object_heap+0xa>
 8003bc6:	bf00      	nop
	...

08003bd0 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4605      	mov	r5, r0

  F_LOCK();
 8003bd4:	4c06      	ldr	r4, [pc, #24]	; (8003bf0 <chFactoryReleasePipe+0x20>)
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7ff fbfa 	bl	80033d0 <chMtxLock>

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);
 8003bdc:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8003be0:	4628      	mov	r0, r5
 8003be2:	f7ff ffe5 	bl	8003bb0 <dyn_release_object_heap>

  F_UNLOCK();
 8003be6:	4620      	mov	r0, r4
 8003be8:	f7ff fa9a 	bl	8003120 <chMtxUnlock>
}
 8003bec:	bd38      	pop	{r3, r4, r5, pc}
 8003bee:	bf00      	nop
 8003bf0:	20001a90 	.word	0x20001a90
	...

08003c00 <oslib_test_009_006_teardown>:
 *   trigger an assertion.
 * - [9.6.6] Retrieving the dynamic pipe by name again, must not exist.
 * .
 */

static void oslib_test_009_006_teardown(void) {
 8003c00:	b510      	push	{r4, lr}
  dyn_pipe_t *dpp;

  dpp = chFactoryFindPipe("mypipe");
 8003c02:	4806      	ldr	r0, [pc, #24]	; (8003c1c <oslib_test_009_006_teardown+0x1c>)
 8003c04:	f7ff fc2c 	bl	8003460 <chFactoryFindPipe>
  if (dpp != NULL) {
 8003c08:	4604      	mov	r4, r0
 8003c0a:	b918      	cbnz	r0, 8003c14 <oslib_test_009_006_teardown+0x14>
 8003c0c:	e005      	b.n	8003c1a <oslib_test_009_006_teardown+0x1a>
    while (dpp->element.refs > 0U) {
      chFactoryReleasePipe(dpp);
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f7ff ffde 	bl	8003bd0 <chFactoryReleasePipe>
    while (dpp->element.refs > 0U) {
 8003c14:	6863      	ldr	r3, [r4, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f9      	bne.n	8003c0e <oslib_test_009_006_teardown+0xe>
    }
  }
}
 8003c1a:	bd10      	pop	{r4, pc}
 8003c1c:	0800c8e8 	.word	0x0800c8e8

08003c20 <chFactoryReleaseObjectsFIFO>:
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4605      	mov	r5, r0
  F_LOCK();
 8003c24:	4c06      	ldr	r4, [pc, #24]	; (8003c40 <chFactoryReleaseObjectsFIFO+0x20>)
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7ff fbd2 	bl	80033d0 <chMtxLock>
  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);
 8003c2c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003c30:	4628      	mov	r0, r5
 8003c32:	f7ff ffbd 	bl	8003bb0 <dyn_release_object_heap>
  F_UNLOCK();
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7ff fa72 	bl	8003120 <chMtxUnlock>
}
 8003c3c:	bd38      	pop	{r3, r4, r5, pc}
 8003c3e:	bf00      	nop
 8003c40:	20001a90 	.word	0x20001a90
	...

08003c50 <oslib_test_009_005_teardown>:
static void oslib_test_009_005_teardown(void) {
 8003c50:	b510      	push	{r4, lr}
  dofp = chFactoryFindObjectsFIFO("myfifo");
 8003c52:	4806      	ldr	r0, [pc, #24]	; (8003c6c <oslib_test_009_005_teardown+0x1c>)
 8003c54:	f7ff fc1c 	bl	8003490 <chFactoryFindObjectsFIFO>
  if (dofp != NULL) {
 8003c58:	4604      	mov	r4, r0
 8003c5a:	b918      	cbnz	r0, 8003c64 <oslib_test_009_005_teardown+0x14>
 8003c5c:	e005      	b.n	8003c6a <oslib_test_009_005_teardown+0x1a>
      chFactoryReleaseObjectsFIFO(dofp);
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f7ff ffde 	bl	8003c20 <chFactoryReleaseObjectsFIFO>
    while (dofp->element.refs > 0U) {
 8003c64:	6863      	ldr	r3, [r4, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f9      	bne.n	8003c5e <oslib_test_009_005_teardown+0xe>
}
 8003c6a:	bd10      	pop	{r4, pc}
 8003c6c:	0800c8f0 	.word	0x0800c8f0

08003c70 <chFactoryReleaseMailbox>:
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4605      	mov	r5, r0
  F_LOCK();
 8003c74:	4c06      	ldr	r4, [pc, #24]	; (8003c90 <chFactoryReleaseMailbox+0x20>)
 8003c76:	4620      	mov	r0, r4
 8003c78:	f7ff fbaa 	bl	80033d0 <chMtxLock>
  dyn_release_object_heap(&dmp->element, &ch_factory.mbx_list);
 8003c7c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8003c80:	4628      	mov	r0, r5
 8003c82:	f7ff ff95 	bl	8003bb0 <dyn_release_object_heap>
  F_UNLOCK();
 8003c86:	4620      	mov	r0, r4
 8003c88:	f7ff fa4a 	bl	8003120 <chMtxUnlock>
}
 8003c8c:	bd38      	pop	{r3, r4, r5, pc}
 8003c8e:	bf00      	nop
 8003c90:	20001a90 	.word	0x20001a90
	...

08003ca0 <oslib_test_009_004_teardown>:
static void oslib_test_009_004_teardown(void) {
 8003ca0:	b510      	push	{r4, lr}
  dmp = chFactoryFindMailbox("mymbx");
 8003ca2:	4806      	ldr	r0, [pc, #24]	; (8003cbc <oslib_test_009_004_teardown+0x1c>)
 8003ca4:	f7ff fc0c 	bl	80034c0 <chFactoryFindMailbox>
  if (dmp != NULL) {
 8003ca8:	4604      	mov	r4, r0
 8003caa:	b918      	cbnz	r0, 8003cb4 <oslib_test_009_004_teardown+0x14>
 8003cac:	e005      	b.n	8003cba <oslib_test_009_004_teardown+0x1a>
      chFactoryReleaseMailbox(dmp);
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f7ff ffde 	bl	8003c70 <chFactoryReleaseMailbox>
    while (dmp->element.refs > 0U) {
 8003cb4:	6863      	ldr	r3, [r4, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f9      	bne.n	8003cae <oslib_test_009_004_teardown+0xe>
}
 8003cba:	bd10      	pop	{r4, pc}
 8003cbc:	0800c8f8 	.word	0x0800c8f8

08003cc0 <chFactoryReleaseBuffer>:
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4605      	mov	r5, r0
  F_LOCK();
 8003cc4:	4c06      	ldr	r4, [pc, #24]	; (8003ce0 <chFactoryReleaseBuffer+0x20>)
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f7ff fb82 	bl	80033d0 <chMtxLock>
  dyn_release_object_heap(&dbp->element, &ch_factory.buf_list);
 8003ccc:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f7ff ff6d 	bl	8003bb0 <dyn_release_object_heap>
  F_UNLOCK();
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f7ff fa22 	bl	8003120 <chMtxUnlock>
}
 8003cdc:	bd38      	pop	{r3, r4, r5, pc}
 8003cde:	bf00      	nop
 8003ce0:	20001a90 	.word	0x20001a90
	...

08003cf0 <oslib_test_009_002_teardown>:
static void oslib_test_009_002_teardown(void) {
 8003cf0:	b510      	push	{r4, lr}
  dbp = chFactoryFindBuffer("mybuf");
 8003cf2:	4806      	ldr	r0, [pc, #24]	; (8003d0c <oslib_test_009_002_teardown+0x1c>)
 8003cf4:	f7ff fcfc 	bl	80036f0 <chFactoryFindBuffer>
  if (dbp != NULL) {
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	b918      	cbnz	r0, 8003d04 <oslib_test_009_002_teardown+0x14>
 8003cfc:	e005      	b.n	8003d0a <oslib_test_009_002_teardown+0x1a>
      chFactoryReleaseBuffer(dbp);
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f7ff ffde 	bl	8003cc0 <chFactoryReleaseBuffer>
    while (dbp->element.refs > 0U) {
 8003d04:	6863      	ldr	r3, [r4, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f9      	bne.n	8003cfe <oslib_test_009_002_teardown+0xe>
}
 8003d0a:	bd10      	pop	{r4, pc}
 8003d0c:	0800c900 	.word	0x0800c900

08003d10 <chThdRelease>:
void chThdRelease(thread_t *tp) {
 8003d10:	b508      	push	{r3, lr}
 8003d12:	2320      	movs	r3, #32
 8003d14:	f383 8811 	msr	BASEPRI, r3
  tp->refs--;
 8003d18:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8003d22:	6a03      	ldr	r3, [r0, #32]
 8003d24:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8003d28:	2b0f      	cmp	r3, #15
 8003d2a:	d003      	beq.n	8003d34 <chThdRelease+0x24>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f383 8811 	msr	BASEPRI, r3
}
 8003d32:	bd08      	pop	{r3, pc}
    REG_REMOVE(tp);
 8003d34:	6943      	ldr	r3, [r0, #20]
 8003d36:	6902      	ldr	r2, [r0, #16]
 8003d38:	611a      	str	r2, [r3, #16]
 8003d3a:	6903      	ldr	r3, [r0, #16]
 8003d3c:	6942      	ldr	r2, [r0, #20]
 8003d3e:	615a      	str	r2, [r3, #20]
 8003d40:	2300      	movs	r3, #0
 8003d42:	f383 8811 	msr	BASEPRI, r3
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8003d46:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d006      	beq.n	8003d60 <chThdRelease+0x50>
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d1ed      	bne.n	8003d32 <chThdRelease+0x22>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8003d56:	69c1      	ldr	r1, [r0, #28]
 8003d58:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003d5a:	f7fd fd01 	bl	8001760 <chPoolFree>
    return;
 8003d5e:	e7e8      	b.n	8003d32 <chThdRelease+0x22>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8003d60:	69c0      	ldr	r0, [r0, #28]
 8003d62:	f7ff fedd 	bl	8003b20 <chHeapFree>
      break;
 8003d66:	e7e4      	b.n	8003d32 <chThdRelease+0x22>
	...

08003d70 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8003d70:	b510      	push	{r4, lr}
 8003d72:	2320      	movs	r3, #32
 8003d74:	f383 8811 	msr	BASEPRI, r3
  thread_t *ntp;

  chSysLock();
  ntp = tp->newer;
 8003d78:	6904      	ldr	r4, [r0, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <chRegNextThread+0x2c>)
 8003d7c:	429c      	cmp	r4, r3
 8003d7e:	d00b      	beq.n	8003d98 <chRegNextThread+0x28>
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
    ntp->refs++;
 8003d80:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003d84:	3301      	adds	r3, #1
 8003d86:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8003d90:	f7ff ffbe 	bl	8003d10 <chThdRelease>
#endif

  return ntp;
}
 8003d94:	4620      	mov	r0, r4
 8003d96:	bd10      	pop	{r4, pc}
    ntp = NULL;
 8003d98:	2400      	movs	r4, #0
 8003d9a:	e7f6      	b.n	8003d8a <chRegNextThread+0x1a>
 8003d9c:	20001a18 	.word	0x20001a18

08003da0 <cmd_threads>:
#endif

#if (SHELL_CMD_THREADS_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8003da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da2:	b087      	sub	sp, #28
 8003da4:	4606      	mov	r6, r0
  static const char *states[] = {CH_STATE_NAMES};
  thread_t *tp;

  (void)argv;
  if (argc > 0) {
 8003da6:	2900      	cmp	r1, #0
 8003da8:	dc06      	bgt.n	8003db8 <cmd_threads+0x18>
    shellUsage(chp, "threads");
    return;
  }
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8003daa:	4917      	ldr	r1, [pc, #92]	; (8003e08 <cmd_threads+0x68>)
 8003dac:	f7fe fd38 	bl	8002820 <chprintf>
  tp = chRegFirstThread();
 8003db0:	f7fe f84e 	bl	8001e50 <chRegFirstThread>
 8003db4:	4604      	mov	r4, r0
 8003db6:	e015      	b.n	8003de4 <cmd_threads+0x44>
    shellUsage(chp, "threads");
 8003db8:	4a14      	ldr	r2, [pc, #80]	; (8003e0c <cmd_threads+0x6c>)
 8003dba:	4915      	ldr	r1, [pc, #84]	; (8003e10 <cmd_threads+0x70>)
 8003dbc:	f7fe fd30 	bl	8002820 <chprintf>
             stklimit, (uint32_t)tp->ctx.sp, (uint32_t)tp,
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
             tp->name == NULL ? "" : tp->name);
    tp = chRegNextThread(tp);
  } while (tp != NULL);
}
 8003dc0:	b007      	add	sp, #28
 8003dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8003dc4:	9504      	str	r5, [sp, #16]
 8003dc6:	f8cd c00c 	str.w	ip, [sp, #12]
 8003dca:	9702      	str	r7, [sp, #8]
 8003dcc:	9101      	str	r1, [sp, #4]
 8003dce:	9000      	str	r0, [sp, #0]
 8003dd0:	4910      	ldr	r1, [pc, #64]	; (8003e14 <cmd_threads+0x74>)
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f7fe fd24 	bl	8002820 <chprintf>
    tp = chRegNextThread(tp);
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f7ff ffc9 	bl	8003d70 <chRegNextThread>
  } while (tp != NULL);
 8003dde:	4604      	mov	r4, r0
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d0ed      	beq.n	8003dc0 <cmd_threads+0x20>
    uint32_t stklimit = (uint32_t)tp->wabase;
 8003de4:	69e2      	ldr	r2, [r4, #28]
             stklimit, (uint32_t)tp->ctx.sp, (uint32_t)tp,
 8003de6:	68e3      	ldr	r3, [r4, #12]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8003de8:	4620      	mov	r0, r4
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 8003dea:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8003dee:	3901      	subs	r1, #1
             (uint32_t)tp->refs - 1, (uint32_t)tp->prio, states[tp->state],
 8003df0:	68a7      	ldr	r7, [r4, #8]
 8003df2:	f894 c020 	ldrb.w	ip, [r4, #32]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8003df6:	4d08      	ldr	r5, [pc, #32]	; (8003e18 <cmd_threads+0x78>)
 8003df8:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
             tp->name == NULL ? "" : tp->name);
 8003dfc:	69a5      	ldr	r5, [r4, #24]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	d1e0      	bne.n	8003dc4 <cmd_threads+0x24>
 8003e02:	4d06      	ldr	r5, [pc, #24]	; (8003e1c <cmd_threads+0x7c>)
 8003e04:	e7de      	b.n	8003dc4 <cmd_threads+0x24>
 8003e06:	bf00      	nop
 8003e08:	0800c908 	.word	0x0800c908
 8003e0c:	0800d644 	.word	0x0800d644
 8003e10:	0800c434 	.word	0x0800c434
 8003e14:	0800c948 	.word	0x0800c948
 8003e18:	0800e238 	.word	0x0800e238
 8003e1c:	0800c3e4 	.word	0x0800c3e4

08003e20 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4604      	mov	r4, r0
 8003e24:	2320      	movs	r3, #32
 8003e26:	f383 8811 	msr	BASEPRI, r3
  if (tp->state != CH_STATE_FINAL) {
 8003e2a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	d108      	bne.n	8003e44 <chThdWait+0x24>
  msg = tp->u.exitcode;
 8003e32:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003e34:	2300      	movs	r3, #0
 8003e36:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f7ff ff68 	bl	8003d10 <chThdRelease>
}
 8003e40:	4628      	mov	r0, r5
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
    list_insert(currp, &tp->waiting);
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <chThdWait+0x38>)
 8003e46:	699b      	ldr	r3, [r3, #24]
  tp->queue.next = tlp->next;
 8003e48:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003e4a:	601a      	str	r2, [r3, #0]
  tlp->next = tp;
 8003e4c:	6283      	str	r3, [r0, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTEXIT);
 8003e4e:	2009      	movs	r0, #9
 8003e50:	f006 fbae 	bl	800a5b0 <chSchGoSleepS>
 8003e54:	e7ed      	b.n	8003e32 <chThdWait+0x12>
 8003e56:	bf00      	nop
 8003e58:	20001a18 	.word	0x20001a18
 8003e5c:	00000000 	.word	0x00000000

08003e60 <test_wait_threads>:

/*
 * Waits for the completion of all the test-spawned threads.
 */
void test_wait_threads(void) {
 8003e60:	b510      	push	{r4, lr}
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
 8003e62:	2400      	movs	r4, #0
 8003e64:	e000      	b.n	8003e68 <test_wait_threads+0x8>
 8003e66:	3401      	adds	r4, #1
 8003e68:	2c04      	cmp	r4, #4
 8003e6a:	d80b      	bhi.n	8003e84 <test_wait_threads+0x24>
    if (threads[i] != NULL) {
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <test_wait_threads+0x28>)
 8003e6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d0f7      	beq.n	8003e66 <test_wait_threads+0x6>
      chThdWait(threads[i]);
 8003e76:	f7ff ffd3 	bl	8003e20 <chThdWait>
      threads[i] = NULL;
 8003e7a:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <test_wait_threads+0x28>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8003e82:	e7f0      	b.n	8003e66 <test_wait_threads+0x6>
    }
}
 8003e84:	bd10      	pop	{r4, pc}
 8003e86:	bf00      	nop
 8003e88:	2000246c 	.word	0x2000246c
 8003e8c:	00000000 	.word	0x00000000

08003e90 <rt_test_010_002_execute>:

static void rt_test_010_002_execute(void) {
 8003e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e94:	b082      	sub	sp, #8
  unsigned i;
  tprio_t prio;

  /* [10.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8003e96:	4b49      	ldr	r3, [pc, #292]	; (8003fbc <rt_test_010_002_execute+0x12c>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < 4; i++)
 8003e9c:	2400      	movs	r4, #0
 8003e9e:	e006      	b.n	8003eae <rt_test_010_002_execute+0x1e>
      chPoolFree(&mp1, wa[i]);
 8003ea0:	4b47      	ldr	r3, [pc, #284]	; (8003fc0 <rt_test_010_002_execute+0x130>)
 8003ea2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8003ea6:	4847      	ldr	r0, [pc, #284]	; (8003fc4 <rt_test_010_002_execute+0x134>)
 8003ea8:	f7fd fc5a 	bl	8001760 <chPoolFree>
    for (i = 0; i < 4; i++)
 8003eac:	3401      	adds	r4, #1
 8003eae:	2c03      	cmp	r4, #3
 8003eb0:	d9f6      	bls.n	8003ea0 <rt_test_010_002_execute+0x10>
  return ch.rlist.current;
 8003eb2:	4b45      	ldr	r3, [pc, #276]	; (8003fc8 <rt_test_010_002_execute+0x138>)
 8003eb4:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8003eb6:	689e      	ldr	r6, [r3, #8]
    prio = chThdGetPriorityX();
  }
  test_end_step(2);

  /* [10.2.3] Creating the five threads.*/
  test_set_step(3);
 8003eb8:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8003fbc <rt_test_010_002_execute+0x12c>
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	f8c8 3000 	str.w	r3, [r8]
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8003ec2:	4f42      	ldr	r7, [pc, #264]	; (8003fcc <rt_test_010_002_execute+0x13c>)
 8003ec4:	4d3f      	ldr	r5, [pc, #252]	; (8003fc4 <rt_test_010_002_execute+0x134>)
 8003ec6:	4b42      	ldr	r3, [pc, #264]	; (8003fd0 <rt_test_010_002_execute+0x140>)
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	463b      	mov	r3, r7
 8003ecc:	1e72      	subs	r2, r6, #1
 8003ece:	4941      	ldr	r1, [pc, #260]	; (8003fd4 <rt_test_010_002_execute+0x144>)
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	f7fe fffd 	bl	8002ed0 <chThdCreateFromMemoryPool>
 8003ed6:	4c40      	ldr	r4, [pc, #256]	; (8003fd8 <rt_test_010_002_execute+0x148>)
 8003ed8:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8003eda:	4b40      	ldr	r3, [pc, #256]	; (8003fdc <rt_test_010_002_execute+0x14c>)
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	463b      	mov	r3, r7
 8003ee0:	1eb2      	subs	r2, r6, #2
 8003ee2:	493f      	ldr	r1, [pc, #252]	; (8003fe0 <rt_test_010_002_execute+0x150>)
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f7fe fff3 	bl	8002ed0 <chThdCreateFromMemoryPool>
 8003eea:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8003eec:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <rt_test_010_002_execute+0x154>)
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	1ef2      	subs	r2, r6, #3
 8003ef4:	493c      	ldr	r1, [pc, #240]	; (8003fe8 <rt_test_010_002_execute+0x158>)
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7fe ffea 	bl	8002ed0 <chThdCreateFromMemoryPool>
 8003efc:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8003efe:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <rt_test_010_002_execute+0x15c>)
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	463b      	mov	r3, r7
 8003f04:	1f32      	subs	r2, r6, #4
 8003f06:	493a      	ldr	r1, [pc, #232]	; (8003ff0 <rt_test_010_002_execute+0x160>)
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f7fe ffe1 	bl	8002ed0 <chThdCreateFromMemoryPool>
 8003f0e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8003f10:	4b38      	ldr	r3, [pc, #224]	; (8003ff4 <rt_test_010_002_execute+0x164>)
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	463b      	mov	r3, r7
 8003f16:	1f72      	subs	r2, r6, #5
 8003f18:	4937      	ldr	r1, [pc, #220]	; (8003ff8 <rt_test_010_002_execute+0x168>)
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f7fe ffd8 	bl	8002ed0 <chThdCreateFromMemoryPool>
 8003f20:	6120      	str	r0, [r4, #16]
  }
  test_end_step(3);

  /* [10.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 8003f22:	2304      	movs	r3, #4
 8003f24:	f8c8 3000 	str.w	r3, [r8]
  {
    test_assert((threads[0] != NULL) &&
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	b14b      	cbz	r3, 8003f40 <rt_test_010_002_execute+0xb0>
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	b17b      	cbz	r3, 8003f50 <rt_test_010_002_execute+0xc0>
 8003f30:	68a3      	ldr	r3, [r4, #8]
 8003f32:	b17b      	cbz	r3, 8003f54 <rt_test_010_002_execute+0xc4>
 8003f34:	68e3      	ldr	r3, [r4, #12]
 8003f36:	b10b      	cbz	r3, 8003f3c <rt_test_010_002_execute+0xac>
 8003f38:	2001      	movs	r0, #1
 8003f3a:	e002      	b.n	8003f42 <rt_test_010_002_execute+0xb2>
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	e000      	b.n	8003f42 <rt_test_010_002_execute+0xb2>
 8003f40:	2000      	movs	r0, #0
 8003f42:	492e      	ldr	r1, [pc, #184]	; (8003ffc <rt_test_010_002_execute+0x16c>)
 8003f44:	f7fd f954 	bl	80011f0 <_test_assert>
 8003f48:	b130      	cbz	r0, 8003f58 <rt_test_010_002_execute+0xc8>
    for (i = 0; i < 4; i++)
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
  }
  test_end_step(6);
}
 8003f4a:	b002      	add	sp, #8
 8003f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert((threads[0] != NULL) &&
 8003f50:	2000      	movs	r0, #0
 8003f52:	e7f6      	b.n	8003f42 <rt_test_010_002_execute+0xb2>
 8003f54:	2000      	movs	r0, #0
 8003f56:	e7f4      	b.n	8003f42 <rt_test_010_002_execute+0xb2>
    test_assert(threads[4] == NULL,
 8003f58:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <rt_test_010_002_execute+0x148>)
 8003f5a:	6918      	ldr	r0, [r3, #16]
 8003f5c:	4928      	ldr	r1, [pc, #160]	; (8004000 <rt_test_010_002_execute+0x170>)
 8003f5e:	fab0 f080 	clz	r0, r0
 8003f62:	0940      	lsrs	r0, r0, #5
 8003f64:	f7fd f944 	bl	80011f0 <_test_assert>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d1ee      	bne.n	8003f4a <rt_test_010_002_execute+0xba>
  test_set_step(5);
 8003f6c:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <rt_test_010_002_execute+0x12c>)
 8003f6e:	2205      	movs	r2, #5
 8003f70:	601a      	str	r2, [r3, #0]
    test_wait_threads();
 8003f72:	f7ff ff75 	bl	8003e60 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8003f76:	4923      	ldr	r1, [pc, #140]	; (8004004 <rt_test_010_002_execute+0x174>)
 8003f78:	4823      	ldr	r0, [pc, #140]	; (8004008 <rt_test_010_002_execute+0x178>)
 8003f7a:	f7fd f9e9 	bl	8001350 <_test_assert_sequence>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d1e3      	bne.n	8003f4a <rt_test_010_002_execute+0xba>
  test_set_step(6);
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <rt_test_010_002_execute+0x12c>)
 8003f84:	2206      	movs	r2, #6
 8003f86:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 8003f88:	2400      	movs	r4, #0
 8003f8a:	2c03      	cmp	r4, #3
 8003f8c:	d80c      	bhi.n	8003fa8 <rt_test_010_002_execute+0x118>
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
 8003f8e:	480d      	ldr	r0, [pc, #52]	; (8003fc4 <rt_test_010_002_execute+0x134>)
 8003f90:	f7fd fc16 	bl	80017c0 <chPoolAlloc>
 8003f94:	491d      	ldr	r1, [pc, #116]	; (800400c <rt_test_010_002_execute+0x17c>)
 8003f96:	3800      	subs	r0, #0
 8003f98:	bf18      	it	ne
 8003f9a:	2001      	movne	r0, #1
 8003f9c:	f7fd f928 	bl	80011f0 <_test_assert>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d1d2      	bne.n	8003f4a <rt_test_010_002_execute+0xba>
    for (i = 0; i < 4; i++)
 8003fa4:	3401      	adds	r4, #1
 8003fa6:	e7f0      	b.n	8003f8a <rt_test_010_002_execute+0xfa>
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8003fa8:	4806      	ldr	r0, [pc, #24]	; (8003fc4 <rt_test_010_002_execute+0x134>)
 8003faa:	f7fd fc09 	bl	80017c0 <chPoolAlloc>
 8003fae:	4918      	ldr	r1, [pc, #96]	; (8004010 <rt_test_010_002_execute+0x180>)
 8003fb0:	fab0 f080 	clz	r0, r0
 8003fb4:	0940      	lsrs	r0, r0, #5
 8003fb6:	f7fd f91b 	bl	80011f0 <_test_assert>
  test_end_step(6);
 8003fba:	e7c6      	b.n	8003f4a <rt_test_010_002_execute+0xba>
 8003fbc:	20002454 	.word	0x20002454
 8003fc0:	0800e278 	.word	0x0800e278
 8003fc4:	20001bf0 	.word	0x20001bf0
 8003fc8:	20001a18 	.word	0x20001a18
 8003fcc:	08000901 	.word	0x08000901
 8003fd0:	0800c978 	.word	0x0800c978
 8003fd4:	0800c970 	.word	0x0800c970
 8003fd8:	2000246c 	.word	0x2000246c
 8003fdc:	0800c984 	.word	0x0800c984
 8003fe0:	0800c97c 	.word	0x0800c97c
 8003fe4:	0800c990 	.word	0x0800c990
 8003fe8:	0800c988 	.word	0x0800c988
 8003fec:	0800da20 	.word	0x0800da20
 8003ff0:	0800c994 	.word	0x0800c994
 8003ff4:	0800ce2c 	.word	0x0800ce2c
 8003ff8:	0800c99c 	.word	0x0800c99c
 8003ffc:	0800c9a4 	.word	0x0800c9a4
 8004000:	0800c9bc 	.word	0x0800c9bc
 8004004:	0800c214 	.word	0x0800c214
 8004008:	0800c9d8 	.word	0x0800c9d8
 800400c:	0800c9e0 	.word	0x0800c9e0
 8004010:	0800c9f0 	.word	0x0800c9f0
	...

08004020 <rt_test_007_004_teardown>:
static void rt_test_007_004_teardown(void) {
 8004020:	b508      	push	{r3, lr}
  test_wait_threads();
 8004022:	f7ff ff1d 	bl	8003e60 <test_wait_threads>
}
 8004026:	bd08      	pop	{r3, pc}
	...

08004030 <rt_test_006_006_teardown>:
 * - [6.6.6] Signaling the binary semaphore again, the internal state
 *   must not change from "not taken".
 * .
 */

static void rt_test_006_006_teardown(void) {
 8004030:	b508      	push	{r3, lr}
  test_wait_threads();
 8004032:	f7ff ff15 	bl	8003e60 <test_wait_threads>
}
 8004036:	bd08      	pop	{r3, pc}
	...

08004040 <rt_test_006_005_teardown>:
static void rt_test_006_005_teardown(void) {
 8004040:	b508      	push	{r3, lr}
  test_wait_threads();
 8004042:	f7ff ff0d 	bl	8003e60 <test_wait_threads>
}
 8004046:	bd08      	pop	{r3, pc}
	...

08004050 <chHeapAllocAligned>:
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8004050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004054:	460f      	mov	r7, r1
 8004056:	4615      	mov	r5, r2
  if (heapp == NULL) {
 8004058:	4680      	mov	r8, r0
 800405a:	2800      	cmp	r0, #0
 800405c:	d038      	beq.n	80040d0 <chHeapAllocAligned+0x80>
  if (align < CH_HEAP_ALIGNMENT) {
 800405e:	2d07      	cmp	r5, #7
 8004060:	d800      	bhi.n	8004064 <chHeapAllocAligned+0x14>
    align = CH_HEAP_ALIGNMENT;
 8004062:	2508      	movs	r5, #8
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004064:	1dfe      	adds	r6, r7, #7
 8004066:	08f6      	lsrs	r6, r6, #3
  H_LOCK(heapp);
 8004068:	f108 090c 	add.w	r9, r8, #12
 800406c:	4648      	mov	r0, r9
 800406e:	f7ff f9af 	bl	80033d0 <chMtxLock>
  qp = &heapp->header;
 8004072:	f108 0404 	add.w	r4, r8, #4
  while (H_NEXT(qp) != NULL) {
 8004076:	4621      	mov	r1, r4
 8004078:	6824      	ldr	r4, [r4, #0]
 800407a:	2c00      	cmp	r4, #0
 800407c:	d04a      	beq.n	8004114 <chHeapAllocAligned+0xc4>
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800407e:	1963      	adds	r3, r4, r5
 8004080:	3307      	adds	r3, #7
 8004082:	426a      	negs	r2, r5
 8004084:	4013      	ands	r3, r2
 8004086:	3b08      	subs	r3, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004088:	6860      	ldr	r0, [r4, #4]
 800408a:	1c42      	adds	r2, r0, #1
 800408c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8004090:	429a      	cmp	r2, r3
 8004092:	d9f0      	bls.n	8004076 <chHeapAllocAligned+0x26>
 8004094:	f103 0c08 	add.w	ip, r3, #8
 8004098:	eba2 020c 	sub.w	r2, r2, ip
 800409c:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80040a0:	ebb6 0fe2 	cmp.w	r6, r2, asr #3
 80040a4:	d8e7      	bhi.n	8004076 <chHeapAllocAligned+0x26>
      if (ahp > hp) {
 80040a6:	429c      	cmp	r4, r3
 80040a8:	d215      	bcs.n	80040d6 <chHeapAllocAligned+0x86>
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80040aa:	f104 0208 	add.w	r2, r4, #8
 80040ae:	1a9a      	subs	r2, r3, r2
 80040b0:	10d2      	asrs	r2, r2, #3
 80040b2:	6062      	str	r2, [r4, #4]
        if (bpages > pages) {
 80040b4:	45b4      	cmp	ip, r6
 80040b6:	d921      	bls.n	80040fc <chHeapAllocAligned+0xac>
          fp = H_BLOCK(ahp) + pages;
 80040b8:	1c70      	adds	r0, r6, #1
 80040ba:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 80040be:	ebac 0206 	sub.w	r2, ip, r6
 80040c2:	3a01      	subs	r2, #1
 80040c4:	604a      	str	r2, [r1, #4]
          H_NEXT(fp) = H_NEXT(hp);
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
          H_NEXT(hp) = fp;
 80040cc:	6021      	str	r1, [r4, #0]
 80040ce:	e015      	b.n	80040fc <chHeapAllocAligned+0xac>
    heapp = &default_heap;
 80040d0:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800413c <chHeapAllocAligned+0xec>
 80040d4:	e7c3      	b.n	800405e <chHeapAllocAligned+0xe>
        if (H_PAGES(hp) == pages) {
 80040d6:	42b0      	cmp	r0, r6
 80040d8:	d018      	beq.n	800410c <chHeapAllocAligned+0xbc>
          fp = H_BLOCK(hp) + pages;
 80040da:	3601      	adds	r6, #1
 80040dc:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
          H_NEXT(fp) = H_NEXT(hp);
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	f844 3036 	str.w	r3, [r4, r6, lsl #3]
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80040e6:	6863      	ldr	r3, [r4, #4]
 80040e8:	3301      	adds	r3, #1
 80040ea:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80040ee:	f102 0008 	add.w	r0, r2, #8
 80040f2:	1a1b      	subs	r3, r3, r0
 80040f4:	10db      	asrs	r3, r3, #3
 80040f6:	6053      	str	r3, [r2, #4]
          H_NEXT(qp) = fp;
 80040f8:	600a      	str	r2, [r1, #0]
    hp = H_NEXT(qp);
 80040fa:	4623      	mov	r3, r4
      H_SIZE(hp) = size;
 80040fc:	605f      	str	r7, [r3, #4]
      H_HEAP(hp) = heapp;
 80040fe:	461c      	mov	r4, r3
 8004100:	f844 8b08 	str.w	r8, [r4], #8
      H_UNLOCK(heapp);
 8004104:	4648      	mov	r0, r9
 8004106:	f7ff f80b 	bl	8003120 <chMtxUnlock>
      return (void *)H_BLOCK(hp);
 800410a:	e013      	b.n	8004134 <chHeapAllocAligned+0xe4>
          H_NEXT(qp) = H_NEXT(hp);
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	600b      	str	r3, [r1, #0]
    hp = H_NEXT(qp);
 8004110:	4623      	mov	r3, r4
 8004112:	e7f3      	b.n	80040fc <chHeapAllocAligned+0xac>
  H_UNLOCK(heapp);
 8004114:	4648      	mov	r0, r9
 8004116:	f7ff f803 	bl	8003120 <chMtxUnlock>
  if (heapp->provider != NULL) {
 800411a:	f8d8 3000 	ldr.w	r3, [r8]
 800411e:	b14b      	cbz	r3, 8004134 <chHeapAllocAligned+0xe4>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 8004120:	2208      	movs	r2, #8
 8004122:	4629      	mov	r1, r5
 8004124:	00f0      	lsls	r0, r6, #3
 8004126:	4798      	blx	r3
    if (ahp != NULL) {
 8004128:	4604      	mov	r4, r0
 800412a:	b118      	cbz	r0, 8004134 <chHeapAllocAligned+0xe4>
      H_HEAP(hp) = heapp;
 800412c:	f840 8c08 	str.w	r8, [r0, #-8]
      H_SIZE(hp) = size;
 8004130:	f840 7c04 	str.w	r7, [r0, #-4]
}
 8004134:	4620      	mov	r0, r4
 8004136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800413a:	bf00      	nop
 800413c:	20001ae0 	.word	0x20001ae0

08004140 <oslib_test_008_002_execute>:
 *   is freed using chHeapFree(), must not fail.
 * - [8.2.2] Testing allocation failure.
 * .
 */

static void oslib_test_008_002_execute(void) {
 8004140:	b510      	push	{r4, lr}
 8004142:	b082      	sub	sp, #8
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 8004144:	4b14      	ldr	r3, [pc, #80]	; (8004198 <oslib_test_008_002_execute+0x58>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
 800414a:	466a      	mov	r2, sp
 800414c:	a901      	add	r1, sp, #4
 800414e:	2000      	movs	r0, #0
 8004150:	f7ff fc7e 	bl	8003a50 <chHeapStatus>
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 8004154:	2208      	movs	r2, #8
 8004156:	2110      	movs	r1, #16
 8004158:	4810      	ldr	r0, [pc, #64]	; (800419c <oslib_test_008_002_execute+0x5c>)
 800415a:	f7ff ff79 	bl	8004050 <chHeapAllocAligned>
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
 800415e:	4604      	mov	r4, r0
 8004160:	490f      	ldr	r1, [pc, #60]	; (80041a0 <oslib_test_008_002_execute+0x60>)
 8004162:	3800      	subs	r0, #0
 8004164:	bf18      	it	ne
 8004166:	2001      	movne	r0, #1
 8004168:	f7fd f842 	bl	80011f0 <_test_assert>
 800416c:	b108      	cbz	r0, 8004172 <oslib_test_008_002_execute+0x32>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
  test_end_step(2);
}
 800416e:	b002      	add	sp, #8
 8004170:	bd10      	pop	{r4, pc}
    chHeapFree(p1);
 8004172:	4620      	mov	r0, r4
 8004174:	f7ff fcd4 	bl	8003b20 <chHeapFree>
  test_set_step(2);
 8004178:	4b07      	ldr	r3, [pc, #28]	; (8004198 <oslib_test_008_002_execute+0x58>)
 800417a:	2202      	movs	r2, #2
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	2208      	movs	r2, #8
 8004180:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8004184:	2000      	movs	r0, #0
 8004186:	f7ff ff63 	bl	8004050 <chHeapAllocAligned>
    test_assert(p1 == NULL, "allocation not failed");
 800418a:	4906      	ldr	r1, [pc, #24]	; (80041a4 <oslib_test_008_002_execute+0x64>)
 800418c:	fab0 f080 	clz	r0, r0
 8004190:	0940      	lsrs	r0, r0, #5
 8004192:	f7fd f82d 	bl	80011f0 <_test_assert>
 8004196:	e7ea      	b.n	800416e <oslib_test_008_002_execute+0x2e>
 8004198:	20002454 	.word	0x20002454
 800419c:	200023b4 	.word	0x200023b4
 80041a0:	0800ca04 	.word	0x0800ca04
 80041a4:	0800ca18 	.word	0x0800ca18
	...

080041b0 <oslib_test_008_001_execute>:
static void oslib_test_008_001_execute(void) {
 80041b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b2:	b085      	sub	sp, #20
  test_set_step(1);
 80041b4:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <oslib_test_008_001_execute+0x28>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80041ba:	2200      	movs	r2, #0
 80041bc:	a902      	add	r1, sp, #8
 80041be:	4807      	ldr	r0, [pc, #28]	; (80041dc <oslib_test_008_001_execute+0x2c>)
 80041c0:	f7ff fc46 	bl	8003a50 <chHeapStatus>
 80041c4:	4906      	ldr	r1, [pc, #24]	; (80041e0 <oslib_test_008_001_execute+0x30>)
 80041c6:	2801      	cmp	r0, #1
 80041c8:	bf14      	ite	ne
 80041ca:	2000      	movne	r0, #0
 80041cc:	2001      	moveq	r0, #1
 80041ce:	f7fd f80f 	bl	80011f0 <_test_assert>
 80041d2:	b138      	cbz	r0, 80041e4 <oslib_test_008_001_execute+0x34>
}
 80041d4:	b005      	add	sp, #20
 80041d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041d8:	20002454 	.word	0x20002454
 80041dc:	200023b4 	.word	0x200023b4
 80041e0:	0800ca30 	.word	0x0800ca30
  test_set_step(2);
 80041e4:	4bbd      	ldr	r3, [pc, #756]	; (80044dc <oslib_test_008_001_execute+0x32c>)
 80041e6:	2202      	movs	r2, #2
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	2208      	movs	r2, #8
 80041ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041f0:	48bb      	ldr	r0, [pc, #748]	; (80044e0 <oslib_test_008_001_execute+0x330>)
 80041f2:	f7ff ff2d 	bl	8004050 <chHeapAllocAligned>
    test_assert(p1 == NULL, "allocation not failed");
 80041f6:	49bb      	ldr	r1, [pc, #748]	; (80044e4 <oslib_test_008_001_execute+0x334>)
 80041f8:	fab0 f080 	clz	r0, r0
 80041fc:	0940      	lsrs	r0, r0, #5
 80041fe:	f7fc fff7 	bl	80011f0 <_test_assert>
 8004202:	2800      	cmp	r0, #0
 8004204:	d1e6      	bne.n	80041d4 <oslib_test_008_001_execute+0x24>
  test_set_step(3);
 8004206:	4bb5      	ldr	r3, [pc, #724]	; (80044dc <oslib_test_008_001_execute+0x32c>)
 8004208:	2203      	movs	r2, #3
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	2208      	movs	r2, #8
 800420e:	2110      	movs	r1, #16
 8004210:	48b3      	ldr	r0, [pc, #716]	; (80044e0 <oslib_test_008_001_execute+0x330>)
 8004212:	f7ff ff1d 	bl	8004050 <chHeapAllocAligned>
    test_assert(p1 != NULL, "allocation failed");
 8004216:	4604      	mov	r4, r0
 8004218:	49b3      	ldr	r1, [pc, #716]	; (80044e8 <oslib_test_008_001_execute+0x338>)
 800421a:	3800      	subs	r0, #0
 800421c:	bf18      	it	ne
 800421e:	2001      	movne	r0, #1
 8004220:	f7fc ffe6 	bl	80011f0 <_test_assert>
 8004224:	2800      	cmp	r0, #0
 8004226:	d1d5      	bne.n	80041d4 <oslib_test_008_001_execute+0x24>
    chHeapFree(p1);
 8004228:	4620      	mov	r0, r4
 800422a:	f7ff fc79 	bl	8003b20 <chHeapFree>
  test_set_step(4);
 800422e:	4bab      	ldr	r3, [pc, #684]	; (80044dc <oslib_test_008_001_execute+0x32c>)
 8004230:	2204      	movs	r2, #4
 8004232:	601a      	str	r2, [r3, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8004234:	466a      	mov	r2, sp
 8004236:	a901      	add	r1, sp, #4
 8004238:	48a9      	ldr	r0, [pc, #676]	; (80044e0 <oslib_test_008_001_execute+0x330>)
 800423a:	f7ff fc09 	bl	8003a50 <chHeapStatus>
 800423e:	9003      	str	r0, [sp, #12]
    test_assert(n == 1, "missing free block");
 8004240:	49aa      	ldr	r1, [pc, #680]	; (80044ec <oslib_test_008_001_execute+0x33c>)
 8004242:	2801      	cmp	r0, #1
 8004244:	bf14      	ite	ne
 8004246:	2000      	movne	r0, #0
 8004248:	2001      	moveq	r0, #1
 800424a:	f7fc ffd1 	bl	80011f0 <_test_assert>
 800424e:	2800      	cmp	r0, #0
 8004250:	d1c0      	bne.n	80041d4 <oslib_test_008_001_execute+0x24>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 8004252:	49a7      	ldr	r1, [pc, #668]	; (80044f0 <oslib_test_008_001_execute+0x340>)
 8004254:	9801      	ldr	r0, [sp, #4]
 8004256:	280f      	cmp	r0, #15
 8004258:	bf94      	ite	ls
 800425a:	2000      	movls	r0, #0
 800425c:	2001      	movhi	r0, #1
 800425e:	f7fc ffc7 	bl	80011f0 <_test_assert>
 8004262:	2800      	cmp	r0, #0
 8004264:	d1b6      	bne.n	80041d4 <oslib_test_008_001_execute+0x24>
    test_assert(total_size == largest_size, "unexpected heap state");
 8004266:	49a2      	ldr	r1, [pc, #648]	; (80044f0 <oslib_test_008_001_execute+0x340>)
 8004268:	9801      	ldr	r0, [sp, #4]
 800426a:	9b00      	ldr	r3, [sp, #0]
 800426c:	4298      	cmp	r0, r3
 800426e:	bf14      	ite	ne
 8004270:	2000      	movne	r0, #0
 8004272:	2001      	moveq	r0, #1
 8004274:	f7fc ffbc 	bl	80011f0 <_test_assert>
 8004278:	2800      	cmp	r0, #0
 800427a:	d1ab      	bne.n	80041d4 <oslib_test_008_001_execute+0x24>
  test_set_step(5);
 800427c:	4b97      	ldr	r3, [pc, #604]	; (80044dc <oslib_test_008_001_execute+0x32c>)
 800427e:	2205      	movs	r2, #5
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	4c97      	ldr	r4, [pc, #604]	; (80044e0 <oslib_test_008_001_execute+0x330>)
 8004284:	2208      	movs	r2, #8
 8004286:	2110      	movs	r1, #16
 8004288:	4620      	mov	r0, r4
 800428a:	f7ff fee1 	bl	8004050 <chHeapAllocAligned>
 800428e:	4607      	mov	r7, r0
 8004290:	2208      	movs	r2, #8
 8004292:	2110      	movs	r1, #16
 8004294:	4620      	mov	r0, r4
 8004296:	f7ff fedb 	bl	8004050 <chHeapAllocAligned>
 800429a:	4606      	mov	r6, r0
 800429c:	2208      	movs	r2, #8
 800429e:	2110      	movs	r1, #16
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff fed5 	bl	8004050 <chHeapAllocAligned>
 80042a6:	4605      	mov	r5, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 80042a8:	4638      	mov	r0, r7
 80042aa:	f7ff fc39 	bl	8003b20 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 80042ae:	4630      	mov	r0, r6
 80042b0:	f7ff fc36 	bl	8003b20 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 80042b4:	4628      	mov	r0, r5
 80042b6:	f7ff fc33 	bl	8003b20 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80042ba:	2200      	movs	r2, #0
 80042bc:	a903      	add	r1, sp, #12
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff fbc6 	bl	8003a50 <chHeapStatus>
 80042c4:	498b      	ldr	r1, [pc, #556]	; (80044f4 <oslib_test_008_001_execute+0x344>)
 80042c6:	2801      	cmp	r0, #1
 80042c8:	bf14      	ite	ne
 80042ca:	2000      	movne	r0, #0
 80042cc:	2001      	moveq	r0, #1
 80042ce:	f7fc ff8f 	bl	80011f0 <_test_assert>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	f47f af7e 	bne.w	80041d4 <oslib_test_008_001_execute+0x24>
  test_set_step(6);
 80042d8:	4b80      	ldr	r3, [pc, #512]	; (80044dc <oslib_test_008_001_execute+0x32c>)
 80042da:	2206      	movs	r2, #6
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	2208      	movs	r2, #8
 80042e0:	2110      	movs	r1, #16
 80042e2:	4620      	mov	r0, r4
 80042e4:	f7ff feb4 	bl	8004050 <chHeapAllocAligned>
 80042e8:	4605      	mov	r5, r0
 80042ea:	2208      	movs	r2, #8
 80042ec:	2110      	movs	r1, #16
 80042ee:	4620      	mov	r0, r4
 80042f0:	f7ff feae 	bl	8004050 <chHeapAllocAligned>
 80042f4:	4606      	mov	r6, r0
 80042f6:	2208      	movs	r2, #8
 80042f8:	2110      	movs	r1, #16
 80042fa:	4620      	mov	r0, r4
 80042fc:	f7ff fea8 	bl	8004050 <chHeapAllocAligned>
    chHeapFree(p3);                                 /* Merges forward.*/
 8004300:	f7ff fc0e 	bl	8003b20 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 8004304:	4630      	mov	r0, r6
 8004306:	f7ff fc0b 	bl	8003b20 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 800430a:	4628      	mov	r0, r5
 800430c:	f7ff fc08 	bl	8003b20 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8004310:	2200      	movs	r2, #0
 8004312:	a903      	add	r1, sp, #12
 8004314:	4620      	mov	r0, r4
 8004316:	f7ff fb9b 	bl	8003a50 <chHeapStatus>
 800431a:	4976      	ldr	r1, [pc, #472]	; (80044f4 <oslib_test_008_001_execute+0x344>)
 800431c:	2801      	cmp	r0, #1
 800431e:	bf14      	ite	ne
 8004320:	2000      	movne	r0, #0
 8004322:	2001      	moveq	r0, #1
 8004324:	f7fc ff64 	bl	80011f0 <_test_assert>
 8004328:	2800      	cmp	r0, #0
 800432a:	f47f af53 	bne.w	80041d4 <oslib_test_008_001_execute+0x24>
  test_set_step(7);
 800432e:	4b6b      	ldr	r3, [pc, #428]	; (80044dc <oslib_test_008_001_execute+0x32c>)
 8004330:	2207      	movs	r2, #7
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	2208      	movs	r2, #8
 8004336:	2111      	movs	r1, #17
 8004338:	4620      	mov	r0, r4
 800433a:	f7ff fe89 	bl	8004050 <chHeapAllocAligned>
 800433e:	4605      	mov	r5, r0
 8004340:	2208      	movs	r2, #8
 8004342:	2110      	movs	r1, #16
 8004344:	4620      	mov	r0, r4
 8004346:	f7ff fe83 	bl	8004050 <chHeapAllocAligned>
 800434a:	4606      	mov	r6, r0
    chHeapFree(p1);
 800434c:	4628      	mov	r0, r5
 800434e:	f7ff fbe7 	bl	8003b20 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8004352:	2200      	movs	r2, #0
 8004354:	a903      	add	r1, sp, #12
 8004356:	4620      	mov	r0, r4
 8004358:	f7ff fb7a 	bl	8003a50 <chHeapStatus>
 800435c:	4966      	ldr	r1, [pc, #408]	; (80044f8 <oslib_test_008_001_execute+0x348>)
 800435e:	2802      	cmp	r0, #2
 8004360:	bf14      	ite	ne
 8004362:	2000      	movne	r0, #0
 8004364:	2001      	moveq	r0, #1
 8004366:	f7fc ff43 	bl	80011f0 <_test_assert>
 800436a:	2800      	cmp	r0, #0
 800436c:	f47f af32 	bne.w	80041d4 <oslib_test_008_001_execute+0x24>
 8004370:	4625      	mov	r5, r4
 8004372:	2208      	movs	r2, #8
 8004374:	2110      	movs	r1, #16
 8004376:	4620      	mov	r0, r4
 8004378:	f7ff fe6a 	bl	8004050 <chHeapAllocAligned>
 800437c:	4604      	mov	r4, r0
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 800437e:	2200      	movs	r2, #0
 8004380:	a903      	add	r1, sp, #12
 8004382:	4628      	mov	r0, r5
 8004384:	f7ff fb64 	bl	8003a50 <chHeapStatus>
 8004388:	2801      	cmp	r0, #1
 800438a:	f040 809b 	bne.w	80044c4 <oslib_test_008_001_execute+0x314>
 800438e:	2001      	movs	r0, #1
 8004390:	4958      	ldr	r1, [pc, #352]	; (80044f4 <oslib_test_008_001_execute+0x344>)
 8004392:	f7fc ff2d 	bl	80011f0 <_test_assert>
 8004396:	2800      	cmp	r0, #0
 8004398:	f47f af1c 	bne.w	80041d4 <oslib_test_008_001_execute+0x24>
    chHeapFree(p2);
 800439c:	4630      	mov	r0, r6
 800439e:	f7ff fbbf 	bl	8003b20 <chHeapFree>
    chHeapFree(p1);
 80043a2:	4620      	mov	r0, r4
 80043a4:	f7ff fbbc 	bl	8003b20 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80043a8:	2200      	movs	r2, #0
 80043aa:	a903      	add	r1, sp, #12
 80043ac:	484c      	ldr	r0, [pc, #304]	; (80044e0 <oslib_test_008_001_execute+0x330>)
 80043ae:	f7ff fb4f 	bl	8003a50 <chHeapStatus>
 80043b2:	4950      	ldr	r1, [pc, #320]	; (80044f4 <oslib_test_008_001_execute+0x344>)
 80043b4:	2801      	cmp	r0, #1
 80043b6:	bf14      	ite	ne
 80043b8:	2000      	movne	r0, #0
 80043ba:	2001      	moveq	r0, #1
 80043bc:	f7fc ff18 	bl	80011f0 <_test_assert>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	f47f af07 	bne.w	80041d4 <oslib_test_008_001_execute+0x24>
  test_set_step(8);
 80043c6:	2408      	movs	r4, #8
 80043c8:	4b44      	ldr	r3, [pc, #272]	; (80044dc <oslib_test_008_001_execute+0x32c>)
 80043ca:	601c      	str	r4, [r3, #0]
 80043cc:	4d44      	ldr	r5, [pc, #272]	; (80044e0 <oslib_test_008_001_execute+0x330>)
 80043ce:	4622      	mov	r2, r4
 80043d0:	2110      	movs	r1, #16
 80043d2:	4628      	mov	r0, r5
 80043d4:	f7ff fe3c 	bl	8004050 <chHeapAllocAligned>
 80043d8:	4606      	mov	r6, r0
 80043da:	4622      	mov	r2, r4
 80043dc:	2110      	movs	r1, #16
 80043de:	4628      	mov	r0, r5
 80043e0:	f7ff fe36 	bl	8004050 <chHeapAllocAligned>
 80043e4:	4604      	mov	r4, r0
    chHeapFree(p1);
 80043e6:	4630      	mov	r0, r6
 80043e8:	f7ff fb9a 	bl	8003b20 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 80043ec:	2200      	movs	r2, #0
 80043ee:	a903      	add	r1, sp, #12
 80043f0:	4628      	mov	r0, r5
 80043f2:	f7ff fb2d 	bl	8003a50 <chHeapStatus>
 80043f6:	4940      	ldr	r1, [pc, #256]	; (80044f8 <oslib_test_008_001_execute+0x348>)
 80043f8:	2802      	cmp	r0, #2
 80043fa:	bf14      	ite	ne
 80043fc:	2000      	movne	r0, #0
 80043fe:	2001      	moveq	r0, #1
 8004400:	f7fc fef6 	bl	80011f0 <_test_assert>
 8004404:	2800      	cmp	r0, #0
 8004406:	f47f aee5 	bne.w	80041d4 <oslib_test_008_001_execute+0x24>
 800440a:	2208      	movs	r2, #8
 800440c:	2120      	movs	r1, #32
 800440e:	4628      	mov	r0, r5
 8004410:	f7ff fe1e 	bl	8004050 <chHeapAllocAligned>
    chHeapFree(p1);
 8004414:	f7ff fb84 	bl	8003b20 <chHeapFree>
    chHeapFree(p2);
 8004418:	4620      	mov	r0, r4
 800441a:	f7ff fb81 	bl	8003b20 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 800441e:	2200      	movs	r2, #0
 8004420:	a903      	add	r1, sp, #12
 8004422:	4628      	mov	r0, r5
 8004424:	f7ff fb14 	bl	8003a50 <chHeapStatus>
 8004428:	4932      	ldr	r1, [pc, #200]	; (80044f4 <oslib_test_008_001_execute+0x344>)
 800442a:	2801      	cmp	r0, #1
 800442c:	bf14      	ite	ne
 800442e:	2000      	movne	r0, #0
 8004430:	2001      	moveq	r0, #1
 8004432:	f7fc fedd 	bl	80011f0 <_test_assert>
 8004436:	2800      	cmp	r0, #0
 8004438:	f47f aecc 	bne.w	80041d4 <oslib_test_008_001_execute+0x24>
  test_set_step(9);
 800443c:	4b27      	ldr	r3, [pc, #156]	; (80044dc <oslib_test_008_001_execute+0x32c>)
 800443e:	2209      	movs	r2, #9
 8004440:	601a      	str	r2, [r3, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8004442:	2200      	movs	r2, #0
 8004444:	a903      	add	r1, sp, #12
 8004446:	4628      	mov	r0, r5
 8004448:	f7ff fb02 	bl	8003a50 <chHeapStatus>
 800444c:	2208      	movs	r2, #8
 800444e:	9903      	ldr	r1, [sp, #12]
 8004450:	4628      	mov	r0, r5
 8004452:	f7ff fdfd 	bl	8004050 <chHeapAllocAligned>
    test_assert(p1 != NULL, "allocation failed");
 8004456:	4604      	mov	r4, r0
 8004458:	4923      	ldr	r1, [pc, #140]	; (80044e8 <oslib_test_008_001_execute+0x338>)
 800445a:	3800      	subs	r0, #0
 800445c:	bf18      	it	ne
 800445e:	2001      	movne	r0, #1
 8004460:	f7fc fec6 	bl	80011f0 <_test_assert>
 8004464:	2800      	cmp	r0, #0
 8004466:	f47f aeb5 	bne.w	80041d4 <oslib_test_008_001_execute+0x24>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 800446a:	2200      	movs	r2, #0
 800446c:	4611      	mov	r1, r2
 800446e:	4628      	mov	r0, r5
 8004470:	f7ff faee 	bl	8003a50 <chHeapStatus>
 8004474:	4921      	ldr	r1, [pc, #132]	; (80044fc <oslib_test_008_001_execute+0x34c>)
 8004476:	fab0 f080 	clz	r0, r0
 800447a:	0940      	lsrs	r0, r0, #5
 800447c:	f7fc feb8 	bl	80011f0 <_test_assert>
 8004480:	2800      	cmp	r0, #0
 8004482:	f47f aea7 	bne.w	80041d4 <oslib_test_008_001_execute+0x24>
    chHeapFree(p1);
 8004486:	4620      	mov	r0, r4
 8004488:	f7ff fb4a 	bl	8003b20 <chHeapFree>
  test_set_step(10);
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <oslib_test_008_001_execute+0x32c>)
 800448e:	220a      	movs	r2, #10
 8004490:	601a      	str	r2, [r3, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8004492:	2200      	movs	r2, #0
 8004494:	a903      	add	r1, sp, #12
 8004496:	4628      	mov	r0, r5
 8004498:	f7ff fada 	bl	8003a50 <chHeapStatus>
 800449c:	4915      	ldr	r1, [pc, #84]	; (80044f4 <oslib_test_008_001_execute+0x344>)
 800449e:	2801      	cmp	r0, #1
 80044a0:	bf14      	ite	ne
 80044a2:	2000      	movne	r0, #0
 80044a4:	2001      	moveq	r0, #1
 80044a6:	f7fc fea3 	bl	80011f0 <_test_assert>
 80044aa:	2800      	cmp	r0, #0
 80044ac:	f47f ae92 	bne.w	80041d4 <oslib_test_008_001_execute+0x24>
    test_assert(n == sz, "size changed");
 80044b0:	4913      	ldr	r1, [pc, #76]	; (8004500 <oslib_test_008_001_execute+0x350>)
 80044b2:	9803      	ldr	r0, [sp, #12]
 80044b4:	9b02      	ldr	r3, [sp, #8]
 80044b6:	4298      	cmp	r0, r3
 80044b8:	bf14      	ite	ne
 80044ba:	2000      	movne	r0, #0
 80044bc:	2001      	moveq	r0, #1
 80044be:	f7fc fe97 	bl	80011f0 <_test_assert>
 80044c2:	e687      	b.n	80041d4 <oslib_test_008_001_execute+0x24>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80044c4:	2200      	movs	r2, #0
 80044c6:	a903      	add	r1, sp, #12
 80044c8:	4628      	mov	r0, r5
 80044ca:	f7ff fac1 	bl	8003a50 <chHeapStatus>
 80044ce:	2802      	cmp	r0, #2
 80044d0:	d001      	beq.n	80044d6 <oslib_test_008_001_execute+0x326>
 80044d2:	2000      	movs	r0, #0
 80044d4:	e75c      	b.n	8004390 <oslib_test_008_001_execute+0x1e0>
 80044d6:	2001      	movs	r0, #1
 80044d8:	e75a      	b.n	8004390 <oslib_test_008_001_execute+0x1e0>
 80044da:	bf00      	nop
 80044dc:	20002454 	.word	0x20002454
 80044e0:	200023b4 	.word	0x200023b4
 80044e4:	0800ca18 	.word	0x0800ca18
 80044e8:	0800ca04 	.word	0x0800ca04
 80044ec:	0800ca40 	.word	0x0800ca40
 80044f0:	0800ca54 	.word	0x0800ca54
 80044f4:	0800ca30 	.word	0x0800ca30
 80044f8:	0800ca6c 	.word	0x0800ca6c
 80044fc:	0800ca7c 	.word	0x0800ca7c
 8004500:	0800ca88 	.word	0x0800ca88
	...

08004510 <dyn_create_object_heap>:
                                             size_t size) {
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	4605      	mov	r5, r0
 8004514:	460e      	mov	r6, r1
 8004516:	4614      	mov	r4, r2
  dep = dyn_list_find(name, dlp);
 8004518:	f7fe fc92 	bl	8002e40 <dyn_list_find>
  if (dep != NULL) {
 800451c:	b980      	cbnz	r0, 8004540 <dyn_create_object_heap+0x30>
 800451e:	2208      	movs	r2, #8
 8004520:	4621      	mov	r1, r4
 8004522:	f7ff fd95 	bl	8004050 <chHeapAllocAligned>
  if (dep == NULL) {
 8004526:	4604      	mov	r4, r0
 8004528:	b158      	cbz	r0, 8004542 <dyn_create_object_heap+0x32>
  strncpy(dep->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH);
 800452a:	2208      	movs	r2, #8
 800452c:	4629      	mov	r1, r5
 800452e:	4410      	add	r0, r2
 8004530:	f007 f810 	bl	800b554 <strncpy>
  dep->refs = (ucnt_t)1;
 8004534:	2301      	movs	r3, #1
 8004536:	6063      	str	r3, [r4, #4]
  dep->next = dlp->next;
 8004538:	6833      	ldr	r3, [r6, #0]
 800453a:	6023      	str	r3, [r4, #0]
  dlp->next = dep;
 800453c:	6034      	str	r4, [r6, #0]
  return dep;
 800453e:	e000      	b.n	8004542 <dyn_create_object_heap+0x32>
    return NULL;
 8004540:	2400      	movs	r4, #0
}
 8004542:	4620      	mov	r0, r4
 8004544:	bd70      	pop	{r4, r5, r6, pc}
 8004546:	bf00      	nop
	...

08004550 <chFactoryCreateMailbox>:
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	4605      	mov	r5, r0
 8004554:	460c      	mov	r4, r1
  F_LOCK();
 8004556:	4e0c      	ldr	r6, [pc, #48]	; (8004588 <chFactoryCreateMailbox+0x38>)
 8004558:	4630      	mov	r0, r6
 800455a:	f7fe ff39 	bl	80033d0 <chMtxLock>
                                                sizeof (dyn_mailbox_t) +
 800455e:	f104 020e 	add.w	r2, r4, #14
  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 8004562:	0092      	lsls	r2, r2, #2
 8004564:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 8004568:	4628      	mov	r0, r5
 800456a:	f7ff ffd1 	bl	8004510 <dyn_create_object_heap>
  if (dmp != NULL) {
 800456e:	4605      	mov	r5, r0
 8004570:	b128      	cbz	r0, 800457e <chFactoryCreateMailbox+0x2e>
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 8004572:	4622      	mov	r2, r4
 8004574:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8004578:	3010      	adds	r0, #16
 800457a:	f7fd fa19 	bl	80019b0 <chMBObjectInit>
  F_UNLOCK();
 800457e:	4802      	ldr	r0, [pc, #8]	; (8004588 <chFactoryCreateMailbox+0x38>)
 8004580:	f7fe fdce 	bl	8003120 <chMtxUnlock>
}
 8004584:	4628      	mov	r0, r5
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	20001a90 	.word	0x20001a90
 800458c:	00000000 	.word	0x00000000

08004590 <oslib_test_009_004_execute>:
static void oslib_test_009_004_execute(void) {
 8004590:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8004592:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <oslib_test_009_004_execute+0x120>)
 8004594:	2201      	movs	r2, #1
 8004596:	601a      	str	r2, [r3, #0]
    dmp = chFactoryFindMailbox("mymbx");
 8004598:	4846      	ldr	r0, [pc, #280]	; (80046b4 <oslib_test_009_004_execute+0x124>)
 800459a:	f7fe ff91 	bl	80034c0 <chFactoryFindMailbox>
    test_assert(dmp == NULL, "found");
 800459e:	4946      	ldr	r1, [pc, #280]	; (80046b8 <oslib_test_009_004_execute+0x128>)
 80045a0:	fab0 f080 	clz	r0, r0
 80045a4:	0940      	lsrs	r0, r0, #5
 80045a6:	f7fc fe23 	bl	80011f0 <_test_assert>
 80045aa:	b100      	cbz	r0, 80045ae <oslib_test_009_004_execute+0x1e>
}
 80045ac:	bd38      	pop	{r3, r4, r5, pc}
  test_set_step(2);
 80045ae:	4b40      	ldr	r3, [pc, #256]	; (80046b0 <oslib_test_009_004_execute+0x120>)
 80045b0:	2202      	movs	r2, #2
 80045b2:	601a      	str	r2, [r3, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 80045b4:	2110      	movs	r1, #16
 80045b6:	483f      	ldr	r0, [pc, #252]	; (80046b4 <oslib_test_009_004_execute+0x124>)
 80045b8:	f7ff ffca 	bl	8004550 <chFactoryCreateMailbox>
    test_assert(dmp != NULL, "cannot create");
 80045bc:	4604      	mov	r4, r0
 80045be:	493f      	ldr	r1, [pc, #252]	; (80046bc <oslib_test_009_004_execute+0x12c>)
 80045c0:	3800      	subs	r0, #0
 80045c2:	bf18      	it	ne
 80045c4:	2001      	movne	r0, #1
 80045c6:	f7fc fe13 	bl	80011f0 <_test_assert>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d1ee      	bne.n	80045ac <oslib_test_009_004_execute+0x1c>
  test_set_step(3);
 80045ce:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <oslib_test_009_004_execute+0x120>)
 80045d0:	2203      	movs	r2, #3
 80045d2:	601a      	str	r2, [r3, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 80045d4:	2110      	movs	r1, #16
 80045d6:	4837      	ldr	r0, [pc, #220]	; (80046b4 <oslib_test_009_004_execute+0x124>)
 80045d8:	f7ff ffba 	bl	8004550 <chFactoryCreateMailbox>
    test_assert(dmp1 == NULL, "can create");
 80045dc:	4938      	ldr	r1, [pc, #224]	; (80046c0 <oslib_test_009_004_execute+0x130>)
 80045de:	fab0 f080 	clz	r0, r0
 80045e2:	0940      	lsrs	r0, r0, #5
 80045e4:	f7fc fe04 	bl	80011f0 <_test_assert>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d1df      	bne.n	80045ac <oslib_test_009_004_execute+0x1c>
  test_set_step(4);
 80045ec:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <oslib_test_009_004_execute+0x120>)
 80045ee:	2204      	movs	r2, #4
 80045f0:	601a      	str	r2, [r3, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 80045f2:	4830      	ldr	r0, [pc, #192]	; (80046b4 <oslib_test_009_004_execute+0x124>)
 80045f4:	f7fe ff64 	bl	80034c0 <chFactoryFindMailbox>
    test_assert(dmp1 != NULL, "not found");
 80045f8:	4605      	mov	r5, r0
 80045fa:	4932      	ldr	r1, [pc, #200]	; (80046c4 <oslib_test_009_004_execute+0x134>)
 80045fc:	3800      	subs	r0, #0
 80045fe:	bf18      	it	ne
 8004600:	2001      	movne	r0, #1
 8004602:	f7fc fdf5 	bl	80011f0 <_test_assert>
 8004606:	2800      	cmp	r0, #0
 8004608:	d1d0      	bne.n	80045ac <oslib_test_009_004_execute+0x1c>
    test_assert(dmp == dmp1, "object reference mismatch");
 800460a:	492f      	ldr	r1, [pc, #188]	; (80046c8 <oslib_test_009_004_execute+0x138>)
 800460c:	42ac      	cmp	r4, r5
 800460e:	bf14      	ite	ne
 8004610:	2000      	movne	r0, #0
 8004612:	2001      	moveq	r0, #1
 8004614:	f7fc fdec 	bl	80011f0 <_test_assert>
 8004618:	2800      	cmp	r0, #0
 800461a:	d1c7      	bne.n	80045ac <oslib_test_009_004_execute+0x1c>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 800461c:	6868      	ldr	r0, [r5, #4]
 800461e:	492a      	ldr	r1, [pc, #168]	; (80046c8 <oslib_test_009_004_execute+0x138>)
 8004620:	2802      	cmp	r0, #2
 8004622:	bf14      	ite	ne
 8004624:	2000      	movne	r0, #0
 8004626:	2001      	moveq	r0, #1
 8004628:	f7fc fde2 	bl	80011f0 <_test_assert>
 800462c:	2800      	cmp	r0, #0
 800462e:	d1bd      	bne.n	80045ac <oslib_test_009_004_execute+0x1c>
 8004630:	686b      	ldr	r3, [r5, #4]
 8004632:	3301      	adds	r3, #1
 8004634:	606b      	str	r3, [r5, #4]
    test_assert(dmp1 == dmp2, "object reference mismatch");
 8004636:	4924      	ldr	r1, [pc, #144]	; (80046c8 <oslib_test_009_004_execute+0x138>)
 8004638:	2001      	movs	r0, #1
 800463a:	f7fc fdd9 	bl	80011f0 <_test_assert>
 800463e:	2800      	cmp	r0, #0
 8004640:	d1b4      	bne.n	80045ac <oslib_test_009_004_execute+0x1c>
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 8004642:	6868      	ldr	r0, [r5, #4]
 8004644:	4920      	ldr	r1, [pc, #128]	; (80046c8 <oslib_test_009_004_execute+0x138>)
 8004646:	2803      	cmp	r0, #3
 8004648:	bf14      	ite	ne
 800464a:	2000      	movne	r0, #0
 800464c:	2001      	moveq	r0, #1
 800464e:	f7fc fdcf 	bl	80011f0 <_test_assert>
 8004652:	2800      	cmp	r0, #0
 8004654:	d1aa      	bne.n	80045ac <oslib_test_009_004_execute+0x1c>
    chFactoryReleaseMailbox(dmp2);
 8004656:	4628      	mov	r0, r5
 8004658:	f7ff fb0a 	bl	8003c70 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 800465c:	6868      	ldr	r0, [r5, #4]
 800465e:	491b      	ldr	r1, [pc, #108]	; (80046cc <oslib_test_009_004_execute+0x13c>)
 8004660:	2802      	cmp	r0, #2
 8004662:	bf14      	ite	ne
 8004664:	2000      	movne	r0, #0
 8004666:	2001      	moveq	r0, #1
 8004668:	f7fc fdc2 	bl	80011f0 <_test_assert>
 800466c:	2800      	cmp	r0, #0
 800466e:	d19d      	bne.n	80045ac <oslib_test_009_004_execute+0x1c>
    chFactoryReleaseMailbox(dmp1);
 8004670:	4628      	mov	r0, r5
 8004672:	f7ff fafd 	bl	8003c70 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 8004676:	6860      	ldr	r0, [r4, #4]
 8004678:	4914      	ldr	r1, [pc, #80]	; (80046cc <oslib_test_009_004_execute+0x13c>)
 800467a:	2801      	cmp	r0, #1
 800467c:	bf14      	ite	ne
 800467e:	2000      	movne	r0, #0
 8004680:	2001      	moveq	r0, #1
 8004682:	f7fc fdb5 	bl	80011f0 <_test_assert>
 8004686:	2800      	cmp	r0, #0
 8004688:	d190      	bne.n	80045ac <oslib_test_009_004_execute+0x1c>
  test_set_step(5);
 800468a:	4d09      	ldr	r5, [pc, #36]	; (80046b0 <oslib_test_009_004_execute+0x120>)
 800468c:	2305      	movs	r3, #5
 800468e:	602b      	str	r3, [r5, #0]
    chFactoryReleaseMailbox(dmp);
 8004690:	4620      	mov	r0, r4
 8004692:	f7ff faed 	bl	8003c70 <chFactoryReleaseMailbox>
  test_set_step(6);
 8004696:	2306      	movs	r3, #6
 8004698:	602b      	str	r3, [r5, #0]
    dmp = chFactoryFindMailbox("mymbx");
 800469a:	4806      	ldr	r0, [pc, #24]	; (80046b4 <oslib_test_009_004_execute+0x124>)
 800469c:	f7fe ff10 	bl	80034c0 <chFactoryFindMailbox>
    test_assert(dmp == NULL, "found");
 80046a0:	4905      	ldr	r1, [pc, #20]	; (80046b8 <oslib_test_009_004_execute+0x128>)
 80046a2:	fab0 f080 	clz	r0, r0
 80046a6:	0940      	lsrs	r0, r0, #5
 80046a8:	f7fc fda2 	bl	80011f0 <_test_assert>
  test_end_step(6);
 80046ac:	e77e      	b.n	80045ac <oslib_test_009_004_execute+0x1c>
 80046ae:	bf00      	nop
 80046b0:	20002454 	.word	0x20002454
 80046b4:	0800c8f8 	.word	0x0800c8f8
 80046b8:	0800c7fc 	.word	0x0800c7fc
 80046bc:	0800c7dc 	.word	0x0800c7dc
 80046c0:	0800c7ec 	.word	0x0800c7ec
 80046c4:	0800c7f8 	.word	0x0800c7f8
 80046c8:	0800c804 	.word	0x0800c804
 80046cc:	0800c820 	.word	0x0800c820

080046d0 <chFactoryCreateBuffer>:
dyn_buffer_t *chFactoryCreateBuffer(const char *name, size_t size) {
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	4605      	mov	r5, r0
 80046d4:	460c      	mov	r4, r1
  F_LOCK();
 80046d6:	4e0b      	ldr	r6, [pc, #44]	; (8004704 <chFactoryCreateBuffer+0x34>)
 80046d8:	4630      	mov	r0, r6
 80046da:	f7fe fe79 	bl	80033d0 <chMtxLock>
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 80046de:	4622      	mov	r2, r4
 80046e0:	f106 0124 	add.w	r1, r6, #36	; 0x24
 80046e4:	4628      	mov	r0, r5
 80046e6:	f7ff ff13 	bl	8004510 <dyn_create_object_heap>
  if (dbp != NULL) {
 80046ea:	4605      	mov	r5, r0
 80046ec:	b120      	cbz	r0, 80046f8 <chFactoryCreateBuffer+0x28>
    memset((void *)(dbp + 1), 0, size);
 80046ee:	4622      	mov	r2, r4
 80046f0:	2100      	movs	r1, #0
 80046f2:	3010      	adds	r0, #16
 80046f4:	f006 fe38 	bl	800b368 <memset>
  F_UNLOCK();
 80046f8:	4802      	ldr	r0, [pc, #8]	; (8004704 <chFactoryCreateBuffer+0x34>)
 80046fa:	f7fe fd11 	bl	8003120 <chMtxUnlock>
}
 80046fe:	4628      	mov	r0, r5
 8004700:	bd70      	pop	{r4, r5, r6, pc}
 8004702:	bf00      	nop
 8004704:	20001a90 	.word	0x20001a90
	...

08004710 <oslib_test_009_002_execute>:
static void oslib_test_009_002_execute(void) {
 8004710:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <oslib_test_009_002_execute+0x120>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
    dbp = chFactoryFindBuffer("mybuf");
 8004718:	4846      	ldr	r0, [pc, #280]	; (8004834 <oslib_test_009_002_execute+0x124>)
 800471a:	f7fe ffe9 	bl	80036f0 <chFactoryFindBuffer>
    test_assert(dbp == NULL, "found");
 800471e:	4946      	ldr	r1, [pc, #280]	; (8004838 <oslib_test_009_002_execute+0x128>)
 8004720:	fab0 f080 	clz	r0, r0
 8004724:	0940      	lsrs	r0, r0, #5
 8004726:	f7fc fd63 	bl	80011f0 <_test_assert>
 800472a:	b100      	cbz	r0, 800472e <oslib_test_009_002_execute+0x1e>
}
 800472c:	bd38      	pop	{r3, r4, r5, pc}
  test_set_step(2);
 800472e:	4b40      	ldr	r3, [pc, #256]	; (8004830 <oslib_test_009_002_execute+0x120>)
 8004730:	2202      	movs	r2, #2
 8004732:	601a      	str	r2, [r3, #0]
    dbp = chFactoryCreateBuffer("mybuf", 128U);
 8004734:	2180      	movs	r1, #128	; 0x80
 8004736:	483f      	ldr	r0, [pc, #252]	; (8004834 <oslib_test_009_002_execute+0x124>)
 8004738:	f7ff ffca 	bl	80046d0 <chFactoryCreateBuffer>
    test_assert(dbp != NULL, "cannot create");
 800473c:	4604      	mov	r4, r0
 800473e:	493f      	ldr	r1, [pc, #252]	; (800483c <oslib_test_009_002_execute+0x12c>)
 8004740:	3800      	subs	r0, #0
 8004742:	bf18      	it	ne
 8004744:	2001      	movne	r0, #1
 8004746:	f7fc fd53 	bl	80011f0 <_test_assert>
 800474a:	2800      	cmp	r0, #0
 800474c:	d1ee      	bne.n	800472c <oslib_test_009_002_execute+0x1c>
  test_set_step(3);
 800474e:	4b38      	ldr	r3, [pc, #224]	; (8004830 <oslib_test_009_002_execute+0x120>)
 8004750:	2203      	movs	r2, #3
 8004752:	601a      	str	r2, [r3, #0]
    dbp1 = chFactoryCreateBuffer("mybuf", 128U);
 8004754:	2180      	movs	r1, #128	; 0x80
 8004756:	4837      	ldr	r0, [pc, #220]	; (8004834 <oslib_test_009_002_execute+0x124>)
 8004758:	f7ff ffba 	bl	80046d0 <chFactoryCreateBuffer>
    test_assert(dbp1 == NULL, "can create");
 800475c:	4938      	ldr	r1, [pc, #224]	; (8004840 <oslib_test_009_002_execute+0x130>)
 800475e:	fab0 f080 	clz	r0, r0
 8004762:	0940      	lsrs	r0, r0, #5
 8004764:	f7fc fd44 	bl	80011f0 <_test_assert>
 8004768:	2800      	cmp	r0, #0
 800476a:	d1df      	bne.n	800472c <oslib_test_009_002_execute+0x1c>
  test_set_step(4);
 800476c:	4b30      	ldr	r3, [pc, #192]	; (8004830 <oslib_test_009_002_execute+0x120>)
 800476e:	2204      	movs	r2, #4
 8004770:	601a      	str	r2, [r3, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 8004772:	4830      	ldr	r0, [pc, #192]	; (8004834 <oslib_test_009_002_execute+0x124>)
 8004774:	f7fe ffbc 	bl	80036f0 <chFactoryFindBuffer>
    test_assert(dbp1 != NULL, "not found");
 8004778:	4605      	mov	r5, r0
 800477a:	4932      	ldr	r1, [pc, #200]	; (8004844 <oslib_test_009_002_execute+0x134>)
 800477c:	3800      	subs	r0, #0
 800477e:	bf18      	it	ne
 8004780:	2001      	movne	r0, #1
 8004782:	f7fc fd35 	bl	80011f0 <_test_assert>
 8004786:	2800      	cmp	r0, #0
 8004788:	d1d0      	bne.n	800472c <oslib_test_009_002_execute+0x1c>
    test_assert(dbp == dbp1, "object reference mismatch");
 800478a:	492f      	ldr	r1, [pc, #188]	; (8004848 <oslib_test_009_002_execute+0x138>)
 800478c:	42ac      	cmp	r4, r5
 800478e:	bf14      	ite	ne
 8004790:	2000      	movne	r0, #0
 8004792:	2001      	moveq	r0, #1
 8004794:	f7fc fd2c 	bl	80011f0 <_test_assert>
 8004798:	2800      	cmp	r0, #0
 800479a:	d1c7      	bne.n	800472c <oslib_test_009_002_execute+0x1c>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 800479c:	6868      	ldr	r0, [r5, #4]
 800479e:	492a      	ldr	r1, [pc, #168]	; (8004848 <oslib_test_009_002_execute+0x138>)
 80047a0:	2802      	cmp	r0, #2
 80047a2:	bf14      	ite	ne
 80047a4:	2000      	movne	r0, #0
 80047a6:	2001      	moveq	r0, #1
 80047a8:	f7fc fd22 	bl	80011f0 <_test_assert>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d1bd      	bne.n	800472c <oslib_test_009_002_execute+0x1c>
 80047b0:	686b      	ldr	r3, [r5, #4]
 80047b2:	3301      	adds	r3, #1
 80047b4:	606b      	str	r3, [r5, #4]
    test_assert(dbp1 == dbp2, "object reference mismatch");
 80047b6:	4924      	ldr	r1, [pc, #144]	; (8004848 <oslib_test_009_002_execute+0x138>)
 80047b8:	2001      	movs	r0, #1
 80047ba:	f7fc fd19 	bl	80011f0 <_test_assert>
 80047be:	2800      	cmp	r0, #0
 80047c0:	d1b4      	bne.n	800472c <oslib_test_009_002_execute+0x1c>
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 80047c2:	6868      	ldr	r0, [r5, #4]
 80047c4:	4920      	ldr	r1, [pc, #128]	; (8004848 <oslib_test_009_002_execute+0x138>)
 80047c6:	2803      	cmp	r0, #3
 80047c8:	bf14      	ite	ne
 80047ca:	2000      	movne	r0, #0
 80047cc:	2001      	moveq	r0, #1
 80047ce:	f7fc fd0f 	bl	80011f0 <_test_assert>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d1aa      	bne.n	800472c <oslib_test_009_002_execute+0x1c>
    chFactoryReleaseBuffer(dbp2);
 80047d6:	4628      	mov	r0, r5
 80047d8:	f7ff fa72 	bl	8003cc0 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 80047dc:	6868      	ldr	r0, [r5, #4]
 80047de:	491b      	ldr	r1, [pc, #108]	; (800484c <oslib_test_009_002_execute+0x13c>)
 80047e0:	2802      	cmp	r0, #2
 80047e2:	bf14      	ite	ne
 80047e4:	2000      	movne	r0, #0
 80047e6:	2001      	moveq	r0, #1
 80047e8:	f7fc fd02 	bl	80011f0 <_test_assert>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d19d      	bne.n	800472c <oslib_test_009_002_execute+0x1c>
    chFactoryReleaseBuffer(dbp1);
 80047f0:	4628      	mov	r0, r5
 80047f2:	f7ff fa65 	bl	8003cc0 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 80047f6:	6860      	ldr	r0, [r4, #4]
 80047f8:	4914      	ldr	r1, [pc, #80]	; (800484c <oslib_test_009_002_execute+0x13c>)
 80047fa:	2801      	cmp	r0, #1
 80047fc:	bf14      	ite	ne
 80047fe:	2000      	movne	r0, #0
 8004800:	2001      	moveq	r0, #1
 8004802:	f7fc fcf5 	bl	80011f0 <_test_assert>
 8004806:	2800      	cmp	r0, #0
 8004808:	d190      	bne.n	800472c <oslib_test_009_002_execute+0x1c>
  test_set_step(5);
 800480a:	4d09      	ldr	r5, [pc, #36]	; (8004830 <oslib_test_009_002_execute+0x120>)
 800480c:	2305      	movs	r3, #5
 800480e:	602b      	str	r3, [r5, #0]
    chFactoryReleaseBuffer(dbp);
 8004810:	4620      	mov	r0, r4
 8004812:	f7ff fa55 	bl	8003cc0 <chFactoryReleaseBuffer>
  test_set_step(6);
 8004816:	2306      	movs	r3, #6
 8004818:	602b      	str	r3, [r5, #0]
    dbp = chFactoryFindBuffer("mybuf");
 800481a:	4806      	ldr	r0, [pc, #24]	; (8004834 <oslib_test_009_002_execute+0x124>)
 800481c:	f7fe ff68 	bl	80036f0 <chFactoryFindBuffer>
    test_assert(dbp == NULL, "found");
 8004820:	4905      	ldr	r1, [pc, #20]	; (8004838 <oslib_test_009_002_execute+0x128>)
 8004822:	fab0 f080 	clz	r0, r0
 8004826:	0940      	lsrs	r0, r0, #5
 8004828:	f7fc fce2 	bl	80011f0 <_test_assert>
  test_end_step(6);
 800482c:	e77e      	b.n	800472c <oslib_test_009_002_execute+0x1c>
 800482e:	bf00      	nop
 8004830:	20002454 	.word	0x20002454
 8004834:	0800c900 	.word	0x0800c900
 8004838:	0800c7fc 	.word	0x0800c7fc
 800483c:	0800c7dc 	.word	0x0800c7dc
 8004840:	0800c7ec 	.word	0x0800c7ec
 8004844:	0800c7f8 	.word	0x0800c7f8
 8004848:	0800c804 	.word	0x0800c804
 800484c:	0800c820 	.word	0x0800c820

08004850 <chThdCreateFromHeap>:
                              tfunc_t pf, void *arg) {
 8004850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004852:	b087      	sub	sp, #28
 8004854:	460e      	mov	r6, r1
 8004856:	4617      	mov	r7, r2
 8004858:	461d      	mov	r5, r3
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800485a:	2208      	movs	r2, #8
 800485c:	f7ff fbf8 	bl	8004050 <chHeapAllocAligned>
  if (wsp == NULL) {
 8004860:	4604      	mov	r4, r0
 8004862:	b1c0      	cbz	r0, 8004896 <chThdCreateFromHeap+0x46>
  thread_descriptor_t td = {
 8004864:	9700      	str	r7, [sp, #0]
 8004866:	9001      	str	r0, [sp, #4]
    (stkalign_t *)((uint8_t *)wsp + size),
 8004868:	4434      	add	r4, r6
  thread_descriptor_t td = {
 800486a:	9402      	str	r4, [sp, #8]
 800486c:	9503      	str	r5, [sp, #12]
 800486e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004870:	9304      	str	r3, [sp, #16]
 8004872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004874:	9305      	str	r3, [sp, #20]
 8004876:	2320      	movs	r3, #32
 8004878:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(&td);
 800487c:	4668      	mov	r0, sp
 800487e:	f005 fe3f 	bl	800a500 <chThdCreateSuspendedI>
 8004882:	4604      	mov	r4, r0
  tp->flags = CH_FLAG_MODE_HEAP;
 8004884:	2301      	movs	r3, #1
 8004886:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  chSchWakeupS(tp, MSG_OK);
 800488a:	2100      	movs	r1, #0
 800488c:	f005 fed8 	bl	800a640 <chSchWakeupS>
 8004890:	2300      	movs	r3, #0
 8004892:	f383 8811 	msr	BASEPRI, r3
}
 8004896:	4620      	mov	r0, r4
 8004898:	b007      	add	sp, #28
 800489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800489c:	0000      	movs	r0, r0
	...

080048a0 <rt_test_010_001_execute>:
static void rt_test_010_001_execute(void) {
 80048a0:	b530      	push	{r4, r5, lr}
 80048a2:	b087      	sub	sp, #28
  return ch.rlist.current;
 80048a4:	4b47      	ldr	r3, [pc, #284]	; (80049c4 <rt_test_010_001_execute+0x124>)
 80048a6:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80048a8:	689d      	ldr	r5, [r3, #8]
  test_set_step(2);
 80048aa:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <rt_test_010_001_execute+0x128>)
 80048ac:	2202      	movs	r2, #2
 80048ae:	601a      	str	r2, [r3, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 80048b0:	aa04      	add	r2, sp, #16
 80048b2:	a905      	add	r1, sp, #20
 80048b4:	4845      	ldr	r0, [pc, #276]	; (80049cc <rt_test_010_001_execute+0x12c>)
 80048b6:	f7ff f8cb 	bl	8003a50 <chHeapStatus>
 80048ba:	4604      	mov	r4, r0
    test_assert(n1 == 1, "heap fragmented");
 80048bc:	4944      	ldr	r1, [pc, #272]	; (80049d0 <rt_test_010_001_execute+0x130>)
 80048be:	2801      	cmp	r0, #1
 80048c0:	bf14      	ite	ne
 80048c2:	2000      	movne	r0, #0
 80048c4:	2001      	moveq	r0, #1
 80048c6:	f7fc fc93 	bl	80011f0 <_test_assert>
 80048ca:	b108      	cbz	r0, 80048d0 <rt_test_010_001_execute+0x30>
}
 80048cc:	b007      	add	sp, #28
 80048ce:	bd30      	pop	{r4, r5, pc}
  test_set_step(3);
 80048d0:	4b3d      	ldr	r3, [pc, #244]	; (80049c8 <rt_test_010_001_execute+0x128>)
 80048d2:	2203      	movs	r2, #3
 80048d4:	601a      	str	r2, [r3, #0]
    threads[0] = chThdCreateFromHeap(&heap1,
 80048d6:	4b3f      	ldr	r3, [pc, #252]	; (80049d4 <rt_test_010_001_execute+0x134>)
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	4b3f      	ldr	r3, [pc, #252]	; (80049d8 <rt_test_010_001_execute+0x138>)
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	1e6b      	subs	r3, r5, #1
 80048e0:	4a3e      	ldr	r2, [pc, #248]	; (80049dc <rt_test_010_001_execute+0x13c>)
 80048e2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80048e6:	4839      	ldr	r0, [pc, #228]	; (80049cc <rt_test_010_001_execute+0x12c>)
 80048e8:	f7ff ffb2 	bl	8004850 <chThdCreateFromHeap>
 80048ec:	4b3c      	ldr	r3, [pc, #240]	; (80049e0 <rt_test_010_001_execute+0x140>)
 80048ee:	6018      	str	r0, [r3, #0]
    test_assert(threads[0] != NULL, "thread creation failed");
 80048f0:	493c      	ldr	r1, [pc, #240]	; (80049e4 <rt_test_010_001_execute+0x144>)
 80048f2:	3800      	subs	r0, #0
 80048f4:	bf18      	it	ne
 80048f6:	2001      	movne	r0, #1
 80048f8:	f7fc fc7a 	bl	80011f0 <_test_assert>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d1e5      	bne.n	80048cc <rt_test_010_001_execute+0x2c>
  test_set_step(4);
 8004900:	4b31      	ldr	r3, [pc, #196]	; (80049c8 <rt_test_010_001_execute+0x128>)
 8004902:	2204      	movs	r2, #4
 8004904:	601a      	str	r2, [r3, #0]
    threads[1] = chThdCreateFromHeap(&heap1,
 8004906:	4b38      	ldr	r3, [pc, #224]	; (80049e8 <rt_test_010_001_execute+0x148>)
 8004908:	9301      	str	r3, [sp, #4]
 800490a:	4b33      	ldr	r3, [pc, #204]	; (80049d8 <rt_test_010_001_execute+0x138>)
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	1eab      	subs	r3, r5, #2
 8004910:	4a36      	ldr	r2, [pc, #216]	; (80049ec <rt_test_010_001_execute+0x14c>)
 8004912:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004916:	482d      	ldr	r0, [pc, #180]	; (80049cc <rt_test_010_001_execute+0x12c>)
 8004918:	f7ff ff9a 	bl	8004850 <chThdCreateFromHeap>
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <rt_test_010_001_execute+0x140>)
 800491e:	6058      	str	r0, [r3, #4]
    test_assert(threads[1] != NULL, "thread creation failed");
 8004920:	4930      	ldr	r1, [pc, #192]	; (80049e4 <rt_test_010_001_execute+0x144>)
 8004922:	3800      	subs	r0, #0
 8004924:	bf18      	it	ne
 8004926:	2001      	movne	r0, #1
 8004928:	f7fc fc62 	bl	80011f0 <_test_assert>
 800492c:	2800      	cmp	r0, #0
 800492e:	d1cd      	bne.n	80048cc <rt_test_010_001_execute+0x2c>
  test_set_step(5);
 8004930:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <rt_test_010_001_execute+0x128>)
 8004932:	2205      	movs	r2, #5
 8004934:	601a      	str	r2, [r3, #0]
    threads[2] = chThdCreateFromHeap(&heap1,
 8004936:	4b2e      	ldr	r3, [pc, #184]	; (80049f0 <rt_test_010_001_execute+0x150>)
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <rt_test_010_001_execute+0x138>)
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	1eeb      	subs	r3, r5, #3
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <rt_test_010_001_execute+0x154>)
 8004942:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004946:	4821      	ldr	r0, [pc, #132]	; (80049cc <rt_test_010_001_execute+0x12c>)
 8004948:	f7ff ff82 	bl	8004850 <chThdCreateFromHeap>
 800494c:	4b24      	ldr	r3, [pc, #144]	; (80049e0 <rt_test_010_001_execute+0x140>)
 800494e:	6098      	str	r0, [r3, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 8004950:	4929      	ldr	r1, [pc, #164]	; (80049f8 <rt_test_010_001_execute+0x158>)
 8004952:	fab0 f080 	clz	r0, r0
 8004956:	0940      	lsrs	r0, r0, #5
 8004958:	f7fc fc4a 	bl	80011f0 <_test_assert>
 800495c:	2800      	cmp	r0, #0
 800495e:	d1b5      	bne.n	80048cc <rt_test_010_001_execute+0x2c>
  test_set_step(6);
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <rt_test_010_001_execute+0x128>)
 8004962:	2206      	movs	r2, #6
 8004964:	601a      	str	r2, [r3, #0]
    test_wait_threads();
 8004966:	f7ff fa7b 	bl	8003e60 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 800496a:	4924      	ldr	r1, [pc, #144]	; (80049fc <rt_test_010_001_execute+0x15c>)
 800496c:	4824      	ldr	r0, [pc, #144]	; (8004a00 <rt_test_010_001_execute+0x160>)
 800496e:	f7fc fcef 	bl	8001350 <_test_assert_sequence>
 8004972:	2800      	cmp	r0, #0
 8004974:	d1aa      	bne.n	80048cc <rt_test_010_001_execute+0x2c>
  test_set_step(7);
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <rt_test_010_001_execute+0x128>)
 8004978:	2207      	movs	r2, #7
 800497a:	601a      	str	r2, [r3, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 800497c:	aa02      	add	r2, sp, #8
 800497e:	a903      	add	r1, sp, #12
 8004980:	4812      	ldr	r0, [pc, #72]	; (80049cc <rt_test_010_001_execute+0x12c>)
 8004982:	f7ff f865 	bl	8003a50 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 8004986:	491f      	ldr	r1, [pc, #124]	; (8004a04 <rt_test_010_001_execute+0x164>)
 8004988:	4284      	cmp	r4, r0
 800498a:	bf14      	ite	ne
 800498c:	2000      	movne	r0, #0
 800498e:	2001      	moveq	r0, #1
 8004990:	f7fc fc2e 	bl	80011f0 <_test_assert>
 8004994:	2800      	cmp	r0, #0
 8004996:	d199      	bne.n	80048cc <rt_test_010_001_execute+0x2c>
    test_assert(total1 == total2, "total free space changed");
 8004998:	491b      	ldr	r1, [pc, #108]	; (8004a08 <rt_test_010_001_execute+0x168>)
 800499a:	9805      	ldr	r0, [sp, #20]
 800499c:	9b03      	ldr	r3, [sp, #12]
 800499e:	4298      	cmp	r0, r3
 80049a0:	bf14      	ite	ne
 80049a2:	2000      	movne	r0, #0
 80049a4:	2001      	moveq	r0, #1
 80049a6:	f7fc fc23 	bl	80011f0 <_test_assert>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d18e      	bne.n	80048cc <rt_test_010_001_execute+0x2c>
    test_assert(largest1 == largest2, "largest fragment size changed");
 80049ae:	4917      	ldr	r1, [pc, #92]	; (8004a0c <rt_test_010_001_execute+0x16c>)
 80049b0:	9804      	ldr	r0, [sp, #16]
 80049b2:	9b02      	ldr	r3, [sp, #8]
 80049b4:	4298      	cmp	r0, r3
 80049b6:	bf14      	ite	ne
 80049b8:	2000      	movne	r0, #0
 80049ba:	2001      	moveq	r0, #1
 80049bc:	f7fc fc18 	bl	80011f0 <_test_assert>
 80049c0:	e784      	b.n	80048cc <rt_test_010_001_execute+0x2c>
 80049c2:	bf00      	nop
 80049c4:	20001a18 	.word	0x20001a18
 80049c8:	20002454 	.word	0x20002454
 80049cc:	20001b40 	.word	0x20001b40
 80049d0:	0800ca30 	.word	0x0800ca30
 80049d4:	0800c978 	.word	0x0800c978
 80049d8:	08000901 	.word	0x08000901
 80049dc:	0800c970 	.word	0x0800c970
 80049e0:	2000246c 	.word	0x2000246c
 80049e4:	0800c9a4 	.word	0x0800c9a4
 80049e8:	0800c984 	.word	0x0800c984
 80049ec:	0800c97c 	.word	0x0800c97c
 80049f0:	0800c990 	.word	0x0800c990
 80049f4:	0800c988 	.word	0x0800c988
 80049f8:	0800c9bc 	.word	0x0800c9bc
 80049fc:	0800c214 	.word	0x0800c214
 8004a00:	0800ca98 	.word	0x0800ca98
 8004a04:	0800ca9c 	.word	0x0800ca9c
 8004a08:	0800cab4 	.word	0x0800cab4
 8004a0c:	0800cad0 	.word	0x0800cad0

08004a10 <cmd_test>:
static THD_FUNCTION(test_oslib, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &oslib_test_suite);
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8004a10:	b530      	push	{r4, r5, lr}
 8004a12:	b083      	sub	sp, #12
 8004a14:	4604      	mov	r4, r0
  thread_t *tp;
  tfunc_t tfp;

  (void)argv;
  if (argc != 1) {
 8004a16:	2901      	cmp	r1, #1
 8004a18:	d11b      	bne.n	8004a52 <cmd_test+0x42>
    shellUsage(chp, "test rt|oslib");
    return;
  }
  if (!strcmp(argv[0], "rt")) {
 8004a1a:	6815      	ldr	r5, [r2, #0]
 8004a1c:	4916      	ldr	r1, [pc, #88]	; (8004a78 <cmd_test+0x68>)
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f7fb fd02 	bl	8000428 <strcmp>
 8004a24:	b300      	cbz	r0, 8004a68 <cmd_test+0x58>
    tfp = test_rt;
  }
  else if (!strcmp(argv[0], "oslib")) {
 8004a26:	4915      	ldr	r1, [pc, #84]	; (8004a7c <cmd_test+0x6c>)
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f7fb fcfd 	bl	8000428 <strcmp>
 8004a2e:	b9a8      	cbnz	r0, 8004a5c <cmd_test+0x4c>
    tfp = test_oslib;
 8004a30:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <cmd_test+0x70>)
  return ch.rlist.current;
 8004a32:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <cmd_test+0x74>)
 8004a34:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8004a36:	689b      	ldr	r3, [r3, #8]
  }
  else {
    shellUsage(chp, "test rt|oslib");
    return;
  }
  tp = chThdCreateFromHeap(NULL, SHELL_CMD_TEST_WA_SIZE,
 8004a38:	9401      	str	r4, [sp, #4]
 8004a3a:	9200      	str	r2, [sp, #0]
 8004a3c:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <cmd_test+0x78>)
 8004a3e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8004a42:	2000      	movs	r0, #0
 8004a44:	f7ff ff04 	bl	8004850 <chThdCreateFromHeap>
                           "test", chThdGetPriorityX(),
                           tfp, chp);
  if (tp == NULL) {
 8004a48:	b180      	cbz	r0, 8004a6c <cmd_test+0x5c>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
    return;
  }
  chThdWait(tp);
 8004a4a:	f7ff f9e9 	bl	8003e20 <chThdWait>
}
 8004a4e:	b003      	add	sp, #12
 8004a50:	bd30      	pop	{r4, r5, pc}
    shellUsage(chp, "test rt|oslib");
 8004a52:	4a0e      	ldr	r2, [pc, #56]	; (8004a8c <cmd_test+0x7c>)
 8004a54:	490e      	ldr	r1, [pc, #56]	; (8004a90 <cmd_test+0x80>)
 8004a56:	f7fd fee3 	bl	8002820 <chprintf>
    return;
 8004a5a:	e7f8      	b.n	8004a4e <cmd_test+0x3e>
    shellUsage(chp, "test rt|oslib");
 8004a5c:	4a0b      	ldr	r2, [pc, #44]	; (8004a8c <cmd_test+0x7c>)
 8004a5e:	490c      	ldr	r1, [pc, #48]	; (8004a90 <cmd_test+0x80>)
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7fd fedd 	bl	8002820 <chprintf>
    return;
 8004a66:	e7f2      	b.n	8004a4e <cmd_test+0x3e>
    tfp = test_rt;
 8004a68:	4a0a      	ldr	r2, [pc, #40]	; (8004a94 <cmd_test+0x84>)
 8004a6a:	e7e2      	b.n	8004a32 <cmd_test+0x22>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 8004a6c:	490a      	ldr	r1, [pc, #40]	; (8004a98 <cmd_test+0x88>)
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7fd fed6 	bl	8002820 <chprintf>
    return;
 8004a74:	e7eb      	b.n	8004a4e <cmd_test+0x3e>
 8004a76:	bf00      	nop
 8004a78:	0800cb00 	.word	0x0800cb00
 8004a7c:	0800caf8 	.word	0x0800caf8
 8004a80:	08006001 	.word	0x08006001
 8004a84:	20001a18 	.word	0x20001a18
 8004a88:	0800d50c 	.word	0x0800d50c
 8004a8c:	0800caf0 	.word	0x0800caf0
 8004a90:	0800c434 	.word	0x0800c434
 8004a94:	08005ff1 	.word	0x08005ff1
 8004a98:	0800cb04 	.word	0x0800cb04
 8004a9c:	00000000 	.word	0x00000000

08004aa0 <chSemSignalWait>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 8004aa0:	b538      	push	{r3, r4, r5, lr}
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f382 8811 	msr	BASEPRI, r2
              ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 8004aaa:	6882      	ldr	r2, [r0, #8]
 8004aac:	3201      	adds	r2, #1
 8004aae:	6082      	str	r2, [r0, #8]
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	dd0b      	ble.n	8004acc <chSemSignalWait+0x2c>
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
  }
  if (--spw->cnt < (cnt_t)0) {
 8004ab4:	68a3      	ldr	r3, [r4, #8]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	60a3      	str	r3, [r4, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	db10      	blt.n	8004ae0 <chSemSignalWait+0x40>
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 8004abe:	f005 fd67 	bl	800a590 <chSchRescheduleS>
    msg = MSG_OK;
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return msg;
}
 8004aca:	bd38      	pop	{r3, r4, r5, pc}
 8004acc:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 8004ace:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 8004ad0:	6802      	ldr	r2, [r0, #0]
 8004ad2:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004ad4:	6053      	str	r3, [r2, #4]
    chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 8004ad6:	f005 fd83 	bl	800a5e0 <chSchReadyI>
 8004ada:	2300      	movs	r3, #0
 8004adc:	6243      	str	r3, [r0, #36]	; 0x24
 8004ade:	e7e9      	b.n	8004ab4 <chSemSignalWait+0x14>
    thread_t *ctp = currp;
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <chSemSignalWait+0x5c>)
 8004ae2:	699d      	ldr	r5, [r3, #24]
  tp->queue.next             = (thread_t *)tqp;
 8004ae4:	602c      	str	r4, [r5, #0]
  tp->queue.prev             = tqp->prev;
 8004ae6:	6863      	ldr	r3, [r4, #4]
 8004ae8:	606b      	str	r3, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8004aea:	601d      	str	r5, [r3, #0]
  tqp->prev                  = tp;
 8004aec:	6065      	str	r5, [r4, #4]
    ctp->u.wtsemp = spw;
 8004aee:	626c      	str	r4, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTSEM);
 8004af0:	2005      	movs	r0, #5
 8004af2:	f005 fd5d 	bl	800a5b0 <chSchGoSleepS>
    msg = ctp->u.rdymsg;
 8004af6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004af8:	e7e4      	b.n	8004ac4 <chSemSignalWait+0x24>
 8004afa:	bf00      	nop
 8004afc:	20001a18 	.word	0x20001a18

08004b00 <chSemAddCounterI>:
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4605      	mov	r5, r0
 8004b04:	460c      	mov	r4, r1
  chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 8004b06:	e000      	b.n	8004b0a <chSemAddCounterI+0xa>
    n--;
 8004b08:	3c01      	subs	r4, #1
  while (n > (cnt_t)0) {
 8004b0a:	2c00      	cmp	r4, #0
 8004b0c:	dd0d      	ble.n	8004b2a <chSemAddCounterI+0x2a>
    if (++sp->cnt <= (cnt_t)0) {
 8004b0e:	68ab      	ldr	r3, [r5, #8]
 8004b10:	3301      	adds	r3, #1
 8004b12:	60ab      	str	r3, [r5, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	dcf7      	bgt.n	8004b08 <chSemAddCounterI+0x8>
  thread_t *tp = tqp->next;
 8004b18:	6828      	ldr	r0, [r5, #0]
  tqp->next             = tp->queue.next;
 8004b1a:	6803      	ldr	r3, [r0, #0]
 8004b1c:	602b      	str	r3, [r5, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004b1e:	605d      	str	r5, [r3, #4]
      chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8004b20:	f005 fd5e 	bl	800a5e0 <chSchReadyI>
 8004b24:	2300      	movs	r3, #0
 8004b26:	6243      	str	r3, [r0, #36]	; 0x24
 8004b28:	e7ee      	b.n	8004b08 <chSemAddCounterI+0x8>
}
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	0000      	movs	r0, r0
	...

08004b30 <chSemSignalI>:
  if (++sp->cnt <= (cnt_t)0) {
 8004b30:	6882      	ldr	r2, [r0, #8]
 8004b32:	3201      	adds	r2, #1
 8004b34:	6082      	str	r2, [r0, #8]
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	dd00      	ble.n	8004b3c <chSemSignalI+0xc>
 8004b3a:	4770      	bx	lr
void chSemSignalI(semaphore_t *sp) {
 8004b3c:	b508      	push	{r3, lr}
 8004b3e:	4603      	mov	r3, r0
  thread_t *tp = tqp->next;
 8004b40:	6800      	ldr	r0, [r0, #0]
  tqp->next             = tp->queue.next;
 8004b42:	6802      	ldr	r2, [r0, #0]
 8004b44:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8004b46:	6053      	str	r3, [r2, #4]
    tp->u.rdymsg = MSG_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8004b4c:	f005 fd48 	bl	800a5e0 <chSchReadyI>
}
 8004b50:	bd08      	pop	{r3, pc}
 8004b52:	bf00      	nop
	...

08004b60 <thread4>:
static THD_FUNCTION(thread4, p) {
 8004b60:	b508      	push	{r3, lr}
 8004b62:	2320      	movs	r3, #32
 8004b64:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();

  if (bsp->sem.cnt < (cnt_t)1) {
 8004b68:	6883      	ldr	r3, [r0, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dd05      	ble.n	8004b7a <thread4+0x1a>
 */
static inline void chBSemSignal(binary_semaphore_t *bsp) {

  chSysLock();
  chBSemSignalI(bsp);
  chSchRescheduleS();
 8004b6e:	f005 fd0f 	bl	800a590 <chSchRescheduleS>
 8004b72:	2300      	movs	r3, #0
 8004b74:	f383 8811 	msr	BASEPRI, r3
}
 8004b78:	bd08      	pop	{r3, pc}
    chSemSignalI(&bsp->sem);
 8004b7a:	f7ff ffd9 	bl	8004b30 <chSemSignalI>
 8004b7e:	e7f6      	b.n	8004b6e <thread4+0xe>

08004b80 <chCacheReleaseObjectI>:
                           oc_object_t *objp) {
 8004b80:	b510      	push	{r4, lr}
 8004b82:	460c      	mov	r4, r1
  return sp->cnt;
 8004b84:	6a0b      	ldr	r3, [r1, #32]
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	db1c      	blt.n	8004bc4 <chCacheReleaseObjectI+0x44>
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 8004b8a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004b8c:	f013 0f08 	tst.w	r3, #8
 8004b90:	d021      	beq.n	8004bd6 <chCacheReleaseObjectI+0x56>
    HASH_REMOVE(objp);
 8004b92:	684a      	ldr	r2, [r1, #4]
 8004b94:	680b      	ldr	r3, [r1, #0]
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	684a      	ldr	r2, [r1, #4]
 8004b9a:	605a      	str	r2, [r3, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8004b9c:	6a03      	ldr	r3, [r0, #32]
 8004b9e:	60cb      	str	r3, [r1, #12]
 8004ba0:	f100 0314 	add.w	r3, r0, #20
 8004ba4:	608b      	str	r3, [r1, #8]
 8004ba6:	6a03      	ldr	r3, [r0, #32]
 8004ba8:	6099      	str	r1, [r3, #8]
 8004baa:	6201      	str	r1, [r0, #32]
    objp->obj_group = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	610b      	str	r3, [r1, #16]
    objp->obj_key   = 0U;
 8004bb0:	614b      	str	r3, [r1, #20]
    objp->obj_flags = OC_FLAG_INLRU;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	624b      	str	r3, [r1, #36]	; 0x24
  chSemSignalI(&ocp->lru_sem);
 8004bb6:	3030      	adds	r0, #48	; 0x30
 8004bb8:	f7ff ffba 	bl	8004b30 <chSemSignalI>
  sp->cnt++;
 8004bbc:	6a23      	ldr	r3, [r4, #32]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	6223      	str	r3, [r4, #32]
}
 8004bc2:	bd10      	pop	{r4, pc}
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8004bc4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004bc6:	f003 031a 	and.w	r3, r3, #26
 8004bca:	624b      	str	r3, [r1, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 8004bcc:	f101 0018 	add.w	r0, r1, #24
 8004bd0:	f7ff ffae 	bl	8004b30 <chSemSignalI>
    return;
 8004bd4:	e7f5      	b.n	8004bc2 <chCacheReleaseObjectI+0x42>
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 8004bd6:	f013 0f20 	tst.w	r3, #32
 8004bda:	d10e      	bne.n	8004bfa <chCacheReleaseObjectI+0x7a>
      LRU_INSERT_HEAD(ocp, objp);
 8004bdc:	69c3      	ldr	r3, [r0, #28]
 8004bde:	608b      	str	r3, [r1, #8]
 8004be0:	f100 0314 	add.w	r3, r0, #20
 8004be4:	60cb      	str	r3, [r1, #12]
 8004be6:	69c3      	ldr	r3, [r0, #28]
 8004be8:	60d9      	str	r1, [r3, #12]
 8004bea:	61c1      	str	r1, [r0, #28]
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8004bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bee:	f003 0312 	and.w	r3, r3, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	6263      	str	r3, [r4, #36]	; 0x24
 8004bf8:	e7dd      	b.n	8004bb6 <chCacheReleaseObjectI+0x36>
      LRU_INSERT_TAIL(ocp, objp);
 8004bfa:	6a03      	ldr	r3, [r0, #32]
 8004bfc:	60cb      	str	r3, [r1, #12]
 8004bfe:	f100 0314 	add.w	r3, r0, #20
 8004c02:	608b      	str	r3, [r1, #8]
 8004c04:	6a03      	ldr	r3, [r0, #32]
 8004c06:	6099      	str	r1, [r3, #8]
 8004c08:	6201      	str	r1, [r0, #32]
 8004c0a:	e7ef      	b.n	8004bec <chCacheReleaseObjectI+0x6c>
 8004c0c:	0000      	movs	r0, r0
	...

08004c10 <oslib_test_006_001_execute>:
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 8004c10:	b530      	push	{r4, r5, lr}
 8004c12:	b085      	sub	sp, #20

  /* [6.1.1] Cache initialization.*/
  test_set_step(1);
 8004c14:	4ca4      	ldr	r4, [pc, #656]	; (8004ea8 <oslib_test_006_001_execute+0x298>)
 8004c16:	2301      	movs	r3, #1
 8004c18:	6023      	str	r3, [r4, #0]
  {
    chCacheObjectInit(&cache1,
 8004c1a:	4ba4      	ldr	r3, [pc, #656]	; (8004eac <oslib_test_006_001_execute+0x29c>)
 8004c1c:	9303      	str	r3, [sp, #12]
 8004c1e:	4ba4      	ldr	r3, [pc, #656]	; (8004eb0 <oslib_test_006_001_execute+0x2a0>)
 8004c20:	9302      	str	r3, [sp, #8]
 8004c22:	4ba4      	ldr	r3, [pc, #656]	; (8004eb4 <oslib_test_006_001_execute+0x2a4>)
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	233c      	movs	r3, #60	; 0x3c
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	2304      	movs	r3, #4
 8004c2c:	4aa2      	ldr	r2, [pc, #648]	; (8004eb8 <oslib_test_006_001_execute+0x2a8>)
 8004c2e:	2108      	movs	r1, #8
 8004c30:	48a2      	ldr	r0, [pc, #648]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004c32:	f7fd f895 	bl	8001d60 <chCacheObjectInit>
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 8004c36:	2302      	movs	r3, #2
 8004c38:	6023      	str	r3, [r4, #0]
  {
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8004c3a:	2500      	movs	r5, #0
 8004c3c:	2d07      	cmp	r5, #7
 8004c3e:	d823      	bhi.n	8004c88 <oslib_test_006_001_execute+0x78>
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 8004c40:	462a      	mov	r2, r5
 8004c42:	2100      	movs	r1, #0
 8004c44:	489d      	ldr	r0, [pc, #628]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004c46:	f7fd fc03 	bl	8002450 <chCacheGetObject>
 8004c4a:	4604      	mov	r4, r0

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004c4c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004c4e:	499c      	ldr	r1, [pc, #624]	; (8004ec0 <oslib_test_006_001_execute+0x2b0>)
 8004c50:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004c54:	f7fc facc 	bl	80011f0 <_test_assert>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d161      	bne.n	8004d20 <oslib_test_006_001_execute+0x110>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");
 8004c5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c5e:	4999      	ldr	r1, [pc, #612]	; (8004ec4 <oslib_test_006_001_execute+0x2b4>)
 8004c60:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004c64:	f7fc fac4 	bl	80011f0 <_test_assert>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d159      	bne.n	8004d20 <oslib_test_006_001_execute+0x110>
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chCacheReleaseObject(objects_cache_t *ocp,
                                        oc_object_t *objp) {

  chSysLock();
  chCacheReleaseObjectI(ocp, objp);
 8004c72:	4621      	mov	r1, r4
 8004c74:	4891      	ldr	r0, [pc, #580]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004c76:	f7ff ff83 	bl	8004b80 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8004c7a:	f005 fc89 	bl	800a590 <chSchRescheduleS>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8004c84:	3501      	adds	r5, #1
 8004c86:	e7d9      	b.n	8004c3c <oslib_test_006_001_execute+0x2c>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 8004c88:	498f      	ldr	r1, [pc, #572]	; (8004ec8 <oslib_test_006_001_execute+0x2b8>)
 8004c8a:	4890      	ldr	r0, [pc, #576]	; (8004ecc <oslib_test_006_001_execute+0x2bc>)
 8004c8c:	f7fc fb60 	bl	8001350 <_test_assert_sequence>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d145      	bne.n	8004d20 <oslib_test_006_001_execute+0x110>
  }
  test_end_step(2);

  /* [6.1.3] Getting and releasing objects with synchronous
     initialization.*/
  test_set_step(3);
 8004c94:	4b84      	ldr	r3, [pc, #528]	; (8004ea8 <oslib_test_006_001_execute+0x298>)
 8004c96:	2203      	movs	r2, #3
 8004c98:	601a      	str	r2, [r3, #0]
  {
    uint32_t i;
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8004c9a:	2500      	movs	r5, #0
 8004c9c:	e00c      	b.n	8004cb8 <oslib_test_006_001_execute+0xa8>
 8004c9e:	2320      	movs	r3, #32
 8004ca0:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	4885      	ldr	r0, [pc, #532]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004ca8:	f7ff ff6a 	bl	8004b80 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8004cac:	f005 fc70 	bl	800a590 <chSchRescheduleS>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	3501      	adds	r5, #1
 8004cb8:	2d07      	cmp	r5, #7
 8004cba:	d833      	bhi.n	8004d24 <oslib_test_006_001_execute+0x114>
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	487e      	ldr	r0, [pc, #504]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004cc2:	f7fd fbc5 	bl	8002450 <chCacheGetObject>
 8004cc6:	4604      	mov	r4, r0

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004cc8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004cca:	497d      	ldr	r1, [pc, #500]	; (8004ec0 <oslib_test_006_001_execute+0x2b0>)
 8004ccc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004cd0:	f7fc fa8e 	bl	80011f0 <_test_assert>
 8004cd4:	bb20      	cbnz	r0, 8004d20 <oslib_test_006_001_execute+0x110>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8004cd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004cd8:	497d      	ldr	r1, [pc, #500]	; (8004ed0 <oslib_test_006_001_execute+0x2c0>)
 8004cda:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004cde:	f7fc fa87 	bl	80011f0 <_test_assert>
 8004ce2:	b9e8      	cbnz	r0, 8004d20 <oslib_test_006_001_execute+0x110>

      error = chCacheReadObject(&cache1, objp, false);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4874      	ldr	r0, [pc, #464]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004cea:	f7fc fd11 	bl	8001710 <chCacheReadObject>

      test_assert(error == false, "returned error");
 8004cee:	f080 0001 	eor.w	r0, r0, #1
 8004cf2:	4978      	ldr	r1, [pc, #480]	; (8004ed4 <oslib_test_006_001_execute+0x2c4>)
 8004cf4:	b2c0      	uxtb	r0, r0
 8004cf6:	f7fc fa7b 	bl	80011f0 <_test_assert>
 8004cfa:	b988      	cbnz	r0, 8004d20 <oslib_test_006_001_execute+0x110>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004cfc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004cfe:	4970      	ldr	r1, [pc, #448]	; (8004ec0 <oslib_test_006_001_execute+0x2b0>)
 8004d00:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004d04:	f7fc fa74 	bl	80011f0 <_test_assert>
 8004d08:	b950      	cbnz	r0, 8004d20 <oslib_test_006_001_execute+0x110>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8004d0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d0c:	08c0      	lsrs	r0, r0, #3
 8004d0e:	f080 0001 	eor.w	r0, r0, #1
 8004d12:	4971      	ldr	r1, [pc, #452]	; (8004ed8 <oslib_test_006_001_execute+0x2c8>)
 8004d14:	f000 0001 	and.w	r0, r0, #1
 8004d18:	f7fc fa6a 	bl	80011f0 <_test_assert>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d0be      	beq.n	8004c9e <oslib_test_006_001_execute+0x8e>
    }

    test_assert_sequence("", "unexpected tokens");
  }
  test_end_step(6);
}
 8004d20:	b005      	add	sp, #20
 8004d22:	bd30      	pop	{r4, r5, pc}
    test_assert_sequence("abcdefgh", "unexpected tokens");
 8004d24:	4968      	ldr	r1, [pc, #416]	; (8004ec8 <oslib_test_006_001_execute+0x2b8>)
 8004d26:	486d      	ldr	r0, [pc, #436]	; (8004edc <oslib_test_006_001_execute+0x2cc>)
 8004d28:	f7fc fb12 	bl	8001350 <_test_assert_sequence>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d1f7      	bne.n	8004d20 <oslib_test_006_001_execute+0x110>
  test_set_step(4);
 8004d30:	4b5d      	ldr	r3, [pc, #372]	; (8004ea8 <oslib_test_006_001_execute+0x298>)
 8004d32:	2204      	movs	r2, #4
 8004d34:	601a      	str	r2, [r3, #0]
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 8004d36:	2500      	movs	r5, #0
 8004d38:	e00c      	b.n	8004d54 <oslib_test_006_001_execute+0x144>
 8004d3a:	2320      	movs	r3, #32
 8004d3c:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8004d40:	4621      	mov	r1, r4
 8004d42:	485e      	ldr	r0, [pc, #376]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004d44:	f7ff ff1c 	bl	8004b80 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8004d48:	f005 fc22 	bl	800a590 <chSchRescheduleS>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	3501      	adds	r5, #1
 8004d54:	2d07      	cmp	r5, #7
 8004d56:	d83c      	bhi.n	8004dd2 <oslib_test_006_001_execute+0x1c2>
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8004d58:	462a      	mov	r2, r5
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4857      	ldr	r0, [pc, #348]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004d5e:	f7fd fb77 	bl	8002450 <chCacheGetObject>
 8004d62:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004d64:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004d66:	4956      	ldr	r1, [pc, #344]	; (8004ec0 <oslib_test_006_001_execute+0x2b0>)
 8004d68:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004d6c:	f7fc fa40 	bl	80011f0 <_test_assert>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d1d5      	bne.n	8004d20 <oslib_test_006_001_execute+0x110>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8004d74:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d76:	4956      	ldr	r1, [pc, #344]	; (8004ed0 <oslib_test_006_001_execute+0x2c0>)
 8004d78:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004d7c:	f7fc fa38 	bl	80011f0 <_test_assert>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d1cd      	bne.n	8004d20 <oslib_test_006_001_execute+0x110>
      error = chCacheReadObject(&cache1, objp, true);
 8004d84:	2201      	movs	r2, #1
 8004d86:	4621      	mov	r1, r4
 8004d88:	484c      	ldr	r0, [pc, #304]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004d8a:	f7fc fcc1 	bl	8001710 <chCacheReadObject>
      test_assert(error == false, "returned error");
 8004d8e:	f080 0001 	eor.w	r0, r0, #1
 8004d92:	4950      	ldr	r1, [pc, #320]	; (8004ed4 <oslib_test_006_001_execute+0x2c4>)
 8004d94:	b2c0      	uxtb	r0, r0
 8004d96:	f7fc fa2b 	bl	80011f0 <_test_assert>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d1c0      	bne.n	8004d20 <oslib_test_006_001_execute+0x110>
      objp = chCacheGetObject(&cache1, 0U, i);
 8004d9e:	462a      	mov	r2, r5
 8004da0:	2100      	movs	r1, #0
 8004da2:	4846      	ldr	r0, [pc, #280]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004da4:	f7fd fb54 	bl	8002450 <chCacheGetObject>
 8004da8:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004daa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004dac:	4944      	ldr	r1, [pc, #272]	; (8004ec0 <oslib_test_006_001_execute+0x2b0>)
 8004dae:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004db2:	f7fc fa1d 	bl	80011f0 <_test_assert>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d1b2      	bne.n	8004d20 <oslib_test_006_001_execute+0x110>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8004dba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004dbc:	08c0      	lsrs	r0, r0, #3
 8004dbe:	f080 0001 	eor.w	r0, r0, #1
 8004dc2:	4945      	ldr	r1, [pc, #276]	; (8004ed8 <oslib_test_006_001_execute+0x2c8>)
 8004dc4:	f000 0001 	and.w	r0, r0, #1
 8004dc8:	f7fc fa12 	bl	80011f0 <_test_assert>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d0b4      	beq.n	8004d3a <oslib_test_006_001_execute+0x12a>
 8004dd0:	e7a6      	b.n	8004d20 <oslib_test_006_001_execute+0x110>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 8004dd2:	493d      	ldr	r1, [pc, #244]	; (8004ec8 <oslib_test_006_001_execute+0x2b8>)
 8004dd4:	4841      	ldr	r0, [pc, #260]	; (8004edc <oslib_test_006_001_execute+0x2cc>)
 8004dd6:	f7fc fabb 	bl	8001350 <_test_assert_sequence>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d1a0      	bne.n	8004d20 <oslib_test_006_001_execute+0x110>
  test_set_step(5);
 8004dde:	4b32      	ldr	r3, [pc, #200]	; (8004ea8 <oslib_test_006_001_execute+0x298>)
 8004de0:	2205      	movs	r2, #5
 8004de2:	601a      	str	r2, [r3, #0]
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8004de4:	2504      	movs	r5, #4
 8004de6:	2d07      	cmp	r5, #7
 8004de8:	d826      	bhi.n	8004e38 <oslib_test_006_001_execute+0x228>
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8004dea:	462a      	mov	r2, r5
 8004dec:	2100      	movs	r1, #0
 8004dee:	4833      	ldr	r0, [pc, #204]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004df0:	f7fd fb2e 	bl	8002450 <chCacheGetObject>
 8004df4:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004df6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004df8:	4931      	ldr	r1, [pc, #196]	; (8004ec0 <oslib_test_006_001_execute+0x2b0>)
 8004dfa:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004dfe:	f7fc f9f7 	bl	80011f0 <_test_assert>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d18c      	bne.n	8004d20 <oslib_test_006_001_execute+0x110>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 8004e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e08:	08db      	lsrs	r3, r3, #3
 8004e0a:	f083 0001 	eor.w	r0, r3, #1
 8004e0e:	4932      	ldr	r1, [pc, #200]	; (8004ed8 <oslib_test_006_001_execute+0x2c8>)
 8004e10:	f000 0001 	and.w	r0, r0, #1
 8004e14:	f7fc f9ec 	bl	80011f0 <_test_assert>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d181      	bne.n	8004d20 <oslib_test_006_001_execute+0x110>
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8004e22:	4621      	mov	r1, r4
 8004e24:	4825      	ldr	r0, [pc, #148]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004e26:	f7ff feab 	bl	8004b80 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8004e2a:	f005 fbb1 	bl	800a590 <chSchRescheduleS>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f383 8811 	msr	BASEPRI, r3
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 8004e34:	3501      	adds	r5, #1
 8004e36:	e7d6      	b.n	8004de6 <oslib_test_006_001_execute+0x1d6>
    test_assert_sequence("", "unexpected tokens");
 8004e38:	4923      	ldr	r1, [pc, #140]	; (8004ec8 <oslib_test_006_001_execute+0x2b8>)
 8004e3a:	4824      	ldr	r0, [pc, #144]	; (8004ecc <oslib_test_006_001_execute+0x2bc>)
 8004e3c:	f7fc fa88 	bl	8001350 <_test_assert_sequence>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	f47f af6d 	bne.w	8004d20 <oslib_test_006_001_execute+0x110>
  test_set_step(6);
 8004e46:	4b18      	ldr	r3, [pc, #96]	; (8004ea8 <oslib_test_006_001_execute+0x298>)
 8004e48:	2206      	movs	r2, #6
 8004e4a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < NUM_OBJECTS; i++) {
 8004e4c:	2500      	movs	r5, #0
 8004e4e:	2d03      	cmp	r5, #3
 8004e50:	d825      	bhi.n	8004e9e <oslib_test_006_001_execute+0x28e>
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 8004e52:	462a      	mov	r2, r5
 8004e54:	2100      	movs	r1, #0
 8004e56:	4819      	ldr	r0, [pc, #100]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004e58:	f7fd fafa 	bl	8002450 <chCacheGetObject>
 8004e5c:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 8004e5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004e60:	4917      	ldr	r1, [pc, #92]	; (8004ec0 <oslib_test_006_001_execute+0x2b0>)
 8004e62:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004e66:	f7fc f9c3 	bl	80011f0 <_test_assert>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	f47f af58 	bne.w	8004d20 <oslib_test_006_001_execute+0x110>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 8004e70:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e72:	4917      	ldr	r1, [pc, #92]	; (8004ed0 <oslib_test_006_001_execute+0x2c0>)
 8004e74:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004e78:	f7fc f9ba 	bl	80011f0 <_test_assert>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	f47f af4f 	bne.w	8004d20 <oslib_test_006_001_execute+0x110>
 8004e82:	2320      	movs	r3, #32
 8004e84:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8004e88:	4621      	mov	r1, r4
 8004e8a:	480c      	ldr	r0, [pc, #48]	; (8004ebc <oslib_test_006_001_execute+0x2ac>)
 8004e8c:	f7ff fe78 	bl	8004b80 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8004e90:	f005 fb7e 	bl	800a590 <chSchRescheduleS>
 8004e94:	2300      	movs	r3, #0
 8004e96:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < NUM_OBJECTS; i++) {
 8004e9a:	3501      	adds	r5, #1
 8004e9c:	e7d7      	b.n	8004e4e <oslib_test_006_001_execute+0x23e>
    test_assert_sequence("", "unexpected tokens");
 8004e9e:	490a      	ldr	r1, [pc, #40]	; (8004ec8 <oslib_test_006_001_execute+0x2b8>)
 8004ea0:	480a      	ldr	r0, [pc, #40]	; (8004ecc <oslib_test_006_001_execute+0x2bc>)
 8004ea2:	f7fc fa55 	bl	8001350 <_test_assert_sequence>
  test_end_step(6);
 8004ea6:	e73b      	b.n	8004d20 <oslib_test_006_001_execute+0x110>
 8004ea8:	20002454 	.word	0x20002454
 8004eac:	08000841 	.word	0x08000841
 8004eb0:	08004ee1 	.word	0x08004ee1
 8004eb4:	20001c20 	.word	0x20001c20
 8004eb8:	20001b00 	.word	0x20001b00
 8004ebc:	200019d4 	.word	0x200019d4
 8004ec0:	0800cb14 	.word	0x0800cb14
 8004ec4:	0800cb20 	.word	0x0800cb20
 8004ec8:	0800cb38 	.word	0x0800cb38
 8004ecc:	0800c3e4 	.word	0x0800c3e4
 8004ed0:	0800cb60 	.word	0x0800cb60
 8004ed4:	0800cb4c 	.word	0x0800cb4c
 8004ed8:	0800cb5c 	.word	0x0800cb5c
 8004edc:	0800cb68 	.word	0x0800cb68

08004ee0 <obj_read>:
                     bool async) {
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	4615      	mov	r5, r2
  test_emit_token('a' + objp->obj_key);
 8004ee8:	694b      	ldr	r3, [r1, #20]
 8004eea:	3361      	adds	r3, #97	; 0x61
 8004eec:	b2d8      	uxtb	r0, r3
 8004eee:	f7fb fc8f 	bl	8000810 <test_emit_token>
  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 8004ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ef4:	f023 0308 	bic.w	r3, r3, #8
 8004ef8:	6263      	str	r3, [r4, #36]	; 0x24
  if (async) {
 8004efa:	b90d      	cbnz	r5, 8004f00 <obj_read+0x20>
}
 8004efc:	2000      	movs	r0, #0
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	2320      	movs	r3, #32
 8004f02:	f383 8811 	msr	BASEPRI, r3
  chCacheReleaseObjectI(ocp, objp);
 8004f06:	4621      	mov	r1, r4
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f7ff fe39 	bl	8004b80 <chCacheReleaseObjectI>
  chSchRescheduleS();
 8004f0e:	f005 fb3f 	bl	800a590 <chSchRescheduleS>
 8004f12:	2300      	movs	r3, #0
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	e7f0      	b.n	8004efc <obj_read+0x1c>
 8004f1a:	bf00      	nop
 8004f1c:	0000      	movs	r0, r0
	...

08004f20 <chGuardedPoolFree>:
 * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {
 8004f20:	b510      	push	{r4, lr}
 8004f22:	4604      	mov	r4, r0
 8004f24:	2320      	movs	r3, #32
 8004f26:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
 8004f2a:	300c      	adds	r0, #12
 8004f2c:	f7fc fc10 	bl	8001750 <chPoolFreeI>
  chSemSignalI(&gmp->sem);
 8004f30:	4620      	mov	r0, r4
 8004f32:	f7ff fdfd 	bl	8004b30 <chSemSignalI>

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 8004f36:	f005 fb2b 	bl	800a590 <chSchRescheduleS>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8004f40:	bd10      	pop	{r4, pc}
 8004f42:	bf00      	nop
	...

08004f50 <chGuardedPoolLoadArray>:
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4606      	mov	r6, r0
 8004f54:	460d      	mov	r5, r1
 8004f56:	4614      	mov	r4, r2
  while (n != 0U) {
 8004f58:	b13c      	cbz	r4, 8004f6a <chGuardedPoolLoadArray+0x1a>
 *
 * @api
 */
static inline void chGuardedPoolAdd(guarded_memory_pool_t *gmp, void *objp) {

  chGuardedPoolFree(gmp, objp);
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f7ff ffdf 	bl	8004f20 <chGuardedPoolFree>
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8004f62:	6933      	ldr	r3, [r6, #16]
 8004f64:	441d      	add	r5, r3
    n--;
 8004f66:	3c01      	subs	r4, #1
 8004f68:	e7f6      	b.n	8004f58 <chGuardedPoolLoadArray+0x8>
}
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	0000      	movs	r0, r0
	...

08004f70 <chFactoryCreateObjectsFIFO>:
                                               unsigned objalign) {
 8004f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f74:	4606      	mov	r6, r0
 8004f76:	460d      	mov	r5, r1
 8004f78:	4614      	mov	r4, r2
 8004f7a:	461f      	mov	r7, r3
  F_LOCK();
 8004f7c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8004fdc <chFactoryCreateObjectsFIFO+0x6c>
 8004f80:	4640      	mov	r0, r8
 8004f82:	f7fe fa25 	bl	80033d0 <chMtxLock>
                                                      sizeof (dyn_objects_fifo_t) +
 8004f86:	f104 0215 	add.w	r2, r4, #21
                                                      (objn * objsize));
 8004f8a:	fb05 f304 	mul.w	r3, r5, r4
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 8004f8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004f92:	f108 0140 	add.w	r1, r8, #64	; 0x40
 8004f96:	4630      	mov	r0, r6
 8004f98:	f7ff faba 	bl	8004510 <dyn_create_object_heap>
  if (dofp != NULL) {
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	b1b0      	cbz	r0, 8004fce <chFactoryCreateObjectsFIFO+0x5e>
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 8004fa0:	f100 0854 	add.w	r8, r0, #84	; 0x54
    chFifoObjectInitAligned(&dofp->fifo, objsize, objn, objalign,
 8004fa4:	f100 0310 	add.w	r3, r0, #16
                            (void *)&msgbuf[objn], msgbuf);
 8004fa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8004fac:	463a      	mov	r2, r7
 8004fae:	4629      	mov	r1, r5
 8004fb0:	461d      	mov	r5, r3
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fc ff1c 	bl	8001df0 <chGuardedPoolObjectInitAligned>
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 8004fb8:	4622      	mov	r2, r4
 8004fba:	4649      	mov	r1, r9
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f7ff ffc7 	bl	8004f50 <chGuardedPoolLoadArray>
  chMBObjectInit(&ofp->mbx, msgbuf, objn);
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	f106 002c 	add.w	r0, r6, #44	; 0x2c
 8004fca:	f7fc fcf1 	bl	80019b0 <chMBObjectInit>
  F_UNLOCK();
 8004fce:	4803      	ldr	r0, [pc, #12]	; (8004fdc <chFactoryCreateObjectsFIFO+0x6c>)
 8004fd0:	f7fe f8a6 	bl	8003120 <chMtxUnlock>
}
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fda:	bf00      	nop
 8004fdc:	20001a90 	.word	0x20001a90

08004fe0 <oslib_test_009_005_execute>:
static void oslib_test_009_005_execute(void) {
 8004fe0:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8004fe2:	4b49      	ldr	r3, [pc, #292]	; (8005108 <oslib_test_009_005_execute+0x128>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 8004fe8:	4848      	ldr	r0, [pc, #288]	; (800510c <oslib_test_009_005_execute+0x12c>)
 8004fea:	f7fe fa51 	bl	8003490 <chFactoryFindObjectsFIFO>
    test_assert(dofp == NULL, "found");
 8004fee:	4948      	ldr	r1, [pc, #288]	; (8005110 <oslib_test_009_005_execute+0x130>)
 8004ff0:	fab0 f080 	clz	r0, r0
 8004ff4:	0940      	lsrs	r0, r0, #5
 8004ff6:	f7fc f8fb 	bl	80011f0 <_test_assert>
 8004ffa:	b100      	cbz	r0, 8004ffe <oslib_test_009_005_execute+0x1e>
}
 8004ffc:	bd38      	pop	{r3, r4, r5, pc}
  test_set_step(2);
 8004ffe:	4b42      	ldr	r3, [pc, #264]	; (8005108 <oslib_test_009_005_execute+0x128>)
 8005000:	2202      	movs	r2, #2
 8005002:	601a      	str	r2, [r3, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8005004:	2304      	movs	r3, #4
 8005006:	2210      	movs	r2, #16
 8005008:	4611      	mov	r1, r2
 800500a:	4840      	ldr	r0, [pc, #256]	; (800510c <oslib_test_009_005_execute+0x12c>)
 800500c:	f7ff ffb0 	bl	8004f70 <chFactoryCreateObjectsFIFO>
    test_assert(dofp != NULL, "cannot create");
 8005010:	4604      	mov	r4, r0
 8005012:	4940      	ldr	r1, [pc, #256]	; (8005114 <oslib_test_009_005_execute+0x134>)
 8005014:	3800      	subs	r0, #0
 8005016:	bf18      	it	ne
 8005018:	2001      	movne	r0, #1
 800501a:	f7fc f8e9 	bl	80011f0 <_test_assert>
 800501e:	2800      	cmp	r0, #0
 8005020:	d1ec      	bne.n	8004ffc <oslib_test_009_005_execute+0x1c>
  test_set_step(3);
 8005022:	4b39      	ldr	r3, [pc, #228]	; (8005108 <oslib_test_009_005_execute+0x128>)
 8005024:	2203      	movs	r2, #3
 8005026:	601a      	str	r2, [r3, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 8005028:	2304      	movs	r3, #4
 800502a:	2210      	movs	r2, #16
 800502c:	4611      	mov	r1, r2
 800502e:	4837      	ldr	r0, [pc, #220]	; (800510c <oslib_test_009_005_execute+0x12c>)
 8005030:	f7ff ff9e 	bl	8004f70 <chFactoryCreateObjectsFIFO>
    test_assert(dofp1 == NULL, "can create");
 8005034:	4938      	ldr	r1, [pc, #224]	; (8005118 <oslib_test_009_005_execute+0x138>)
 8005036:	fab0 f080 	clz	r0, r0
 800503a:	0940      	lsrs	r0, r0, #5
 800503c:	f7fc f8d8 	bl	80011f0 <_test_assert>
 8005040:	2800      	cmp	r0, #0
 8005042:	d1db      	bne.n	8004ffc <oslib_test_009_005_execute+0x1c>
  test_set_step(4);
 8005044:	4b30      	ldr	r3, [pc, #192]	; (8005108 <oslib_test_009_005_execute+0x128>)
 8005046:	2204      	movs	r2, #4
 8005048:	601a      	str	r2, [r3, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 800504a:	4830      	ldr	r0, [pc, #192]	; (800510c <oslib_test_009_005_execute+0x12c>)
 800504c:	f7fe fa20 	bl	8003490 <chFactoryFindObjectsFIFO>
    test_assert(dofp1 != NULL, "not found");
 8005050:	4605      	mov	r5, r0
 8005052:	4932      	ldr	r1, [pc, #200]	; (800511c <oslib_test_009_005_execute+0x13c>)
 8005054:	3800      	subs	r0, #0
 8005056:	bf18      	it	ne
 8005058:	2001      	movne	r0, #1
 800505a:	f7fc f8c9 	bl	80011f0 <_test_assert>
 800505e:	2800      	cmp	r0, #0
 8005060:	d1cc      	bne.n	8004ffc <oslib_test_009_005_execute+0x1c>
    test_assert(dofp == dofp1, "object reference mismatch");
 8005062:	492f      	ldr	r1, [pc, #188]	; (8005120 <oslib_test_009_005_execute+0x140>)
 8005064:	42ac      	cmp	r4, r5
 8005066:	bf14      	ite	ne
 8005068:	2000      	movne	r0, #0
 800506a:	2001      	moveq	r0, #1
 800506c:	f7fc f8c0 	bl	80011f0 <_test_assert>
 8005070:	2800      	cmp	r0, #0
 8005072:	d1c3      	bne.n	8004ffc <oslib_test_009_005_execute+0x1c>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 8005074:	6868      	ldr	r0, [r5, #4]
 8005076:	492a      	ldr	r1, [pc, #168]	; (8005120 <oslib_test_009_005_execute+0x140>)
 8005078:	2802      	cmp	r0, #2
 800507a:	bf14      	ite	ne
 800507c:	2000      	movne	r0, #0
 800507e:	2001      	moveq	r0, #1
 8005080:	f7fc f8b6 	bl	80011f0 <_test_assert>
 8005084:	2800      	cmp	r0, #0
 8005086:	d1b9      	bne.n	8004ffc <oslib_test_009_005_execute+0x1c>
 8005088:	686b      	ldr	r3, [r5, #4]
 800508a:	3301      	adds	r3, #1
 800508c:	606b      	str	r3, [r5, #4]
    test_assert(dofp1 == dofp2, "object reference mismatch");
 800508e:	4924      	ldr	r1, [pc, #144]	; (8005120 <oslib_test_009_005_execute+0x140>)
 8005090:	2001      	movs	r0, #1
 8005092:	f7fc f8ad 	bl	80011f0 <_test_assert>
 8005096:	2800      	cmp	r0, #0
 8005098:	d1b0      	bne.n	8004ffc <oslib_test_009_005_execute+0x1c>
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 800509a:	6868      	ldr	r0, [r5, #4]
 800509c:	4920      	ldr	r1, [pc, #128]	; (8005120 <oslib_test_009_005_execute+0x140>)
 800509e:	2803      	cmp	r0, #3
 80050a0:	bf14      	ite	ne
 80050a2:	2000      	movne	r0, #0
 80050a4:	2001      	moveq	r0, #1
 80050a6:	f7fc f8a3 	bl	80011f0 <_test_assert>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d1a6      	bne.n	8004ffc <oslib_test_009_005_execute+0x1c>
    chFactoryReleaseObjectsFIFO(dofp2);
 80050ae:	4628      	mov	r0, r5
 80050b0:	f7fe fdb6 	bl	8003c20 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 80050b4:	6868      	ldr	r0, [r5, #4]
 80050b6:	491b      	ldr	r1, [pc, #108]	; (8005124 <oslib_test_009_005_execute+0x144>)
 80050b8:	2802      	cmp	r0, #2
 80050ba:	bf14      	ite	ne
 80050bc:	2000      	movne	r0, #0
 80050be:	2001      	moveq	r0, #1
 80050c0:	f7fc f896 	bl	80011f0 <_test_assert>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d199      	bne.n	8004ffc <oslib_test_009_005_execute+0x1c>
    chFactoryReleaseObjectsFIFO(dofp1);
 80050c8:	4628      	mov	r0, r5
 80050ca:	f7fe fda9 	bl	8003c20 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 80050ce:	6860      	ldr	r0, [r4, #4]
 80050d0:	4914      	ldr	r1, [pc, #80]	; (8005124 <oslib_test_009_005_execute+0x144>)
 80050d2:	2801      	cmp	r0, #1
 80050d4:	bf14      	ite	ne
 80050d6:	2000      	movne	r0, #0
 80050d8:	2001      	moveq	r0, #1
 80050da:	f7fc f889 	bl	80011f0 <_test_assert>
 80050de:	2800      	cmp	r0, #0
 80050e0:	d18c      	bne.n	8004ffc <oslib_test_009_005_execute+0x1c>
  test_set_step(5);
 80050e2:	4d09      	ldr	r5, [pc, #36]	; (8005108 <oslib_test_009_005_execute+0x128>)
 80050e4:	2305      	movs	r3, #5
 80050e6:	602b      	str	r3, [r5, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 80050e8:	4620      	mov	r0, r4
 80050ea:	f7fe fd99 	bl	8003c20 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 80050ee:	2306      	movs	r3, #6
 80050f0:	602b      	str	r3, [r5, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 80050f2:	4806      	ldr	r0, [pc, #24]	; (800510c <oslib_test_009_005_execute+0x12c>)
 80050f4:	f7fe f9cc 	bl	8003490 <chFactoryFindObjectsFIFO>
    test_assert(dofp == NULL, "found");
 80050f8:	4905      	ldr	r1, [pc, #20]	; (8005110 <oslib_test_009_005_execute+0x130>)
 80050fa:	fab0 f080 	clz	r0, r0
 80050fe:	0940      	lsrs	r0, r0, #5
 8005100:	f7fc f876 	bl	80011f0 <_test_assert>
  test_end_step(6);
 8005104:	e77a      	b.n	8004ffc <oslib_test_009_005_execute+0x1c>
 8005106:	bf00      	nop
 8005108:	20002454 	.word	0x20002454
 800510c:	0800c8f0 	.word	0x0800c8f0
 8005110:	0800c7fc 	.word	0x0800c7fc
 8005114:	0800c7dc 	.word	0x0800c7dc
 8005118:	0800c7ec 	.word	0x0800c7ec
 800511c:	0800c7f8 	.word	0x0800c7f8
 8005120:	0800c804 	.word	0x0800c804
 8005124:	0800c820 	.word	0x0800c820
	...

08005130 <chSemResetWithMessageI>:
void chSemResetWithMessageI(semaphore_t *sp, cnt_t n, msg_t msg) {
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	4604      	mov	r4, r0
 8005134:	4616      	mov	r6, r2
  cnt = sp->cnt;
 8005136:	6885      	ldr	r5, [r0, #8]
  sp->cnt = n;
 8005138:	6081      	str	r1, [r0, #8]
  while (++cnt <= (cnt_t)0) {
 800513a:	3501      	adds	r5, #1
 800513c:	2d00      	cmp	r5, #0
 800513e:	dc07      	bgt.n	8005150 <chSemResetWithMessageI+0x20>
  thread_t *tp = tqp->prev;
 8005140:	6860      	ldr	r0, [r4, #4]
  tqp->prev             = tp->queue.prev;
 8005142:	6843      	ldr	r3, [r0, #4]
 8005144:	6063      	str	r3, [r4, #4]
  tqp->prev->queue.next = (thread_t *)tqp;
 8005146:	601c      	str	r4, [r3, #0]
    chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 8005148:	f005 fa4a 	bl	800a5e0 <chSchReadyI>
 800514c:	6246      	str	r6, [r0, #36]	; 0x24
 800514e:	e7f4      	b.n	800513a <chSemResetWithMessageI+0xa>
}
 8005150:	bd70      	pop	{r4, r5, r6, pc}
 8005152:	bf00      	nop
	...

08005160 <chSemResetWithMessage>:
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 8005160:	b508      	push	{r3, lr}
 8005162:	2320      	movs	r3, #32
 8005164:	f383 8811 	msr	BASEPRI, r3
  chSemResetWithMessageI(sp, n, msg);
 8005168:	f7ff ffe2 	bl	8005130 <chSemResetWithMessageI>
  chSchRescheduleS();
 800516c:	f005 fa10 	bl	800a590 <chSchRescheduleS>
 8005170:	2300      	movs	r3, #0
 8005172:	f383 8811 	msr	BASEPRI, r3
}
 8005176:	bd08      	pop	{r3, pc}
	...

08005180 <rt_test_006_001_execute>:
static void rt_test_006_001_execute(void) {
 8005180:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8005182:	4b2d      	ldr	r3, [pc, #180]	; (8005238 <rt_test_006_001_execute+0xb8>)
 8005184:	2201      	movs	r2, #1
 8005186:	601a      	str	r2, [r3, #0]
    msg = chSemWait(&sem1);
 8005188:	4d2c      	ldr	r5, [pc, #176]	; (800523c <rt_test_006_001_execute+0xbc>)
 800518a:	4628      	mov	r0, r5
 800518c:	f7fd f9a0 	bl	80024d0 <chSemWait>
 8005190:	4604      	mov	r4, r0
 8005192:	2320      	movs	r3, #32
 8005194:	f383 8811 	msr	BASEPRI, r3
  return sp->cnt;
 8005198:	68a8      	ldr	r0, [r5, #8]
    test_assert_lock(chSemGetCounterI(&sem1) == 0, "wrong counter value");
 800519a:	4929      	ldr	r1, [pc, #164]	; (8005240 <rt_test_006_001_execute+0xc0>)
 800519c:	fab0 f080 	clz	r0, r0
 80051a0:	0940      	lsrs	r0, r0, #5
 80051a2:	f7fc f825 	bl	80011f0 <_test_assert>
 80051a6:	b118      	cbz	r0, 80051b0 <rt_test_006_001_execute+0x30>
 80051a8:	2300      	movs	r3, #0
 80051aa:	f383 8811 	msr	BASEPRI, r3
}
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
 80051b0:	2300      	movs	r3, #0
 80051b2:	f383 8811 	msr	BASEPRI, r3
    test_assert(MSG_OK == msg, "wrong returned message");
 80051b6:	4923      	ldr	r1, [pc, #140]	; (8005244 <rt_test_006_001_execute+0xc4>)
 80051b8:	fab4 f084 	clz	r0, r4
 80051bc:	0940      	lsrs	r0, r0, #5
 80051be:	f7fc f817 	bl	80011f0 <_test_assert>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d1f3      	bne.n	80051ae <rt_test_006_001_execute+0x2e>
  test_set_step(2);
 80051c6:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <rt_test_006_001_execute+0xb8>)
 80051c8:	2202      	movs	r2, #2
 80051ca:	601a      	str	r2, [r3, #0]
    chSemSignal(&sem1);
 80051cc:	4c1b      	ldr	r4, [pc, #108]	; (800523c <rt_test_006_001_execute+0xbc>)
 80051ce:	4620      	mov	r0, r4
 80051d0:	f7fc fffe 	bl	80021d0 <chSemSignal>
 80051d4:	2320      	movs	r3, #32
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	68a0      	ldr	r0, [r4, #8]
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "wrong counter value");
 80051dc:	4918      	ldr	r1, [pc, #96]	; (8005240 <rt_test_006_001_execute+0xc0>)
 80051de:	2801      	cmp	r0, #1
 80051e0:	bf14      	ite	ne
 80051e2:	2000      	movne	r0, #0
 80051e4:	2001      	moveq	r0, #1
 80051e6:	f7fc f803 	bl	80011f0 <_test_assert>
 80051ea:	b118      	cbz	r0, 80051f4 <rt_test_006_001_execute+0x74>
 80051ec:	2300      	movs	r3, #0
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	e7dc      	b.n	80051ae <rt_test_006_001_execute+0x2e>
 80051f4:	2300      	movs	r3, #0
 80051f6:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 80051fa:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <rt_test_006_001_execute+0xb8>)
 80051fc:	2203      	movs	r2, #3
 80051fe:	601a      	str	r2, [r3, #0]
  chSemResetWithMessage(sp, n, MSG_RESET);
 8005200:	4c0e      	ldr	r4, [pc, #56]	; (800523c <rt_test_006_001_execute+0xbc>)
 8005202:	f06f 0201 	mvn.w	r2, #1
 8005206:	2102      	movs	r1, #2
 8005208:	4620      	mov	r0, r4
 800520a:	f7ff ffa9 	bl	8005160 <chSemResetWithMessage>
 800520e:	2320      	movs	r3, #32
 8005210:	f383 8811 	msr	BASEPRI, r3
  return sp->cnt;
 8005214:	68a0      	ldr	r0, [r4, #8]
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8005216:	490a      	ldr	r1, [pc, #40]	; (8005240 <rt_test_006_001_execute+0xc0>)
 8005218:	2802      	cmp	r0, #2
 800521a:	bf14      	ite	ne
 800521c:	2000      	movne	r0, #0
 800521e:	2001      	moveq	r0, #1
 8005220:	f7fb ffe6 	bl	80011f0 <_test_assert>
 8005224:	b918      	cbnz	r0, 800522e <rt_test_006_001_execute+0xae>
 8005226:	2300      	movs	r3, #0
 8005228:	f383 8811 	msr	BASEPRI, r3
  test_end_step(3);
 800522c:	e7bf      	b.n	80051ae <rt_test_006_001_execute+0x2e>
 800522e:	2300      	movs	r3, #0
 8005230:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&sem1) == 2, "wrong counter value");
 8005234:	e7bb      	b.n	80051ae <rt_test_006_001_execute+0x2e>
 8005236:	bf00      	nop
 8005238:	20002454 	.word	0x20002454
 800523c:	20001d20 	.word	0x20001d20
 8005240:	0800cb74 	.word	0x0800cb74
 8005244:	0800cb88 	.word	0x0800cb88
	...

08005250 <rt_test_006_001_teardown>:
static void rt_test_006_001_teardown(void) {
 8005250:	b508      	push	{r3, lr}
  chSemResetWithMessage(sp, n, MSG_RESET);
 8005252:	f06f 0201 	mvn.w	r2, #1
 8005256:	2100      	movs	r1, #0
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <rt_test_006_001_teardown+0x10>)
 800525a:	f7ff ff81 	bl	8005160 <chSemResetWithMessage>
}
 800525e:	bd08      	pop	{r3, pc}
 8005260:	20001d20 	.word	0x20001d20
	...

08005270 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8005270:	b510      	push	{r4, lr}
  thread_t *tp = currp;
 8005272:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <chThdExitS+0x40>)
 8005274:	699c      	ldr	r4, [r3, #24]
  tp->u.exitcode = msg;
 8005276:	6260      	str	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8005278:	f104 0328 	add.w	r3, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
 800527c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800527e:	4283      	cmp	r3, r0
 8005280:	d004      	beq.n	800528c <chThdExitS+0x1c>
  tlp->next = tp->queue.next;
 8005282:	6803      	ldr	r3, [r0, #0]
 8005284:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8005286:	f005 f9ab 	bl	800a5e0 <chSchReadyI>
 800528a:	e7f5      	b.n	8005278 <chThdExitS+0x8>
  if ((tp->refs == (trefs_t)0) &&
 800528c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005290:	b94b      	cbnz	r3, 80052a6 <chThdExitS+0x36>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8005292:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  if ((tp->refs == (trefs_t)0) &&
 8005296:	f013 0f03 	tst.w	r3, #3
 800529a:	d104      	bne.n	80052a6 <chThdExitS+0x36>
    REG_REMOVE(tp);
 800529c:	6962      	ldr	r2, [r4, #20]
 800529e:	6923      	ldr	r3, [r4, #16]
 80052a0:	6113      	str	r3, [r2, #16]
 80052a2:	6962      	ldr	r2, [r4, #20]
 80052a4:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80052a6:	200f      	movs	r0, #15
 80052a8:	f005 f982 	bl	800a5b0 <chSchGoSleepS>
}
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	bf00      	nop
 80052b0:	20001a18 	.word	0x20001a18
	...

080052c0 <chEvtWaitAllTimeout>:
 * @return              The mask of the served and cleared events.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	4604      	mov	r4, r0
  thread_t *ctp = currp;
 80052c4:	4b10      	ldr	r3, [pc, #64]	; (8005308 <chEvtWaitAllTimeout+0x48>)
 80052c6:	699d      	ldr	r5, [r3, #24]
 80052c8:	2320      	movs	r3, #32
 80052ca:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  if ((ctp->epending & events) != events) {
 80052ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80052d0:	ea30 0303 	bics.w	r3, r0, r3
 80052d4:	d00b      	beq.n	80052ee <chEvtWaitAllTimeout+0x2e>
    if (TIME_IMMEDIATE == timeout) {
 80052d6:	b921      	cbnz	r1, 80052e2 <chEvtWaitAllTimeout+0x22>
 80052d8:	2300      	movs	r3, #0
 80052da:	f383 8811 	msr	BASEPRI, r3
      chSysUnlock();
      return (eventmask_t)0;
 80052de:	4608      	mov	r0, r1
 80052e0:	e00d      	b.n	80052fe <chEvtWaitAllTimeout+0x3e>
    }
    ctp->u.ewmask = events;
 80052e2:	6268      	str	r0, [r5, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 80052e4:	200b      	movs	r0, #11
 80052e6:	f005 fe9b 	bl	800b020 <chSchGoSleepTimeoutS>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	db08      	blt.n	8005300 <chEvtWaitAllTimeout+0x40>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 80052ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80052f0:	ea23 0304 	bic.w	r3, r3, r4
 80052f4:	636b      	str	r3, [r5, #52]	; 0x34
 80052f6:	2300      	movs	r3, #0
 80052f8:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return events;
 80052fc:	4620      	mov	r0, r4
}
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	2000      	movs	r0, #0
 8005302:	f380 8811 	msr	BASEPRI, r0
      return (eventmask_t)0;
 8005306:	e7fa      	b.n	80052fe <chEvtWaitAllTimeout+0x3e>
 8005308:	20001a18 	.word	0x20001a18
 800530c:	00000000 	.word	0x00000000

08005310 <chEvtWaitAnyTimeout>:
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
 8005310:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8005312:	4b12      	ldr	r3, [pc, #72]	; (800535c <chEvtWaitAnyTimeout+0x4c>)
 8005314:	699e      	ldr	r6, [r3, #24]
 8005316:	2320      	movs	r3, #32
 8005318:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800531c:	6b74      	ldr	r4, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800531e:	4004      	ands	r4, r0
 8005320:	d10e      	bne.n	8005340 <chEvtWaitAnyTimeout+0x30>
 8005322:	4605      	mov	r5, r0
    if (TIME_IMMEDIATE == timeout) {
 8005324:	b921      	cbnz	r1, 8005330 <chEvtWaitAnyTimeout+0x20>
 8005326:	2300      	movs	r3, #0
 8005328:	f383 8811 	msr	BASEPRI, r3
      return (eventmask_t)0;
 800532c:	460c      	mov	r4, r1
 800532e:	e00e      	b.n	800534e <chEvtWaitAnyTimeout+0x3e>
    ctp->u.ewmask = events;
 8005330:	6270      	str	r0, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8005332:	200a      	movs	r0, #10
 8005334:	f005 fe74 	bl	800b020 <chSchGoSleepTimeoutS>
 8005338:	2800      	cmp	r0, #0
 800533a:	db0a      	blt.n	8005352 <chEvtWaitAnyTimeout+0x42>
    m = ctp->epending & events;
 800533c:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800533e:	402c      	ands	r4, r5
  ctp->epending &= ~m;
 8005340:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005342:	ea23 0304 	bic.w	r3, r3, r4
 8005346:	6373      	str	r3, [r6, #52]	; 0x34
 8005348:	2300      	movs	r3, #0
 800534a:	f383 8811 	msr	BASEPRI, r3
}
 800534e:	4620      	mov	r0, r4
 8005350:	bd70      	pop	{r4, r5, r6, pc}
 8005352:	2300      	movs	r3, #0
 8005354:	f383 8811 	msr	BASEPRI, r3
      return (eventmask_t)0;
 8005358:	e7f9      	b.n	800534e <chEvtWaitAnyTimeout+0x3e>
 800535a:	bf00      	nop
 800535c:	20001a18 	.word	0x20001a18

08005360 <chEvtWaitOneTimeout>:
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 8005360:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8005362:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <chEvtWaitOneTimeout+0x50>)
 8005364:	699e      	ldr	r6, [r3, #24]
 8005366:	2320      	movs	r3, #32
 8005368:	f383 8811 	msr	BASEPRI, r3
  m = ctp->epending & events;
 800536c:	6b74      	ldr	r4, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800536e:	4004      	ands	r4, r0
 8005370:	d10e      	bne.n	8005390 <chEvtWaitOneTimeout+0x30>
 8005372:	4605      	mov	r5, r0
    if (TIME_IMMEDIATE == timeout) {
 8005374:	b921      	cbnz	r1, 8005380 <chEvtWaitOneTimeout+0x20>
 8005376:	2300      	movs	r3, #0
 8005378:	f383 8811 	msr	BASEPRI, r3
      return (eventmask_t)0;
 800537c:	460c      	mov	r4, r1
 800537e:	e010      	b.n	80053a2 <chEvtWaitOneTimeout+0x42>
    ctp->u.ewmask = events;
 8005380:	6270      	str	r0, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8005382:	200a      	movs	r0, #10
 8005384:	f005 fe4c 	bl	800b020 <chSchGoSleepTimeoutS>
 8005388:	2800      	cmp	r0, #0
 800538a:	db0c      	blt.n	80053a6 <chEvtWaitOneTimeout+0x46>
    m = ctp->epending & events;
 800538c:	6b74      	ldr	r4, [r6, #52]	; 0x34
 800538e:	402c      	ands	r4, r5
  m ^= m & (m - (eventmask_t)1);
 8005390:	4263      	negs	r3, r4
 8005392:	401c      	ands	r4, r3
  ctp->epending &= ~m;
 8005394:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005396:	ea23 0304 	bic.w	r3, r3, r4
 800539a:	6373      	str	r3, [r6, #52]	; 0x34
 800539c:	2300      	movs	r3, #0
 800539e:	f383 8811 	msr	BASEPRI, r3
}
 80053a2:	4620      	mov	r0, r4
 80053a4:	bd70      	pop	{r4, r5, r6, pc}
 80053a6:	2300      	movs	r3, #0
 80053a8:	f383 8811 	msr	BASEPRI, r3
      return (eventmask_t)0;
 80053ac:	e7f9      	b.n	80053a2 <chEvtWaitOneTimeout+0x42>
 80053ae:	bf00      	nop
 80053b0:	20001a18 	.word	0x20001a18
	...

080053c0 <rt_test_009_006_execute>:
static void rt_test_009_006_execute(void) {
 80053c0:	b508      	push	{r3, lr}
  test_set_step(1);
 80053c2:	4b2b      	ldr	r3, [pc, #172]	; (8005470 <rt_test_009_006_execute+0xb0>)
 80053c4:	2201      	movs	r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 80053c8:	2100      	movs	r1, #0
 80053ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053ce:	f7ff ffc7 	bl	8005360 <chEvtWaitOneTimeout>
    test_assert(m == 0, "spurious event");
 80053d2:	4928      	ldr	r1, [pc, #160]	; (8005474 <rt_test_009_006_execute+0xb4>)
 80053d4:	fab0 f080 	clz	r0, r0
 80053d8:	0940      	lsrs	r0, r0, #5
 80053da:	f7fb ff09 	bl	80011f0 <_test_assert>
 80053de:	b100      	cbz	r0, 80053e2 <rt_test_009_006_execute+0x22>
}
 80053e0:	bd08      	pop	{r3, pc}
    m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 80053e2:	2100      	movs	r1, #0
 80053e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053e8:	f7ff ff92 	bl	8005310 <chEvtWaitAnyTimeout>
    test_assert(m == 0, "spurious event");
 80053ec:	4921      	ldr	r1, [pc, #132]	; (8005474 <rt_test_009_006_execute+0xb4>)
 80053ee:	fab0 f080 	clz	r0, r0
 80053f2:	0940      	lsrs	r0, r0, #5
 80053f4:	f7fb fefc 	bl	80011f0 <_test_assert>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d1f1      	bne.n	80053e0 <rt_test_009_006_execute+0x20>
    m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_IMMEDIATE);
 80053fc:	2100      	movs	r1, #0
 80053fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005402:	f7ff ff5d 	bl	80052c0 <chEvtWaitAllTimeout>
    test_assert(m == 0, "spurious event");
 8005406:	491b      	ldr	r1, [pc, #108]	; (8005474 <rt_test_009_006_execute+0xb4>)
 8005408:	fab0 f080 	clz	r0, r0
 800540c:	0940      	lsrs	r0, r0, #5
 800540e:	f7fb feef 	bl	80011f0 <_test_assert>
 8005412:	2800      	cmp	r0, #0
 8005414:	d1e4      	bne.n	80053e0 <rt_test_009_006_execute+0x20>
  test_set_step(2);
 8005416:	4b16      	ldr	r3, [pc, #88]	; (8005470 <rt_test_009_006_execute+0xb0>)
 8005418:	2202      	movs	r2, #2
 800541a:	601a      	str	r2, [r3, #0]
    m = chEvtWaitOneTimeout(ALL_EVENTS, TIME_MS2I(50));
 800541c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005424:	f7ff ff9c 	bl	8005360 <chEvtWaitOneTimeout>
    test_assert(m == 0, "spurious event");
 8005428:	4912      	ldr	r1, [pc, #72]	; (8005474 <rt_test_009_006_execute+0xb4>)
 800542a:	fab0 f080 	clz	r0, r0
 800542e:	0940      	lsrs	r0, r0, #5
 8005430:	f7fb fede 	bl	80011f0 <_test_assert>
 8005434:	2800      	cmp	r0, #0
 8005436:	d1d3      	bne.n	80053e0 <rt_test_009_006_execute+0x20>
    m = chEvtWaitAnyTimeout(ALL_EVENTS, TIME_MS2I(50));
 8005438:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800543c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005440:	f7ff ff66 	bl	8005310 <chEvtWaitAnyTimeout>
    test_assert(m == 0, "spurious event");
 8005444:	490b      	ldr	r1, [pc, #44]	; (8005474 <rt_test_009_006_execute+0xb4>)
 8005446:	fab0 f080 	clz	r0, r0
 800544a:	0940      	lsrs	r0, r0, #5
 800544c:	f7fb fed0 	bl	80011f0 <_test_assert>
 8005450:	2800      	cmp	r0, #0
 8005452:	d1c5      	bne.n	80053e0 <rt_test_009_006_execute+0x20>
    m = chEvtWaitAllTimeout(ALL_EVENTS, TIME_MS2I(50));
 8005454:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800545c:	f7ff ff30 	bl	80052c0 <chEvtWaitAllTimeout>
    test_assert(m == 0, "spurious event");
 8005460:	4904      	ldr	r1, [pc, #16]	; (8005474 <rt_test_009_006_execute+0xb4>)
 8005462:	fab0 f080 	clz	r0, r0
 8005466:	0940      	lsrs	r0, r0, #5
 8005468:	f7fb fec2 	bl	80011f0 <_test_assert>
  test_end_step(2);
 800546c:	e7b8      	b.n	80053e0 <rt_test_009_006_execute+0x20>
 800546e:	bf00      	nop
 8005470:	20002454 	.word	0x20002454
 8005474:	0800cba0 	.word	0x0800cba0
	...

08005480 <chCondWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chCondWaitTimeoutS(condition_variable_t *cp, sysinterval_t timeout) {
 8005480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005484:	4604      	mov	r4, r0
 8005486:	4688      	mov	r8, r1
  return ch.rlist.current;
 8005488:	4d11      	ldr	r5, [pc, #68]	; (80054d0 <chCondWaitTimeoutS+0x50>)
 800548a:	69ab      	ldr	r3, [r5, #24]
 800548c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(mp != NULL, "not owning a mutex");

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 800548e:	4638      	mov	r0, r7
 8005490:	f7fd fe1e 	bl	80030d0 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 8005494:	69ad      	ldr	r5, [r5, #24]
 8005496:	626c      	str	r4, [r5, #36]	; 0x24
  queue_prio_insert(currp, &cp->queue);
 8005498:	4626      	mov	r6, r4
    cp = cp->queue.next;
 800549a:	6824      	ldr	r4, [r4, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800549c:	42a6      	cmp	r6, r4
 800549e:	d003      	beq.n	80054a8 <chCondWaitTimeoutS+0x28>
 80054a0:	68a2      	ldr	r2, [r4, #8]
 80054a2:	68ab      	ldr	r3, [r5, #8]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d2f8      	bcs.n	800549a <chCondWaitTimeoutS+0x1a>
  tp->queue.next             = cp;
 80054a8:	602c      	str	r4, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 80054aa:	6863      	ldr	r3, [r4, #4]
 80054ac:	606b      	str	r3, [r5, #4]
  tp->queue.prev->queue.next = tp;
 80054ae:	601d      	str	r5, [r3, #0]
  cp->queue.prev             = tp;
 80054b0:	6065      	str	r5, [r4, #4]
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
 80054b2:	4641      	mov	r1, r8
 80054b4:	2007      	movs	r0, #7
 80054b6:	f005 fdb3 	bl	800b020 <chSchGoSleepTimeoutS>
 80054ba:	4604      	mov	r4, r0
  if (msg != MSG_TIMEOUT) {
 80054bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80054c0:	d102      	bne.n	80054c8 <chCondWaitTimeoutS+0x48>
    chMtxLockS(mp);
  }

  return msg;
}
 80054c2:	4620      	mov	r0, r4
 80054c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    chMtxLockS(mp);
 80054c8:	4638      	mov	r0, r7
 80054ca:	f7fd fee9 	bl	80032a0 <chMtxLockS>
  return msg;
 80054ce:	e7f8      	b.n	80054c2 <chCondWaitTimeoutS+0x42>
 80054d0:	20001a18 	.word	0x20001a18
	...

080054e0 <chCondWaitTimeout>:
msg_t chCondWaitTimeout(condition_variable_t *cp, sysinterval_t timeout) {
 80054e0:	b508      	push	{r3, lr}
 80054e2:	2320      	movs	r3, #32
 80054e4:	f383 8811 	msr	BASEPRI, r3
  msg = chCondWaitTimeoutS(cp, timeout);
 80054e8:	f7ff ffca 	bl	8005480 <chCondWaitTimeoutS>
 80054ec:	2300      	movs	r3, #0
 80054ee:	f383 8811 	msr	BASEPRI, r3
}
 80054f2:	bd08      	pop	{r3, pc}
	...

08005500 <thread8>:
static THD_FUNCTION(thread8, p) {
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4604      	mov	r4, r0
  chMtxLock(&m2);
 8005504:	4d0b      	ldr	r5, [pc, #44]	; (8005534 <thread8+0x34>)
 8005506:	4628      	mov	r0, r5
 8005508:	f7fd ff62 	bl	80033d0 <chMtxLock>
  chMtxLock(&m1);
 800550c:	4e0a      	ldr	r6, [pc, #40]	; (8005538 <thread8+0x38>)
 800550e:	4630      	mov	r0, r6
 8005510:	f7fd ff5e 	bl	80033d0 <chMtxLock>
  chCondWaitTimeout(&c1, TIME_INFINITE);
 8005514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005518:	4808      	ldr	r0, [pc, #32]	; (800553c <thread8+0x3c>)
 800551a:	f7ff ffe1 	bl	80054e0 <chCondWaitTimeout>
  test_emit_token(*(char *)p);
 800551e:	7820      	ldrb	r0, [r4, #0]
 8005520:	f7fb f976 	bl	8000810 <test_emit_token>
  chMtxUnlock(&m1);
 8005524:	4630      	mov	r0, r6
 8005526:	f7fd fdfb 	bl	8003120 <chMtxUnlock>
  chMtxUnlock(&m2);
 800552a:	4628      	mov	r0, r5
 800552c:	f7fd fdf8 	bl	8003120 <chMtxUnlock>
}
 8005530:	bd70      	pop	{r4, r5, r6, pc}
 8005532:	bf00      	nop
 8005534:	2000083c 	.word	0x2000083c
 8005538:	2000082c 	.word	0x2000082c
 800553c:	20000800 	.word	0x20000800

08005540 <chSemWaitTimeoutS>:
msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout) {
 8005540:	b508      	push	{r3, lr}
  if (--sp->cnt < (cnt_t)0) {
 8005542:	6882      	ldr	r2, [r0, #8]
 8005544:	1e53      	subs	r3, r2, #1
 8005546:	6083      	str	r3, [r0, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	db01      	blt.n	8005550 <chSemWaitTimeoutS+0x10>
  return MSG_OK;
 800554c:	2000      	movs	r0, #0
}
 800554e:	bd08      	pop	{r3, pc}
    if (TIME_IMMEDIATE == timeout) {
 8005550:	b159      	cbz	r1, 800556a <chSemWaitTimeoutS+0x2a>
    currp->u.wtsemp = sp;
 8005552:	4b08      	ldr	r3, [pc, #32]	; (8005574 <chSemWaitTimeoutS+0x34>)
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	6258      	str	r0, [r3, #36]	; 0x24
  tp->queue.next             = (thread_t *)tqp;
 8005558:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = tqp->prev;
 800555a:	6842      	ldr	r2, [r0, #4]
 800555c:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 800555e:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8005560:	6043      	str	r3, [r0, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8005562:	2005      	movs	r0, #5
 8005564:	f005 fd5c 	bl	800b020 <chSchGoSleepTimeoutS>
 8005568:	e7f1      	b.n	800554e <chSemWaitTimeoutS+0xe>
      sp->cnt++;
 800556a:	6082      	str	r2, [r0, #8]
      return MSG_TIMEOUT;
 800556c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005570:	e7ed      	b.n	800554e <chSemWaitTimeoutS+0xe>
 8005572:	bf00      	nop
 8005574:	20001a18 	.word	0x20001a18
	...

08005580 <chGuardedPoolAllocTimeoutS>:
                                 sysinterval_t timeout) {
 8005580:	b510      	push	{r4, lr}
 8005582:	4604      	mov	r4, r0
  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 8005584:	f7ff ffdc 	bl	8005540 <chSemWaitTimeoutS>
  if (msg != MSG_OK) {
 8005588:	b920      	cbnz	r0, 8005594 <chGuardedPoolAllocTimeoutS+0x14>
  return chPoolAllocI(&gmp->pool);
 800558a:	f104 000c 	add.w	r0, r4, #12
 800558e:	f7fc f907 	bl	80017a0 <chPoolAllocI>
}
 8005592:	bd10      	pop	{r4, pc}
    return NULL;
 8005594:	2000      	movs	r0, #0
 8005596:	e7fc      	b.n	8005592 <chGuardedPoolAllocTimeoutS+0x12>
	...

080055a0 <chGuardedPoolAllocTimeout>:
                                sysinterval_t timeout) {
 80055a0:	b508      	push	{r3, lr}
 80055a2:	2320      	movs	r3, #32
 80055a4:	f383 8811 	msr	BASEPRI, r3
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
 80055a8:	f7ff ffea 	bl	8005580 <chGuardedPoolAllocTimeoutS>
 80055ac:	2300      	movs	r3, #0
 80055ae:	f383 8811 	msr	BASEPRI, r3
}
 80055b2:	bd08      	pop	{r3, pc}
	...

080055c0 <oslib_test_007_003_execute>:

static void oslib_test_007_003_execute(void) {
 80055c0:	b508      	push	{r3, lr}

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 80055c2:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <oslib_test_007_003_execute+0x20>)
 80055c4:	2201      	movs	r2, #1
 80055c6:	601a      	str	r2, [r3, #0]
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 80055c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80055cc:	4805      	ldr	r0, [pc, #20]	; (80055e4 <oslib_test_007_003_execute+0x24>)
 80055ce:	f7ff ffe7 	bl	80055a0 <chGuardedPoolAllocTimeout>
 80055d2:	4905      	ldr	r1, [pc, #20]	; (80055e8 <oslib_test_007_003_execute+0x28>)
 80055d4:	fab0 f080 	clz	r0, r0
 80055d8:	0940      	lsrs	r0, r0, #5
 80055da:	f7fb fe09 	bl	80011f0 <_test_assert>
  }
  test_end_step(1);
}
 80055de:	bd08      	pop	{r3, pc}
 80055e0:	20002454 	.word	0x20002454
 80055e4:	20000810 	.word	0x20000810
 80055e8:	0800c1e8 	.word	0x0800c1e8
 80055ec:	00000000 	.word	0x00000000

080055f0 <oslib_test_007_002_execute>:
static void oslib_test_007_002_execute(void) {
 80055f0:	b510      	push	{r4, lr}
  test_set_step(1);
 80055f2:	4c2c      	ldr	r4, [pc, #176]	; (80056a4 <oslib_test_007_002_execute+0xb4>)
 80055f4:	2301      	movs	r3, #1
 80055f6:	6023      	str	r3, [r4, #0]
    chGuardedPoolLoadArray(&gmp1, objects, MEMORY_POOL_SIZE);
 80055f8:	2204      	movs	r2, #4
 80055fa:	492b      	ldr	r1, [pc, #172]	; (80056a8 <oslib_test_007_002_execute+0xb8>)
 80055fc:	482b      	ldr	r0, [pc, #172]	; (80056ac <oslib_test_007_002_execute+0xbc>)
 80055fe:	f7ff fca7 	bl	8004f50 <chGuardedPoolLoadArray>
  test_set_step(2);
 8005602:	2302      	movs	r3, #2
 8005604:	6023      	str	r3, [r4, #0]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005606:	2400      	movs	r4, #0
 8005608:	2c03      	cmp	r4, #3
 800560a:	d80d      	bhi.n	8005628 <oslib_test_007_002_execute+0x38>
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800560c:	2100      	movs	r1, #0
 800560e:	4827      	ldr	r0, [pc, #156]	; (80056ac <oslib_test_007_002_execute+0xbc>)
 8005610:	f7ff ffc6 	bl	80055a0 <chGuardedPoolAllocTimeout>
 8005614:	4926      	ldr	r1, [pc, #152]	; (80056b0 <oslib_test_007_002_execute+0xc0>)
 8005616:	3800      	subs	r0, #0
 8005618:	bf18      	it	ne
 800561a:	2001      	movne	r0, #1
 800561c:	f7fb fde8 	bl	80011f0 <_test_assert>
 8005620:	2800      	cmp	r0, #0
 8005622:	d13d      	bne.n	80056a0 <oslib_test_007_002_execute+0xb0>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005624:	3401      	adds	r4, #1
 8005626:	e7ef      	b.n	8005608 <oslib_test_007_002_execute+0x18>
  test_set_step(3);
 8005628:	4b1e      	ldr	r3, [pc, #120]	; (80056a4 <oslib_test_007_002_execute+0xb4>)
 800562a:	2203      	movs	r2, #3
 800562c:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800562e:	2100      	movs	r1, #0
 8005630:	481e      	ldr	r0, [pc, #120]	; (80056ac <oslib_test_007_002_execute+0xbc>)
 8005632:	f7ff ffb5 	bl	80055a0 <chGuardedPoolAllocTimeout>
 8005636:	491f      	ldr	r1, [pc, #124]	; (80056b4 <oslib_test_007_002_execute+0xc4>)
 8005638:	fab0 f080 	clz	r0, r0
 800563c:	0940      	lsrs	r0, r0, #5
 800563e:	f7fb fdd7 	bl	80011f0 <_test_assert>
 8005642:	bb68      	cbnz	r0, 80056a0 <oslib_test_007_002_execute+0xb0>
  test_set_step(4);
 8005644:	4b17      	ldr	r3, [pc, #92]	; (80056a4 <oslib_test_007_002_execute+0xb4>)
 8005646:	2204      	movs	r2, #4
 8005648:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800564a:	2400      	movs	r4, #0
 800564c:	e006      	b.n	800565c <oslib_test_007_002_execute+0x6c>
      chGuardedPoolFree(&gmp1, &objects[i]);
 800564e:	4916      	ldr	r1, [pc, #88]	; (80056a8 <oslib_test_007_002_execute+0xb8>)
 8005650:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005654:	4815      	ldr	r0, [pc, #84]	; (80056ac <oslib_test_007_002_execute+0xbc>)
 8005656:	f7ff fc63 	bl	8004f20 <chGuardedPoolFree>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800565a:	3401      	adds	r4, #1
 800565c:	2c03      	cmp	r4, #3
 800565e:	d9f6      	bls.n	800564e <oslib_test_007_002_execute+0x5e>
  test_set_step(5);
 8005660:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <oslib_test_007_002_execute+0xb4>)
 8005662:	2205      	movs	r2, #5
 8005664:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005666:	2400      	movs	r4, #0
 8005668:	2c03      	cmp	r4, #3
 800566a:	d80c      	bhi.n	8005686 <oslib_test_007_002_execute+0x96>
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800566c:	2100      	movs	r1, #0
 800566e:	480f      	ldr	r0, [pc, #60]	; (80056ac <oslib_test_007_002_execute+0xbc>)
 8005670:	f7ff ff96 	bl	80055a0 <chGuardedPoolAllocTimeout>
 8005674:	490e      	ldr	r1, [pc, #56]	; (80056b0 <oslib_test_007_002_execute+0xc0>)
 8005676:	3800      	subs	r0, #0
 8005678:	bf18      	it	ne
 800567a:	2001      	movne	r0, #1
 800567c:	f7fb fdb8 	bl	80011f0 <_test_assert>
 8005680:	b970      	cbnz	r0, 80056a0 <oslib_test_007_002_execute+0xb0>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 8005682:	3401      	adds	r4, #1
 8005684:	e7f0      	b.n	8005668 <oslib_test_007_002_execute+0x78>
  test_set_step(6);
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <oslib_test_007_002_execute+0xb4>)
 8005688:	2206      	movs	r2, #6
 800568a:	601a      	str	r2, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800568c:	2100      	movs	r1, #0
 800568e:	4807      	ldr	r0, [pc, #28]	; (80056ac <oslib_test_007_002_execute+0xbc>)
 8005690:	f7ff ff86 	bl	80055a0 <chGuardedPoolAllocTimeout>
 8005694:	4907      	ldr	r1, [pc, #28]	; (80056b4 <oslib_test_007_002_execute+0xc4>)
 8005696:	fab0 f080 	clz	r0, r0
 800569a:	0940      	lsrs	r0, r0, #5
 800569c:	f7fb fda8 	bl	80011f0 <_test_assert>
}
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	20002454 	.word	0x20002454
 80056a8:	20001d10 	.word	0x20001d10
 80056ac:	20000810 	.word	0x20000810
 80056b0:	0800c1dc 	.word	0x0800c1dc
 80056b4:	0800c1e8 	.word	0x0800c1e8
	...

080056c0 <chSemWaitTimeout>:
msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout) {
 80056c0:	b508      	push	{r3, lr}
 80056c2:	2320      	movs	r3, #32
 80056c4:	f383 8811 	msr	BASEPRI, r3
  msg = chSemWaitTimeoutS(sp, timeout);
 80056c8:	f7ff ff3a 	bl	8005540 <chSemWaitTimeoutS>
 80056cc:	2300      	movs	r3, #0
 80056ce:	f383 8811 	msr	BASEPRI, r3
}
 80056d2:	bd08      	pop	{r3, pc}
	...

080056e0 <chThdSuspendTimeoutS>:
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 80056e0:	b508      	push	{r3, lr}
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <chThdSuspendTimeoutS+0x1c>)
 80056e4:	699b      	ldr	r3, [r3, #24]
  if (TIME_IMMEDIATE == timeout) {
 80056e6:	b129      	cbz	r1, 80056f4 <chThdSuspendTimeoutS+0x14>
  *trp = tp;
 80056e8:	6003      	str	r3, [r0, #0]
  tp->u.wttrp = trp;
 80056ea:	6258      	str	r0, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80056ec:	2003      	movs	r0, #3
 80056ee:	f005 fc97 	bl	800b020 <chSchGoSleepTimeoutS>
}
 80056f2:	bd08      	pop	{r3, pc}
    return MSG_TIMEOUT;
 80056f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056f8:	e7fb      	b.n	80056f2 <chThdSuspendTimeoutS+0x12>
 80056fa:	bf00      	nop
 80056fc:	20001a18 	.word	0x20001a18

08005700 <chPipeReadTimeout>:
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
                         size_t n, sysinterval_t timeout) {
 8005700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005704:	4698      	mov	r8, r3
  size_t max = n;

  chDbgCheck(n > 0U);

  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
 8005706:	7d03      	ldrb	r3, [r0, #20]
 8005708:	b113      	cbz	r3, 8005710 <chPipeReadTimeout+0x10>
    return (size_t)0;
 800570a:	2000      	movs	r0, #0
  }

  PR_UNLOCK(pp);

  return max - n;
}
 800570c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005710:	4605      	mov	r5, r0
 8005712:	460e      	mov	r6, r1
 8005714:	4617      	mov	r7, r2
  PR_LOCK(pp);
 8005716:	f100 0940 	add.w	r9, r0, #64	; 0x40
 800571a:	4648      	mov	r0, r9
 800571c:	f7fd fe58 	bl	80033d0 <chMtxLock>
 8005720:	463c      	mov	r4, r7
 8005722:	e006      	b.n	8005732 <chPipeReadTimeout+0x32>
      n  -= done;
 8005724:	1a24      	subs	r4, r4, r0
      bp += done;
 8005726:	4406      	add	r6, r0
      chThdResume(&pp->wtr, MSG_OK);
 8005728:	2100      	movs	r1, #0
 800572a:	f105 0018 	add.w	r0, r5, #24
 800572e:	f7fc fd77 	bl	8002220 <chThdResume>
  while (n > 0U) {
 8005732:	b19c      	cbz	r4, 800575c <chPipeReadTimeout+0x5c>
    done = pipe_read(pp, bp, n);
 8005734:	4622      	mov	r2, r4
 8005736:	4631      	mov	r1, r6
 8005738:	4628      	mov	r0, r5
 800573a:	f7fe f909 	bl	8003950 <pipe_read>
    if (done == (size_t)0) {
 800573e:	2800      	cmp	r0, #0
 8005740:	d1f0      	bne.n	8005724 <chPipeReadTimeout+0x24>
 8005742:	2320      	movs	r3, #32
 8005744:	f383 8811 	msr	BASEPRI, r3
      msg = chThdSuspendTimeoutS(&pp->rtr, timeout);
 8005748:	4641      	mov	r1, r8
 800574a:	f105 001c 	add.w	r0, r5, #28
 800574e:	f7ff ffc7 	bl	80056e0 <chThdSuspendTimeoutS>
 8005752:	2300      	movs	r3, #0
 8005754:	f383 8811 	msr	BASEPRI, r3
      if (msg != MSG_OK) {
 8005758:	2800      	cmp	r0, #0
 800575a:	d0ea      	beq.n	8005732 <chPipeReadTimeout+0x32>
  PR_UNLOCK(pp);
 800575c:	4648      	mov	r0, r9
 800575e:	f7fd fcdf 	bl	8003120 <chMtxUnlock>
  return max - n;
 8005762:	1b38      	subs	r0, r7, r4
 8005764:	e7d2      	b.n	800570c <chPipeReadTimeout+0xc>
 8005766:	bf00      	nop
	...

08005770 <chPipeWriteTimeout>:
                          size_t n, sysinterval_t timeout) {
 8005770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005774:	4698      	mov	r8, r3
  if (pp->reset) {
 8005776:	7d03      	ldrb	r3, [r0, #20]
 8005778:	b113      	cbz	r3, 8005780 <chPipeWriteTimeout+0x10>
    return (size_t)0;
 800577a:	2000      	movs	r0, #0
}
 800577c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005780:	4605      	mov	r5, r0
 8005782:	460e      	mov	r6, r1
 8005784:	4617      	mov	r7, r2
  PW_LOCK(pp);
 8005786:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800578a:	4648      	mov	r0, r9
 800578c:	f7fd fe20 	bl	80033d0 <chMtxLock>
 8005790:	463c      	mov	r4, r7
 8005792:	e006      	b.n	80057a2 <chPipeWriteTimeout+0x32>
      n  -= done;
 8005794:	1a24      	subs	r4, r4, r0
      bp += done;
 8005796:	4406      	add	r6, r0
      chThdResume(&pp->rtr, MSG_OK);
 8005798:	2100      	movs	r1, #0
 800579a:	f105 001c 	add.w	r0, r5, #28
 800579e:	f7fc fd3f 	bl	8002220 <chThdResume>
  while (n > 0U) {
 80057a2:	b19c      	cbz	r4, 80057cc <chPipeWriteTimeout+0x5c>
    done = pipe_write(pp, bp, n);
 80057a4:	4622      	mov	r2, r4
 80057a6:	4631      	mov	r1, r6
 80057a8:	4628      	mov	r0, r5
 80057aa:	f7fe f911 	bl	80039d0 <pipe_write>
    if (done == (size_t)0) {
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d1f0      	bne.n	8005794 <chPipeWriteTimeout+0x24>
 80057b2:	2320      	movs	r3, #32
 80057b4:	f383 8811 	msr	BASEPRI, r3
      msg = chThdSuspendTimeoutS(&pp->wtr, timeout);
 80057b8:	4641      	mov	r1, r8
 80057ba:	f105 0018 	add.w	r0, r5, #24
 80057be:	f7ff ff8f 	bl	80056e0 <chThdSuspendTimeoutS>
 80057c2:	2300      	movs	r3, #0
 80057c4:	f383 8811 	msr	BASEPRI, r3
      if (msg != MSG_OK) {
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d0ea      	beq.n	80057a2 <chPipeWriteTimeout+0x32>
  PW_UNLOCK(pp);
 80057cc:	4648      	mov	r0, r9
 80057ce:	f7fd fca7 	bl	8003120 <chMtxUnlock>
  return max - n;
 80057d2:	1b38      	subs	r0, r7, r4
 80057d4:	e7d2      	b.n	800577c <chPipeWriteTimeout+0xc>
 80057d6:	bf00      	nop
	...

080057e0 <oslib_test_003_002_execute>:

static void oslib_test_003_002_setup(void) {
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}

static void oslib_test_003_002_execute(void) {
 80057e0:	b500      	push	{lr}
 80057e2:	b085      	sub	sp, #20

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 80057e4:	4b28      	ldr	r3, [pc, #160]	; (8005888 <oslib_test_003_002_execute+0xa8>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
  {
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 80057ea:	2300      	movs	r3, #0
 80057ec:	2210      	movs	r2, #16
 80057ee:	4669      	mov	r1, sp
 80057f0:	4826      	ldr	r0, [pc, #152]	; (800588c <oslib_test_003_002_execute+0xac>)
 80057f2:	f7ff ff85 	bl	8005700 <chPipeReadTimeout>
    test_assert(n == 0, "wrong size");
 80057f6:	4926      	ldr	r1, [pc, #152]	; (8005890 <oslib_test_003_002_execute+0xb0>)
 80057f8:	fab0 f080 	clz	r0, r0
 80057fc:	0940      	lsrs	r0, r0, #5
 80057fe:	f7fb fcf7 	bl	80011f0 <_test_assert>
 8005802:	b948      	cbnz	r0, 8005818 <oslib_test_003_002_execute+0x38>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8005804:	4b21      	ldr	r3, [pc, #132]	; (800588c <oslib_test_003_002_execute+0xac>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <oslib_test_003_002_execute+0x3e>
 800580e:	2000      	movs	r0, #0
 8005810:	4920      	ldr	r1, [pc, #128]	; (8005894 <oslib_test_003_002_execute+0xb4>)
 8005812:	f7fb fced 	bl	80011f0 <_test_assert>
 8005816:	b170      	cbz	r0, 8005836 <oslib_test_003_002_execute+0x56>
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 8005818:	b005      	add	sp, #20
 800581a:	f85d fb04 	ldr.w	pc, [sp], #4
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800581e:	4b1b      	ldr	r3, [pc, #108]	; (800588c <oslib_test_003_002_execute+0xac>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	429a      	cmp	r2, r3
 8005824:	d001      	beq.n	800582a <oslib_test_003_002_execute+0x4a>
 8005826:	2000      	movs	r0, #0
 8005828:	e7f2      	b.n	8005810 <oslib_test_003_002_execute+0x30>
 800582a:	4b18      	ldr	r3, [pc, #96]	; (800588c <oslib_test_003_002_execute+0xac>)
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1ee      	bne.n	8005810 <oslib_test_003_002_execute+0x30>
 8005832:	2001      	movs	r0, #1
 8005834:	e7ec      	b.n	8005810 <oslib_test_003_002_execute+0x30>
  test_set_step(2);
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <oslib_test_003_002_execute+0xa8>)
 8005838:	2202      	movs	r2, #2
 800583a:	601a      	str	r2, [r3, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 800583c:	2300      	movs	r3, #0
 800583e:	2210      	movs	r2, #16
 8005840:	4915      	ldr	r1, [pc, #84]	; (8005898 <oslib_test_003_002_execute+0xb8>)
 8005842:	4812      	ldr	r0, [pc, #72]	; (800588c <oslib_test_003_002_execute+0xac>)
 8005844:	f7ff ff94 	bl	8005770 <chPipeWriteTimeout>
    test_assert(n == PIPE_SIZE / 2, "wrong size");
 8005848:	4911      	ldr	r1, [pc, #68]	; (8005890 <oslib_test_003_002_execute+0xb0>)
 800584a:	2808      	cmp	r0, #8
 800584c:	bf14      	ite	ne
 800584e:	2000      	movne	r0, #0
 8005850:	2001      	moveq	r0, #1
 8005852:	f7fb fccd 	bl	80011f0 <_test_assert>
 8005856:	2800      	cmp	r0, #0
 8005858:	d1de      	bne.n	8005818 <oslib_test_003_002_execute+0x38>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800585a:	4b0c      	ldr	r3, [pc, #48]	; (800588c <oslib_test_003_002_execute+0xac>)
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <oslib_test_003_002_execute+0x8e>
 8005864:	2000      	movs	r0, #0
 8005866:	490b      	ldr	r1, [pc, #44]	; (8005894 <oslib_test_003_002_execute+0xb4>)
 8005868:	f7fb fcc2 	bl	80011f0 <_test_assert>
  test_end_step(2);
 800586c:	e7d4      	b.n	8005818 <oslib_test_003_002_execute+0x38>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <oslib_test_003_002_execute+0xac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d001      	beq.n	800587a <oslib_test_003_002_execute+0x9a>
 8005876:	2000      	movs	r0, #0
 8005878:	e7f5      	b.n	8005866 <oslib_test_003_002_execute+0x86>
 800587a:	4b04      	ldr	r3, [pc, #16]	; (800588c <oslib_test_003_002_execute+0xac>)
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b08      	cmp	r3, #8
 8005880:	d1f1      	bne.n	8005866 <oslib_test_003_002_execute+0x86>
 8005882:	2001      	movs	r0, #1
 8005884:	e7ef      	b.n	8005866 <oslib_test_003_002_execute+0x86>
 8005886:	bf00      	nop
 8005888:	20002454 	.word	0x20002454
 800588c:	2000088c 	.word	0x2000088c
 8005890:	0800cbb0 	.word	0x0800cbb0
 8005894:	0800cbbc 	.word	0x0800cbbc
 8005898:	0800dd44 	.word	0x0800dd44
 800589c:	00000000 	.word	0x00000000

080058a0 <chThdSleepUntil>:
void chThdSleepUntil(systime_t time) {
 80058a0:	b510      	push	{r4, lr}
 80058a2:	4604      	mov	r4, r0
 80058a4:	2320      	movs	r3, #32
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f005 fb21 	bl	800aef0 <stGetCounter>
  if (interval > (sysinterval_t)0) {
 80058ae:	1a21      	subs	r1, r4, r0
 80058b0:	d103      	bne.n	80058ba <chThdSleepUntil+0x1a>
 80058b2:	2300      	movs	r3, #0
 80058b4:	f383 8811 	msr	BASEPRI, r3
}
 80058b8:	bd10      	pop	{r4, pc}
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80058ba:	2008      	movs	r0, #8
 80058bc:	f005 fbb0 	bl	800b020 <chSchGoSleepTimeoutS>
 80058c0:	e7f7      	b.n	80058b2 <chThdSleepUntil+0x12>
 80058c2:	bf00      	nop
	...

080058d0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 80058d0:	b508      	push	{r3, lr}
 80058d2:	4601      	mov	r1, r0
 80058d4:	2320      	movs	r3, #32
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	2008      	movs	r0, #8
 80058dc:	f005 fba0 	bl	800b020 <chSchGoSleepTimeoutS>
 80058e0:	2300      	movs	r3, #0
 80058e2:	f383 8811 	msr	BASEPRI, r3
}
 80058e6:	bd08      	pop	{r3, pc}
	...

080058f0 <main_loop>:
{
 80058f0:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(500);
 80058f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80058f6:	f7ff ffeb 	bl	80058d0 <chThdSleep>
  lmx2572_reset(&SPID1);
 80058fa:	4d0d      	ldr	r5, [pc, #52]	; (8005930 <main_loop+0x40>)
 80058fc:	4628      	mov	r0, r5
 80058fe:	f7fd f987 	bl	8002c10 <lmx2572_reset>
  chprintf(DEBUG_CHP, "\r\n Resets LMX2572\r\n");
 8005902:	4c0c      	ldr	r4, [pc, #48]	; (8005934 <main_loop+0x44>)
 8005904:	490c      	ldr	r1, [pc, #48]	; (8005938 <main_loop+0x48>)
 8005906:	4620      	mov	r0, r4
 8005908:	f7fc ff8a 	bl	8002820 <chprintf>
  chThdSleepMilliseconds(500);
 800590c:	f241 3088 	movw	r0, #5000	; 0x1388
 8005910:	f7ff ffde 	bl	80058d0 <chThdSleep>
  lmx2572_load_regs(&SPID1, reg_values_430);
 8005914:	4909      	ldr	r1, [pc, #36]	; (800593c <main_loop+0x4c>)
 8005916:	4628      	mov	r0, r5
 8005918:	f7fd fa0a 	bl	8002d30 <lmx2572_load_regs>
  chprintf(DEBUG_CHP, "\r\n Done Loading LMX2572 430MHz reg values\r\n");
 800591c:	4908      	ldr	r1, [pc, #32]	; (8005940 <main_loop+0x50>)
 800591e:	4620      	mov	r0, r4
 8005920:	f7fc ff7e 	bl	8002820 <chprintf>
    palWaitLineTimeout(LINE_SX_INT0, TIME_MS2I(5000));
 8005924:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005928:	4806      	ldr	r0, [pc, #24]	; (8005944 <main_loop+0x54>)
 800592a:	f005 fad1 	bl	800aed0 <palWaitLineTimeout>
  while(true)
 800592e:	e7f9      	b.n	8005924 <main_loop+0x34>
 8005930:	20001964 	.word	0x20001964
 8005934:	200018e8 	.word	0x200018e8
 8005938:	0800cbd0 	.word	0x0800cbd0
 800593c:	200010bc 	.word	0x200010bc
 8005940:	0800c644 	.word	0x0800c644
 8005944:	40020800 	.word	0x40020800
	...

08005950 <job_slow>:

static jobs_queue_t jq;
static job_descriptor_t jobs[JOBS_QUEUE_SIZE];
static msg_t msg_queue[JOBS_QUEUE_SIZE];

static void job_slow(void *arg) {
 8005950:	b508      	push	{r3, lr}

  test_emit_token((int)arg);
 8005952:	b2c0      	uxtb	r0, r0
 8005954:	f7fa ff5c 	bl	8000810 <test_emit_token>
  chThdSleepMilliseconds(10);
 8005958:	2064      	movs	r0, #100	; 0x64
 800595a:	f7ff ffb9 	bl	80058d0 <chThdSleep>
}
 800595e:	bd08      	pop	{r3, pc}

08005960 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8005960:	b510      	push	{r4, lr}
 8005962:	4604      	mov	r4, r0
  chThdSleepMilliseconds(50);
 8005964:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005968:	f7ff ffb2 	bl	80058d0 <chThdSleep>
  chEvtSignal((thread_t *)p, 1);
 800596c:	2101      	movs	r1, #1
 800596e:	4620      	mov	r0, r4
 8005970:	f7fd fb46 	bl	8003000 <chEvtSignal>
}
 8005974:	bd10      	pop	{r4, pc}
 8005976:	bf00      	nop
	...

08005980 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8005980:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(50);
 8005982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005986:	f7ff ffa3 	bl	80058d0 <chThdSleep>
  chMtxLock(&m1);
 800598a:	4c04      	ldr	r4, [pc, #16]	; (800599c <thread4A+0x1c>)
 800598c:	4620      	mov	r0, r4
 800598e:	f7fd fd1f 	bl	80033d0 <chMtxLock>
  chMtxUnlock(&m1);
 8005992:	4620      	mov	r0, r4
 8005994:	f7fd fbc4 	bl	8003120 <chMtxUnlock>
}
 8005998:	bd10      	pop	{r4, pc}
 800599a:	bf00      	nop
 800599c:	2000082c 	.word	0x2000082c

080059a0 <thread4B>:
static THD_FUNCTION(thread4B, p) {
 80059a0:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 80059a2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80059a6:	f7ff ff93 	bl	80058d0 <chThdSleep>
 80059aa:	2320      	movs	r3, #32
 80059ac:	f383 8811 	msr	BASEPRI, r3
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 80059b0:	4c06      	ldr	r4, [pc, #24]	; (80059cc <thread4B+0x2c>)
 80059b2:	4620      	mov	r0, r4
 80059b4:	f7fd fc74 	bl	80032a0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 80059b8:	4620      	mov	r0, r4
 80059ba:	f7fd fb89 	bl	80030d0 <chMtxUnlockS>
  chSchRescheduleS();
 80059be:	f004 fde7 	bl	800a590 <chSchRescheduleS>
 80059c2:	2300      	movs	r3, #0
 80059c4:	f383 8811 	msr	BASEPRI, r3
}
 80059c8:	bd10      	pop	{r4, pc}
 80059ca:	bf00      	nop
 80059cc:	2000083c 	.word	0x2000083c

080059d0 <thread2>:
static THD_FUNCTION(thread2, p) {
 80059d0:	b508      	push	{r3, lr}
  chThdSleepMilliseconds(50);
 80059d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059d6:	f7ff ff7b 	bl	80058d0 <chThdSleep>
 80059da:	2320      	movs	r3, #32
 80059dc:	f383 8811 	msr	BASEPRI, r3
  chSemSignalI(&sem1); /* For coverage reasons */
 80059e0:	4804      	ldr	r0, [pc, #16]	; (80059f4 <thread2+0x24>)
 80059e2:	f7ff f8a5 	bl	8004b30 <chSemSignalI>
  chSchRescheduleS();
 80059e6:	f004 fdd3 	bl	800a590 <chSchRescheduleS>
 80059ea:	2300      	movs	r3, #0
 80059ec:	f383 8811 	msr	BASEPRI, r3
}
 80059f0:	bd08      	pop	{r3, pc}
 80059f2:	bf00      	nop
 80059f4:	20001d20 	.word	0x20001d20
	...

08005a00 <rt_test_004_001_execute>:
static void rt_test_004_001_execute(void) {
 8005a00:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 8005a02:	4b2f      	ldr	r3, [pc, #188]	; (8005ac0 <rt_test_004_001_execute+0xc0>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f005 fa72 	bl	800aef0 <stGetCounter>
 8005a0c:	4604      	mov	r4, r0
    chThdSleep(100);
 8005a0e:	2064      	movs	r0, #100	; 0x64
 8005a10:	f7ff ff5e 	bl	80058d0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, 100),
 8005a14:	4a2b      	ldr	r2, [pc, #172]	; (8005ac4 <rt_test_004_001_execute+0xc4>)
 8005a16:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8005a1a:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8005a1e:	f7fc fb9f 	bl	8002160 <_test_assert_time_window>
 8005a22:	b100      	cbz	r0, 8005a26 <rt_test_004_001_execute+0x26>
}
 8005a24:	bd38      	pop	{r3, r4, r5, pc}
  test_set_step(2);
 8005a26:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <rt_test_004_001_execute+0xc0>)
 8005a28:	2202      	movs	r2, #2
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	f005 fa60 	bl	800aef0 <stGetCounter>
 8005a30:	4604      	mov	r4, r0
    chThdSleepMicroseconds(100000);
 8005a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a36:	f7ff ff4b 	bl	80058d0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_US2I(100000)),
 8005a3a:	4a22      	ldr	r2, [pc, #136]	; (8005ac4 <rt_test_004_001_execute+0xc4>)
 8005a3c:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8005a40:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8005a44:	f7fc fb8c 	bl	8002160 <_test_assert_time_window>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d1eb      	bne.n	8005a24 <rt_test_004_001_execute+0x24>
  test_set_step(3);
 8005a4c:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <rt_test_004_001_execute+0xc0>)
 8005a4e:	2203      	movs	r2, #3
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	f005 fa4d 	bl	800aef0 <stGetCounter>
 8005a56:	4604      	mov	r4, r0
    chThdSleepMilliseconds(100);
 8005a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a5c:	f7ff ff38 	bl	80058d0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(100)),
 8005a60:	4a18      	ldr	r2, [pc, #96]	; (8005ac4 <rt_test_004_001_execute+0xc4>)
 8005a62:	f204 31eb 	addw	r1, r4, #1003	; 0x3eb
 8005a66:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8005a6a:	f7fc fb79 	bl	8002160 <_test_assert_time_window>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d1d8      	bne.n	8005a24 <rt_test_004_001_execute+0x24>
  test_set_step(4);
 8005a72:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <rt_test_004_001_execute+0xc0>)
 8005a74:	2204      	movs	r2, #4
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f005 fa3a 	bl	800aef0 <stGetCounter>
 8005a7c:	4604      	mov	r4, r0
    chThdSleepSeconds(1);
 8005a7e:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a82:	f7ff ff25 	bl	80058d0 <chThdSleep>
    test_assert_time_window(chTimeAddX(time, TIME_S2I(1)),
 8005a86:	4a0f      	ldr	r2, [pc, #60]	; (8005ac4 <rt_test_004_001_execute+0xc4>)
 8005a88:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8005a8c:	3113      	adds	r1, #19
 8005a8e:	f504 501c 	add.w	r0, r4, #9984	; 0x2700
 8005a92:	3010      	adds	r0, #16
 8005a94:	f7fc fb64 	bl	8002160 <_test_assert_time_window>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d1c3      	bne.n	8005a24 <rt_test_004_001_execute+0x24>
  test_set_step(5);
 8005a9c:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <rt_test_004_001_execute+0xc0>)
 8005a9e:	2205      	movs	r2, #5
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	f005 fa25 	bl	800aef0 <stGetCounter>
 8005aa6:	4604      	mov	r4, r0
  return systime + (systime_t)interval;
 8005aa8:	f100 0564 	add.w	r5, r0, #100	; 0x64
    chThdSleepUntil(chTimeAddX(time, 100));
 8005aac:	4628      	mov	r0, r5
 8005aae:	f7ff fef7 	bl	80058a0 <chThdSleepUntil>
    test_assert_time_window(chTimeAddX(time, 100),
 8005ab2:	4a04      	ldr	r2, [pc, #16]	; (8005ac4 <rt_test_004_001_execute+0xc4>)
 8005ab4:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8005ab8:	4628      	mov	r0, r5
 8005aba:	f7fc fb51 	bl	8002160 <_test_assert_time_window>
  test_end_step(5);
 8005abe:	e7b1      	b.n	8005a24 <rt_test_004_001_execute+0x24>
 8005ac0:	20002454 	.word	0x20002454
 8005ac4:	0800cbe4 	.word	0x0800cbe4
	...

08005ad0 <rt_test_002_002_execute>:
static void rt_test_002_002_execute(void) {
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	b086      	sub	sp, #24
  test_set_step(1);
 8005ad4:	4c2e      	ldr	r4, [pc, #184]	; (8005b90 <rt_test_002_002_execute+0xc0>)
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	6023      	str	r3, [r4, #0]
    sts = chSysGetStatusAndLockX();
 8005ada:	f004 fe11 	bl	800a700 <chSysGetStatusAndLockX>
    chSysRestoreStatusX(sts);
 8005ade:	f004 fdf7 	bl	800a6d0 <chSysRestoreStatusX>
  test_set_step(2);
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	2320      	movs	r3, #32
 8005ae8:	f383 8811 	msr	BASEPRI, r3
    sts = chSysGetStatusAndLockX();
 8005aec:	f004 fe08 	bl	800a700 <chSysGetStatusAndLockX>
    chSysRestoreStatusX(sts);
 8005af0:	f004 fdee 	bl	800a6d0 <chSysRestoreStatusX>
 8005af4:	2300      	movs	r3, #0
 8005af6:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8005afa:	2303      	movs	r3, #3
 8005afc:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005afe:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 8005b02:	b913      	cbnz	r3, 8005b0a <rt_test_002_002_execute+0x3a>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005b04:	2320      	movs	r3, #32
 8005b06:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b0e:	b913      	cbnz	r3, 8005b16 <rt_test_002_002_execute+0x46>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005b10:	2320      	movs	r3, #32
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8005b1c:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <rt_test_002_002_execute+0xc0>)
 8005b1e:	2204      	movs	r2, #4
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	2320      	movs	r3, #32
 8005b24:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b28:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8005b2c:	b113      	cbz	r3, 8005b34 <rt_test_002_002_execute+0x64>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b34:	f3ef 8311 	mrs	r3, BASEPRI
 8005b38:	b113      	cbz	r3, 8005b40 <rt_test_002_002_execute+0x70>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f383 8811 	msr	BASEPRI, r3
  test_set_step(5);
 8005b40:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <rt_test_002_002_execute+0xc0>)
 8005b42:	2205      	movs	r2, #5
 8005b44:	601a      	str	r2, [r3, #0]
 *
 * @init
 */
static inline void chVTObjectInit(virtual_timer_t *vtp) {

  vtp->func = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	9304      	str	r3, [sp, #16]
 8005b4a:	2320      	movs	r3, #32
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();

  return (bool)(vtp->func != NULL);
 8005b50:	9b04      	ldr	r3, [sp, #16]
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8005b52:	b113      	cbz	r3, 8005b5a <rt_test_002_002_execute+0x8a>
    chVTDoResetI(vtp);
 8005b54:	a801      	add	r0, sp, #4
 8005b56:	f005 f9d3 	bl	800af00 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4a0d      	ldr	r2, [pc, #52]	; (8005b94 <rt_test_002_002_execute+0xc4>)
 8005b5e:	2101      	movs	r1, #1
 8005b60:	a801      	add	r0, sp, #4
 8005b62:	f005 fa15 	bl	800af90 <chVTDoSetI>
 8005b66:	2400      	movs	r4, #0
 8005b68:	f384 8811 	msr	BASEPRI, r4
    chThdSleep(10);
 8005b6c:	200a      	movs	r0, #10
 8005b6e:	f7ff feaf 	bl	80058d0 <chThdSleep>
 8005b72:	2320      	movs	r3, #32
 8005b74:	f383 8811 	msr	BASEPRI, r3
  return (bool)(vtp->func != NULL);
 8005b78:	9804      	ldr	r0, [sp, #16]
 8005b7a:	f384 8811 	msr	BASEPRI, r4
    test_assert(chVTIsArmed(&vt) == false, "timer still armed");
 8005b7e:	4906      	ldr	r1, [pc, #24]	; (8005b98 <rt_test_002_002_execute+0xc8>)
 8005b80:	fab0 f080 	clz	r0, r0
 8005b84:	0940      	lsrs	r0, r0, #5
 8005b86:	f7fb fb33 	bl	80011f0 <_test_assert>
}
 8005b8a:	b006      	add	sp, #24
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	bf00      	nop
 8005b90:	20002454 	.word	0x20002454
 8005b94:	08002561 	.word	0x08002561
 8005b98:	0800cbf8 	.word	0x0800cbf8
 8005b9c:	00000000 	.word	0x00000000

08005ba0 <test_wait_tick>:

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8005ba0:	b508      	push	{r3, lr}

  chThdSleep(1);
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	f7ff fe94 	bl	80058d0 <chThdSleep>
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f005 f99f 	bl	800aef0 <stGetCounter>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 8005bb8:	bd08      	pop	{r3, pc}
 8005bba:	bf00      	nop
 8005bbc:	0000      	movs	r0, r0
	...

08005bc0 <rt_test_011_011_execute>:
static void rt_test_011_011_execute(void) {
 8005bc0:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <rt_test_011_011_execute+0x6c>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
    start = test_wait_tick();
 8005bc8:	f7ff ffea 	bl	8005ba0 <test_wait_tick>
 8005bcc:	4606      	mov	r6, r0
    n = 0;
 8005bce:	2500      	movs	r5, #0
      chMtxLock(&mtx1);
 8005bd0:	4c17      	ldr	r4, [pc, #92]	; (8005c30 <rt_test_011_011_execute+0x70>)
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7fd fbfc 	bl	80033d0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f7fd faa1 	bl	8003120 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7fd fbf6 	bl	80033d0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005be4:	4620      	mov	r0, r4
 8005be6:	f7fd fa9b 	bl	8003120 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005bea:	4620      	mov	r0, r4
 8005bec:	f7fd fbf0 	bl	80033d0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f7fd fa95 	bl	8003120 <chMtxUnlock>
      chMtxLock(&mtx1);
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f7fd fbea 	bl	80033d0 <chMtxLock>
      chMtxUnlock(&mtx1);
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f7fd fa8f 	bl	8003120 <chMtxUnlock>
      n++;
 8005c02:	3501      	adds	r5, #1
 8005c04:	f005 f974 	bl	800aef0 <stGetCounter>
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8005c08:	1b80      	subs	r0, r0, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8005c0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c0e:	4298      	cmp	r0, r3
 8005c10:	d9de      	bls.n	8005bd0 <rt_test_011_011_execute+0x10>
  test_set_step(2);
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <rt_test_011_011_execute+0x6c>)
 8005c14:	2202      	movs	r2, #2
 8005c16:	601a      	str	r2, [r3, #0]
    test_print("--- Score : ");
 8005c18:	4806      	ldr	r0, [pc, #24]	; (8005c34 <rt_test_011_011_execute+0x74>)
 8005c1a:	f7fa fe99 	bl	8000950 <test_print>
    test_printn(n * 4);
 8005c1e:	00a8      	lsls	r0, r5, #2
 8005c20:	f7fa feb6 	bl	8000990 <test_printn>
    test_println(" lock+unlock/S");
 8005c24:	4804      	ldr	r0, [pc, #16]	; (8005c38 <rt_test_011_011_execute+0x78>)
 8005c26:	f7fa fea3 	bl	8000970 <test_println>
}
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	20002454 	.word	0x20002454
 8005c30:	20001c10 	.word	0x20001c10
 8005c34:	0800cc0c 	.word	0x0800cc0c
 8005c38:	0800cc1c 	.word	0x0800cc1c
 8005c3c:	00000000 	.word	0x00000000

08005c40 <rt_test_011_010_execute>:
static void rt_test_011_010_execute(void) {
 8005c40:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8005c42:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <rt_test_011_010_execute+0x6c>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
    start = test_wait_tick();
 8005c48:	f7ff ffaa 	bl	8005ba0 <test_wait_tick>
 8005c4c:	4606      	mov	r6, r0
    n = 0;
 8005c4e:	2500      	movs	r5, #0
      chSemWait(&sem1);
 8005c50:	4c17      	ldr	r4, [pc, #92]	; (8005cb0 <rt_test_011_010_execute+0x70>)
 8005c52:	4620      	mov	r0, r4
 8005c54:	f7fc fc3c 	bl	80024d0 <chSemWait>
      chSemSignal(&sem1);
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f7fc fab9 	bl	80021d0 <chSemSignal>
      chSemWait(&sem1);
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f7fc fc36 	bl	80024d0 <chSemWait>
      chSemSignal(&sem1);
 8005c64:	4620      	mov	r0, r4
 8005c66:	f7fc fab3 	bl	80021d0 <chSemSignal>
      chSemWait(&sem1);
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f7fc fc30 	bl	80024d0 <chSemWait>
      chSemSignal(&sem1);
 8005c70:	4620      	mov	r0, r4
 8005c72:	f7fc faad 	bl	80021d0 <chSemSignal>
      chSemWait(&sem1);
 8005c76:	4620      	mov	r0, r4
 8005c78:	f7fc fc2a 	bl	80024d0 <chSemWait>
      chSemSignal(&sem1);
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f7fc faa7 	bl	80021d0 <chSemSignal>
      n++;
 8005c82:	3501      	adds	r5, #1
 8005c84:	f005 f934 	bl	800aef0 <stGetCounter>
 8005c88:	1b80      	subs	r0, r0, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8005c8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c8e:	4298      	cmp	r0, r3
 8005c90:	d9de      	bls.n	8005c50 <rt_test_011_010_execute+0x10>
  test_set_step(2);
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <rt_test_011_010_execute+0x6c>)
 8005c94:	2202      	movs	r2, #2
 8005c96:	601a      	str	r2, [r3, #0]
    test_print("--- Score : ");
 8005c98:	4806      	ldr	r0, [pc, #24]	; (8005cb4 <rt_test_011_010_execute+0x74>)
 8005c9a:	f7fa fe59 	bl	8000950 <test_print>
    test_printn(n * 4);
 8005c9e:	00a8      	lsls	r0, r5, #2
 8005ca0:	f7fa fe76 	bl	8000990 <test_printn>
    test_println(" wait+signal/S");
 8005ca4:	4804      	ldr	r0, [pc, #16]	; (8005cb8 <rt_test_011_010_execute+0x78>)
 8005ca6:	f7fa fe63 	bl	8000970 <test_println>
}
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	20002454 	.word	0x20002454
 8005cb0:	20001d2c 	.word	0x20001d2c
 8005cb4:	0800cc0c 	.word	0x0800cc0c
 8005cb8:	0800cc2c 	.word	0x0800cc2c
 8005cbc:	00000000 	.word	0x00000000

08005cc0 <rt_test_011_009_execute>:
static void rt_test_011_009_execute(void) {
 8005cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8005cc4:	4b1c      	ldr	r3, [pc, #112]	; (8005d38 <rt_test_011_009_execute+0x78>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
    start = test_wait_tick();
 8005cca:	f7ff ff69 	bl	8005ba0 <test_wait_tick>
 8005cce:	4680      	mov	r8, r0
    n = 0;
 8005cd0:	2700      	movs	r7, #0
 8005cd2:	2320      	movs	r3, #32
 8005cd4:	f383 8811 	msr	BASEPRI, r3
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8005cd8:	4e18      	ldr	r6, [pc, #96]	; (8005d3c <rt_test_011_009_execute+0x7c>)
 8005cda:	4d19      	ldr	r5, [pc, #100]	; (8005d40 <rt_test_011_009_execute+0x80>)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4632      	mov	r2, r6
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f005 f954 	bl	800af90 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8005ce8:	4c16      	ldr	r4, [pc, #88]	; (8005d44 <rt_test_011_009_execute+0x84>)
 8005cea:	2300      	movs	r3, #0
 8005cec:	4632      	mov	r2, r6
 8005cee:	f242 7110 	movw	r1, #10000	; 0x2710
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f005 f94c 	bl	800af90 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f005 f901 	bl	800af00 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f005 f8fe 	bl	800af00 <chVTDoResetI>
 8005d04:	2300      	movs	r3, #0
 8005d06:	f383 8811 	msr	BASEPRI, r3
      n++;
 8005d0a:	3701      	adds	r7, #1
 8005d0c:	f005 f8f0 	bl	800aef0 <stGetCounter>
 8005d10:	eba0 0008 	sub.w	r0, r0, r8
    } while (chVTIsSystemTimeWithinX(start, end));
 8005d14:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d18:	4298      	cmp	r0, r3
 8005d1a:	d9da      	bls.n	8005cd2 <rt_test_011_009_execute+0x12>
  test_set_step(2);
 8005d1c:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <rt_test_011_009_execute+0x78>)
 8005d1e:	2202      	movs	r2, #2
 8005d20:	601a      	str	r2, [r3, #0]
    test_print("--- Score : ");
 8005d22:	4809      	ldr	r0, [pc, #36]	; (8005d48 <rt_test_011_009_execute+0x88>)
 8005d24:	f7fa fe14 	bl	8000950 <test_print>
    test_printn(n * 2);
 8005d28:	0078      	lsls	r0, r7, #1
 8005d2a:	f7fa fe31 	bl	8000990 <test_printn>
    test_println(" timers/S");
 8005d2e:	4807      	ldr	r0, [pc, #28]	; (8005d4c <rt_test_011_009_execute+0x8c>)
 8005d30:	f7fa fe1e 	bl	8000970 <test_println>
}
 8005d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d38:	20002454 	.word	0x20002454
 8005d3c:	080007c1 	.word	0x080007c1
 8005d40:	20002484 	.word	0x20002484
 8005d44:	20002498 	.word	0x20002498
 8005d48:	0800cc0c 	.word	0x0800cc0c
 8005d4c:	0800cc3c 	.word	0x0800cc3c

08005d50 <msg_loop_test>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	4605      	mov	r5, r0
  start = test_wait_tick();
 8005d54:	f7ff ff24 	bl	8005ba0 <test_wait_tick>
 8005d58:	4606      	mov	r6, r0
  uint32_t n = 0;
 8005d5a:	2400      	movs	r4, #0
    (void)chMsgSend(tp, 1);
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f7fd f8e6 	bl	8002f30 <chMsgSend>
    n++;
 8005d64:	3401      	adds	r4, #1
 8005d66:	f005 f8c3 	bl	800aef0 <stGetCounter>
 8005d6a:	1b80      	subs	r0, r0, r6
  } while (chVTIsSystemTimeWithinX(start, end));
 8005d6c:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d70:	4298      	cmp	r0, r3
 8005d72:	d9f3      	bls.n	8005d5c <msg_loop_test+0xc>
  (void)chMsgSend(tp, 0);
 8005d74:	2100      	movs	r1, #0
 8005d76:	4628      	mov	r0, r5
 8005d78:	f7fd f8da 	bl	8002f30 <chMsgSend>
}
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}

08005d80 <test_execute>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 8005d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d84:	460d      	mov	r5, r1
  int tseq, tcase;

  test_chp = stream;
 8005d86:	4b70      	ldr	r3, [pc, #448]	; (8005f48 <test_execute+0x1c8>)
 8005d88:	6018      	str	r0, [r3, #0]
  test_println("");
 8005d8a:	4870      	ldr	r0, [pc, #448]	; (8005f4c <test_execute+0x1cc>)
 8005d8c:	f7fa fdf0 	bl	8000970 <test_println>
  if (tsp->name != NULL) {
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d072      	beq.n	8005e7c <test_execute+0xfc>
    test_print("*** ");
 8005d96:	486e      	ldr	r0, [pc, #440]	; (8005f50 <test_execute+0x1d0>)
 8005d98:	f7fa fdda 	bl	8000950 <test_print>
    test_println(tsp->name);
 8005d9c:	6828      	ldr	r0, [r5, #0]
 8005d9e:	f7fa fde7 	bl	8000970 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 8005da2:	4c6c      	ldr	r4, [pc, #432]	; (8005f54 <test_execute+0x1d4>)
 8005da4:	4620      	mov	r0, r4
 8005da6:	f7fa fde3 	bl	8000970 <test_println>
  test_print("*** Compiled:     ");
 8005daa:	486b      	ldr	r0, [pc, #428]	; (8005f58 <test_execute+0x1d8>)
 8005dac:	f7fa fdd0 	bl	8000950 <test_print>
  test_println(__DATE__ " - " __TIME__);
 8005db0:	486a      	ldr	r0, [pc, #424]	; (8005f5c <test_execute+0x1dc>)
 8005db2:	f7fa fddd 	bl	8000970 <test_println>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
 8005db6:	486a      	ldr	r0, [pc, #424]	; (8005f60 <test_execute+0x1e0>)
 8005db8:	f7fa fdca 	bl	8000950 <test_print>
  test_println(PLATFORM_NAME);
 8005dbc:	4869      	ldr	r0, [pc, #420]	; (8005f64 <test_execute+0x1e4>)
 8005dbe:	f7fa fdd7 	bl	8000970 <test_println>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
 8005dc2:	4869      	ldr	r0, [pc, #420]	; (8005f68 <test_execute+0x1e8>)
 8005dc4:	f7fa fdc4 	bl	8000950 <test_print>
  test_println(BOARD_NAME);
 8005dc8:	4868      	ldr	r0, [pc, #416]	; (8005f6c <test_execute+0x1ec>)
 8005dca:	f7fa fdd1 	bl	8000970 <test_println>
  {
    extern uint8_t __text_base__,   __text_end__,
                   __rodata_base__, __rodata_end__,
                   __data_base__,   __data_end__,
                   __bss_base__,    __bss_end__;
    test_println("***");
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f7fa fdce 	bl	8000970 <test_println>
    test_print("*** Text size:    ");
 8005dd4:	4866      	ldr	r0, [pc, #408]	; (8005f70 <test_execute+0x1f0>)
 8005dd6:	f7fa fdbb 	bl	8000950 <test_print>
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 8005dda:	4866      	ldr	r0, [pc, #408]	; (8005f74 <test_execute+0x1f4>)
 8005ddc:	4b66      	ldr	r3, [pc, #408]	; (8005f78 <test_execute+0x1f8>)
 8005dde:	1ac0      	subs	r0, r0, r3
 8005de0:	f7fa fdd6 	bl	8000990 <test_printn>
    test_println(" bytes");
 8005de4:	4c65      	ldr	r4, [pc, #404]	; (8005f7c <test_execute+0x1fc>)
 8005de6:	4620      	mov	r0, r4
 8005de8:	f7fa fdc2 	bl	8000970 <test_println>
    test_print("*** RO data size: ");
 8005dec:	4864      	ldr	r0, [pc, #400]	; (8005f80 <test_execute+0x200>)
 8005dee:	f7fa fdaf 	bl	8000950 <test_print>
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 8005df2:	4864      	ldr	r0, [pc, #400]	; (8005f84 <test_execute+0x204>)
 8005df4:	4b64      	ldr	r3, [pc, #400]	; (8005f88 <test_execute+0x208>)
 8005df6:	1ac0      	subs	r0, r0, r3
 8005df8:	f7fa fdca 	bl	8000990 <test_printn>
    test_println(" bytes");
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f7fa fdb7 	bl	8000970 <test_println>
    test_print("*** Data size:    ");
 8005e02:	4862      	ldr	r0, [pc, #392]	; (8005f8c <test_execute+0x20c>)
 8005e04:	f7fa fda4 	bl	8000950 <test_print>
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 8005e08:	4861      	ldr	r0, [pc, #388]	; (8005f90 <test_execute+0x210>)
 8005e0a:	4b62      	ldr	r3, [pc, #392]	; (8005f94 <test_execute+0x214>)
 8005e0c:	1ac0      	subs	r0, r0, r3
 8005e0e:	f7fa fdbf 	bl	8000990 <test_printn>
    test_println(" bytes");
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7fa fdac 	bl	8000970 <test_println>
    test_print("*** BSS size:     ");
 8005e18:	485f      	ldr	r0, [pc, #380]	; (8005f98 <test_execute+0x218>)
 8005e1a:	f7fa fd99 	bl	8000950 <test_print>
    test_printn((uint32_t)(&__bss_end__ - &__bss_base__));
 8005e1e:	485f      	ldr	r0, [pc, #380]	; (8005f9c <test_execute+0x21c>)
 8005e20:	4b5f      	ldr	r3, [pc, #380]	; (8005fa0 <test_execute+0x220>)
 8005e22:	1ac0      	subs	r0, r0, r3
 8005e24:	f7fa fdb4 	bl	8000990 <test_printn>
    test_println(" bytes");
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f7fa fda1 	bl	8000970 <test_println>
  }
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 8005e2e:	4847      	ldr	r0, [pc, #284]	; (8005f4c <test_execute+0x1cc>)
 8005e30:	f7fa fd9e 	bl	8000970 <test_println>

  test_global_fail = false;
 8005e34:	f04f 0900 	mov.w	r9, #0
 8005e38:	4b5a      	ldr	r3, [pc, #360]	; (8005fa4 <test_execute+0x224>)
 8005e3a:	f883 9000 	strb.w	r9, [r3]
  tseq = 0;
  while (tsp->sequences[tseq] != NULL) {
 8005e3e:	686b      	ldr	r3, [r5, #4]
 8005e40:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8005e44:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d067      	beq.n	8005f1c <test_execute+0x19c>
#if TEST_CFG_SHOW_SEQUENCES == TRUE
    print_fat_line();
 8005e4c:	f7fb fa30 	bl	80012b0 <print_fat_line>
    test_print("=== Test Sequence ");
 8005e50:	4855      	ldr	r0, [pc, #340]	; (8005fa8 <test_execute+0x228>)
 8005e52:	f7fa fd7d 	bl	8000950 <test_print>
    test_printn(tseq + 1);
 8005e56:	f109 0901 	add.w	r9, r9, #1
 8005e5a:	46c8      	mov	r8, r9
 8005e5c:	4648      	mov	r0, r9
 8005e5e:	f7fa fd97 	bl	8000990 <test_printn>
    test_print(" (");
 8005e62:	4852      	ldr	r0, [pc, #328]	; (8005fac <test_execute+0x22c>)
 8005e64:	f7fa fd74 	bl	8000950 <test_print>
    test_print(tsp->sequences[tseq]->name);
 8005e68:	686b      	ldr	r3, [r5, #4]
 8005e6a:	599b      	ldr	r3, [r3, r6]
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	f7fa fd6f 	bl	8000950 <test_print>
    test_println(")");
 8005e72:	484f      	ldr	r0, [pc, #316]	; (8005fb0 <test_execute+0x230>)
 8005e74:	f7fa fd7c 	bl	8000970 <test_println>
#endif
    tcase = 0;
 8005e78:	2400      	movs	r4, #0
 8005e7a:	e006      	b.n	8005e8a <test_execute+0x10a>
    test_println("*** Test Suite");
 8005e7c:	484d      	ldr	r0, [pc, #308]	; (8005fb4 <test_execute+0x234>)
 8005e7e:	f7fa fd77 	bl	8000970 <test_println>
 8005e82:	e78e      	b.n	8005da2 <test_execute+0x22>
        test_print("] \"");
        test_print(test_failure_message);
        test_println("\")");
      }
      else {
        test_println("--- Result: SUCCESS");
 8005e84:	484c      	ldr	r0, [pc, #304]	; (8005fb8 <test_execute+0x238>)
 8005e86:	f7fa fd73 	bl	8000970 <test_println>
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 8005e8a:	686b      	ldr	r3, [r5, #4]
 8005e8c:	599b      	ldr	r3, [r3, r6]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	00a7      	lsls	r7, r4, #2
 8005e92:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0d1      	beq.n	8005e3e <test_execute+0xbe>
      print_line();
 8005e9a:	f7fb fa21 	bl	80012e0 <print_line>
      test_print("--- Test Case ");
 8005e9e:	4847      	ldr	r0, [pc, #284]	; (8005fbc <test_execute+0x23c>)
 8005ea0:	f7fa fd56 	bl	8000950 <test_print>
      test_printn(tseq + 1);
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	f7fa fd73 	bl	8000990 <test_printn>
      test_print(".");
 8005eaa:	4845      	ldr	r0, [pc, #276]	; (8005fc0 <test_execute+0x240>)
 8005eac:	f7fa fd50 	bl	8000950 <test_print>
      test_printn(tcase + 1);
 8005eb0:	3401      	adds	r4, #1
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f7fa fd6c 	bl	8000990 <test_printn>
      test_print(" (");
 8005eb8:	483c      	ldr	r0, [pc, #240]	; (8005fac <test_execute+0x22c>)
 8005eba:	f7fa fd49 	bl	8000950 <test_print>
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 8005ebe:	686b      	ldr	r3, [r5, #4]
 8005ec0:	599b      	ldr	r3, [r3, r6]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	59db      	ldr	r3, [r3, r7]
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	f7fa fd42 	bl	8000950 <test_print>
      test_println(")");
 8005ecc:	4838      	ldr	r0, [pc, #224]	; (8005fb0 <test_execute+0x230>)
 8005ece:	f7fa fd4f 	bl	8000970 <test_println>
 *
 * @api
 */
static inline void osalThreadSleep(sysinterval_t delay) {

  chThdSleep(delay);
 8005ed2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005ed6:	f7ff fcfb 	bl	80058d0 <chThdSleep>
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 8005eda:	686b      	ldr	r3, [r5, #4]
 8005edc:	599b      	ldr	r3, [r3, r6]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	59d8      	ldr	r0, [r3, r7]
 8005ee2:	f7fb fa55 	bl	8001390 <execute_test>
      if (test_local_fail) {
 8005ee6:	4b37      	ldr	r3, [pc, #220]	; (8005fc4 <test_execute+0x244>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0ca      	beq.n	8005e84 <test_execute+0x104>
        test_print("--- Result: FAILURE (#");
 8005eee:	4836      	ldr	r0, [pc, #216]	; (8005fc8 <test_execute+0x248>)
 8005ef0:	f7fa fd2e 	bl	8000950 <test_print>
        test_printn(test_step);
 8005ef4:	4b35      	ldr	r3, [pc, #212]	; (8005fcc <test_execute+0x24c>)
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	f7fa fd4a 	bl	8000990 <test_printn>
        test_print(" [");
 8005efc:	4834      	ldr	r0, [pc, #208]	; (8005fd0 <test_execute+0x250>)
 8005efe:	f7fa fd27 	bl	8000950 <test_print>
        print_tokens();
 8005f02:	f7fb fa05 	bl	8001310 <print_tokens>
        test_print("] \"");
 8005f06:	4833      	ldr	r0, [pc, #204]	; (8005fd4 <test_execute+0x254>)
 8005f08:	f7fa fd22 	bl	8000950 <test_print>
        test_print(test_failure_message);
 8005f0c:	4b32      	ldr	r3, [pc, #200]	; (8005fd8 <test_execute+0x258>)
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	f7fa fd1e 	bl	8000950 <test_print>
        test_println("\")");
 8005f14:	4831      	ldr	r0, [pc, #196]	; (8005fdc <test_execute+0x25c>)
 8005f16:	f7fa fd2b 	bl	8000970 <test_println>
 8005f1a:	e7b6      	b.n	8005e8a <test_execute+0x10a>
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 8005f1c:	f7fb f9e0 	bl	80012e0 <print_line>
  test_println("");
 8005f20:	480a      	ldr	r0, [pc, #40]	; (8005f4c <test_execute+0x1cc>)
 8005f22:	f7fa fd25 	bl	8000970 <test_println>
  test_print("Final result: ");
 8005f26:	482e      	ldr	r0, [pc, #184]	; (8005fe0 <test_execute+0x260>)
 8005f28:	f7fa fd12 	bl	8000950 <test_print>
  if (test_global_fail)
 8005f2c:	4b1d      	ldr	r3, [pc, #116]	; (8005fa4 <test_execute+0x224>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	b133      	cbz	r3, 8005f40 <test_execute+0x1c0>
    test_println("FAILURE");
 8005f32:	482c      	ldr	r0, [pc, #176]	; (8005fe4 <test_execute+0x264>)
 8005f34:	f7fa fd1c 	bl	8000970 <test_println>
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 8005f38:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <test_execute+0x224>)
 8005f3a:	7818      	ldrb	r0, [r3, #0]
 8005f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    test_println("SUCCESS");
 8005f40:	4829      	ldr	r0, [pc, #164]	; (8005fe8 <test_execute+0x268>)
 8005f42:	f7fa fd15 	bl	8000970 <test_println>
 8005f46:	e7f7      	b.n	8005f38 <test_execute+0x1b8>
 8005f48:	200023a8 	.word	0x200023a8
 8005f4c:	0800c3e4 	.word	0x0800c3e4
 8005f50:	0800cc48 	.word	0x0800cc48
 8005f54:	0800cc60 	.word	0x0800cc60
 8005f58:	0800cc64 	.word	0x0800cc64
 8005f5c:	0800cc78 	.word	0x0800cc78
 8005f60:	0800cc90 	.word	0x0800cc90
 8005f64:	0800c4cc 	.word	0x0800c4cc
 8005f68:	0800cca4 	.word	0x0800cca4
 8005f6c:	0800c50c 	.word	0x0800c50c
 8005f70:	0800ccb8 	.word	0x0800ccb8
 8005f74:	0800b624 	.word	0x0800b624
 8005f78:	080001e0 	.word	0x080001e0
 8005f7c:	0800bb80 	.word	0x0800bb80
 8005f80:	0800cccc 	.word	0x0800cccc
 8005f84:	0800e628 	.word	0x0800e628
 8005f88:	0800b624 	.word	0x0800b624
 8005f8c:	0800cce0 	.word	0x0800cce0
 8005f90:	200018e8 	.word	0x200018e8
 8005f94:	20000800 	.word	0x20000800
 8005f98:	0800ccf4 	.word	0x0800ccf4
 8005f9c:	20002be8 	.word	0x20002be8
 8005fa0:	200018e8 	.word	0x200018e8
 8005fa4:	200023b0 	.word	0x200023b0
 8005fa8:	0800cd08 	.word	0x0800cd08
 8005fac:	0800cd1c 	.word	0x0800cd1c
 8005fb0:	0800cd20 	.word	0x0800cd20
 8005fb4:	0800cc50 	.word	0x0800cc50
 8005fb8:	0800cd5c 	.word	0x0800cd5c
 8005fbc:	0800cd24 	.word	0x0800cd24
 8005fc0:	0800cd34 	.word	0x0800cd34
 8005fc4:	20002450 	.word	0x20002450
 8005fc8:	0800cd38 	.word	0x0800cd38
 8005fcc:	20002454 	.word	0x20002454
 8005fd0:	0800cd50 	.word	0x0800cd50
 8005fd4:	0800cd54 	.word	0x0800cd54
 8005fd8:	200023ac 	.word	0x200023ac
 8005fdc:	0800cd58 	.word	0x0800cd58
 8005fe0:	0800cd70 	.word	0x0800cd70
 8005fe4:	0800cd80 	.word	0x0800cd80
 8005fe8:	0800cd68 	.word	0x0800cd68
 8005fec:	00000000 	.word	0x00000000

08005ff0 <test_rt>:
static THD_FUNCTION(test_rt, arg) {
 8005ff0:	b508      	push	{r3, lr}
  test_execute(chp, &rt_test_suite);
 8005ff2:	4902      	ldr	r1, [pc, #8]	; (8005ffc <test_rt+0xc>)
 8005ff4:	f7ff fec4 	bl	8005d80 <test_execute>
}
 8005ff8:	bd08      	pop	{r3, pc}
 8005ffa:	bf00      	nop
 8005ffc:	0800e188 	.word	0x0800e188

08006000 <test_oslib>:
static THD_FUNCTION(test_oslib, arg) {
 8006000:	b508      	push	{r3, lr}
  test_execute(chp, &oslib_test_suite);
 8006002:	4902      	ldr	r1, [pc, #8]	; (800600c <test_oslib+0xc>)
 8006004:	f7ff febc 	bl	8005d80 <test_execute>
}
 8006008:	bd08      	pop	{r3, pc}
 800600a:	bf00      	nop
 800600c:	0800dd14 	.word	0x0800dd14

08006010 <chThdYield>:
void chThdYield(void) {
 8006010:	b508      	push	{r3, lr}
 8006012:	2320      	movs	r3, #32
 8006014:	f383 8811 	msr	BASEPRI, r3
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.queue) >= currp->prio;
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <chThdYield+0x24>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	6892      	ldr	r2, [r2, #8]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	689b      	ldr	r3, [r3, #8]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 8006022:	429a      	cmp	r2, r3
 8006024:	d203      	bcs.n	800602e <chThdYield+0x1e>
 8006026:	2300      	movs	r3, #0
 8006028:	f383 8811 	msr	BASEPRI, r3
}
 800602c:	bd08      	pop	{r3, pc}
    chSchDoRescheduleBehind();
 800602e:	f004 faef 	bl	800a610 <chSchDoRescheduleBehind>
 8006032:	e7f8      	b.n	8006026 <chThdYield+0x16>
 8006034:	20001a18 	.word	0x20001a18
	...

08006040 <bmk_thread8>:
static THD_FUNCTION(bmk_thread8, p) {
 8006040:	b510      	push	{r4, lr}
 8006042:	4604      	mov	r4, r0
    chThdYield();
 8006044:	f7ff ffe4 	bl	8006010 <chThdYield>
    chThdYield();
 8006048:	f7ff ffe2 	bl	8006010 <chThdYield>
    chThdYield();
 800604c:	f7ff ffe0 	bl	8006010 <chThdYield>
    chThdYield();
 8006050:	f7ff ffde 	bl	8006010 <chThdYield>
    (*(uint32_t *)p) += 4;
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	3304      	adds	r3, #4
 8006058:	6023      	str	r3, [r4, #0]
  return ch.rlist.current;
 800605a:	4b04      	ldr	r3, [pc, #16]	; (800606c <bmk_thread8+0x2c>)
 800605c:	699b      	ldr	r3, [r3, #24]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 800605e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  } while(!chThdShouldTerminateX());
 8006062:	f013 0f04 	tst.w	r3, #4
 8006066:	d0ed      	beq.n	8006044 <bmk_thread8+0x4>
}
 8006068:	bd10      	pop	{r4, pc}
 800606a:	bf00      	nop
 800606c:	20001a18 	.word	0x20001a18

08006070 <chThdCreateStatic>:
                            tprio_t prio, tfunc_t pf, void *arg) {
 8006070:	b510      	push	{r4, lr}
 8006072:	4604      	mov	r4, r0
 8006074:	2020      	movs	r0, #32
 8006076:	f380 8811 	msr	BASEPRI, r0
  tp = (thread_t *)((uint8_t *)wsp + size -
 800607a:	3948      	subs	r1, #72	; 0x48
 800607c:	1860      	adds	r0, r4, r1
  tp->wabase = (stkalign_t *)wsp;
 800607e:	61c4      	str	r4, [r0, #28]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8006080:	f1a0 0124 	sub.w	r1, r0, #36	; 0x24
 8006084:	60c1      	str	r1, [r0, #12]
 8006086:	f840 3c24 	str.w	r3, [r0, #-36]
 800608a:	9b02      	ldr	r3, [sp, #8]
 800608c:	f840 3c20 	str.w	r3, [r0, #-32]
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <chThdCreateStatic+0x40>)
 8006092:	f840 3c04 	str.w	r3, [r0, #-4]
  tp = _thread_init(tp, "noname", prio);
 8006096:	4907      	ldr	r1, [pc, #28]	; (80060b4 <chThdCreateStatic+0x44>)
 8006098:	f004 fa12 	bl	800a4c0 <_thread_init>
 800609c:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800609e:	2100      	movs	r1, #0
 80060a0:	f004 face 	bl	800a640 <chSchWakeupS>
 80060a4:	2300      	movs	r3, #0
 80060a6:	f383 8811 	msr	BASEPRI, r3
}
 80060aa:	4620      	mov	r0, r4
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	bf00      	nop
 80060b0:	080002d1 	.word	0x080002d1
 80060b4:	0800cd88 	.word	0x0800cd88
	...

080060c0 <rt_test_011_008_execute>:
static void rt_test_011_008_execute(void) {
 80060c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060c4:	b085      	sub	sp, #20
  test_set_step(1);
 80060c6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80061ac <rt_test_011_008_execute+0xec>
 80060ca:	2301      	movs	r3, #1
 80060cc:	f8c9 3000 	str.w	r3, [r9]
    n = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	9303      	str	r3, [sp, #12]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 80060d4:	f7ff fd64 	bl	8005ba0 <test_wait_tick>
  return ch.rlist.current;
 80060d8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80061b0 <rt_test_011_008_execute+0xf0>
 80060dc:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	4e2d      	ldr	r6, [pc, #180]	; (8006198 <rt_test_011_008_execute+0xd8>)
 80060e4:	4d2d      	ldr	r5, [pc, #180]	; (800619c <rt_test_011_008_execute+0xdc>)
 80060e6:	af03      	add	r7, sp, #12
 80060e8:	9700      	str	r7, [sp, #0]
 80060ea:	4633      	mov	r3, r6
 80060ec:	3a01      	subs	r2, #1
 80060ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80060f2:	4628      	mov	r0, r5
 80060f4:	f7ff ffbc 	bl	8006070 <chThdCreateStatic>
 80060f8:	4c29      	ldr	r4, [pc, #164]	; (80061a0 <rt_test_011_008_execute+0xe0>)
 80060fa:	6020      	str	r0, [r4, #0]
  return ch.rlist.current;
 80060fc:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 8006100:	689a      	ldr	r2, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8006102:	9700      	str	r7, [sp, #0]
 8006104:	4633      	mov	r3, r6
 8006106:	3a01      	subs	r2, #1
 8006108:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800610c:	1868      	adds	r0, r5, r1
 800610e:	f7ff ffaf 	bl	8006070 <chThdCreateStatic>
 8006112:	6060      	str	r0, [r4, #4]
  return ch.rlist.current;
 8006114:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 8006118:	689a      	ldr	r2, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800611a:	9700      	str	r7, [sp, #0]
 800611c:	4633      	mov	r3, r6
 800611e:	3a01      	subs	r2, #1
 8006120:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006124:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8006128:	f7ff ffa2 	bl	8006070 <chThdCreateStatic>
 800612c:	60a0      	str	r0, [r4, #8]
  return ch.rlist.current;
 800612e:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 8006132:	689a      	ldr	r2, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 8006134:	9700      	str	r7, [sp, #0]
 8006136:	4633      	mov	r3, r6
 8006138:	3a01      	subs	r2, #1
 800613a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800613e:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8006142:	f7ff ff95 	bl	8006070 <chThdCreateStatic>
 8006146:	60e0      	str	r0, [r4, #12]
  return ch.rlist.current;
 8006148:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 800614c:	689a      	ldr	r2, [r3, #8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800614e:	9700      	str	r7, [sp, #0]
 8006150:	4633      	mov	r3, r6
 8006152:	3a01      	subs	r2, #1
 8006154:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006158:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800615c:	f7ff ff88 	bl	8006070 <chThdCreateStatic>
 8006160:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8006162:	2302      	movs	r3, #2
 8006164:	f8c9 3000 	str.w	r3, [r9]
    chThdSleepSeconds(1);
 8006168:	f242 7010 	movw	r0, #10000	; 0x2710
 800616c:	f7ff fbb0 	bl	80058d0 <chThdSleep>
    test_terminate_threads();
 8006170:	f7fb fece 	bl	8001f10 <test_terminate_threads>
    test_wait_threads();
 8006174:	f7fd fe74 	bl	8003e60 <test_wait_threads>
  test_set_step(3);
 8006178:	2303      	movs	r3, #3
 800617a:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 800617e:	4809      	ldr	r0, [pc, #36]	; (80061a4 <rt_test_011_008_execute+0xe4>)
 8006180:	f7fa fbe6 	bl	8000950 <test_print>
    test_printn(n);
 8006184:	9803      	ldr	r0, [sp, #12]
 8006186:	f7fa fc03 	bl	8000990 <test_printn>
    test_println(" ctxswc/S");
 800618a:	4807      	ldr	r0, [pc, #28]	; (80061a8 <rt_test_011_008_execute+0xe8>)
 800618c:	f7fa fbf0 	bl	8000970 <test_println>
}
 8006190:	b005      	add	sp, #20
 8006192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006196:	bf00      	nop
 8006198:	08006041 	.word	0x08006041
 800619c:	20001d40 	.word	0x20001d40
 80061a0:	2000246c 	.word	0x2000246c
 80061a4:	0800cc0c 	.word	0x0800cc0c
 80061a8:	0800cd90 	.word	0x0800cd90
 80061ac:	20002454 	.word	0x20002454
 80061b0:	20001a18 	.word	0x20001a18
	...

080061c0 <rt_test_011_007_execute>:
static void rt_test_011_007_execute(void) {
 80061c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061c4:	b083      	sub	sp, #12
  test_set_step(1);
 80061c6:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80062d8 <rt_test_011_007_execute+0x118>
 80061ca:	2301      	movs	r3, #1
 80061cc:	f8c9 3000 	str.w	r3, [r9]
  return ch.rlist.current;
 80061d0:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80062e8 <rt_test_011_007_execute+0x128>
 80061d4:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 80061d8:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 80061da:	4f3b      	ldr	r7, [pc, #236]	; (80062c8 <rt_test_011_007_execute+0x108>)
 80061dc:	4e3b      	ldr	r6, [pc, #236]	; (80062cc <rt_test_011_007_execute+0x10c>)
 80061de:	2400      	movs	r4, #0
 80061e0:	9400      	str	r4, [sp, #0]
 80061e2:	463b      	mov	r3, r7
 80061e4:	3205      	adds	r2, #5
 80061e6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80061ea:	4630      	mov	r0, r6
 80061ec:	f7ff ff40 	bl	8006070 <chThdCreateStatic>
 80061f0:	4d37      	ldr	r5, [pc, #220]	; (80062d0 <rt_test_011_007_execute+0x110>)
 80061f2:	6028      	str	r0, [r5, #0]
  return ch.rlist.current;
 80061f4:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 80061f8:	689a      	ldr	r2, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 80061fa:	9400      	str	r4, [sp, #0]
 80061fc:	463b      	mov	r3, r7
 80061fe:	3204      	adds	r2, #4
 8006200:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006204:	1870      	adds	r0, r6, r1
 8006206:	f7ff ff33 	bl	8006070 <chThdCreateStatic>
 800620a:	6068      	str	r0, [r5, #4]
  return ch.rlist.current;
 800620c:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 8006210:	689a      	ldr	r2, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 8006212:	9400      	str	r4, [sp, #0]
 8006214:	463b      	mov	r3, r7
 8006216:	3203      	adds	r2, #3
 8006218:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800621c:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8006220:	f7ff ff26 	bl	8006070 <chThdCreateStatic>
 8006224:	60a8      	str	r0, [r5, #8]
  return ch.rlist.current;
 8006226:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 800622a:	689a      	ldr	r2, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800622c:	9400      	str	r4, [sp, #0]
 800622e:	463b      	mov	r3, r7
 8006230:	3202      	adds	r2, #2
 8006232:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006236:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 800623a:	f7ff ff19 	bl	8006070 <chThdCreateStatic>
 800623e:	60e8      	str	r0, [r5, #12]
  return ch.rlist.current;
 8006240:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 8006244:	689a      	ldr	r2, [r3, #8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 8006246:	9400      	str	r4, [sp, #0]
 8006248:	463b      	mov	r3, r7
 800624a:	3201      	adds	r2, #1
 800624c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006250:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8006254:	f7ff ff0c 	bl	8006070 <chThdCreateStatic>
 8006258:	6128      	str	r0, [r5, #16]
  test_set_step(2);
 800625a:	2302      	movs	r3, #2
 800625c:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 8006260:	f7ff fc9e 	bl	8005ba0 <test_wait_tick>
 8006264:	4605      	mov	r5, r0
 8006266:	f06f 0201 	mvn.w	r2, #1
 800626a:	2100      	movs	r1, #0
 800626c:	4819      	ldr	r0, [pc, #100]	; (80062d4 <rt_test_011_007_execute+0x114>)
 800626e:	f7fe ff77 	bl	8005160 <chSemResetWithMessage>
      n++;
 8006272:	3401      	adds	r4, #1
 8006274:	f004 fe3c 	bl	800aef0 <stGetCounter>
 8006278:	1b40      	subs	r0, r0, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 800627a:	f242 730f 	movw	r3, #9999	; 0x270f
 800627e:	4298      	cmp	r0, r3
 8006280:	d9f1      	bls.n	8006266 <rt_test_011_007_execute+0xa6>
  test_set_step(3);
 8006282:	4d15      	ldr	r5, [pc, #84]	; (80062d8 <rt_test_011_007_execute+0x118>)
 8006284:	2303      	movs	r3, #3
 8006286:	602b      	str	r3, [r5, #0]
    test_terminate_threads();
 8006288:	f7fb fe42 	bl	8001f10 <test_terminate_threads>
 800628c:	f06f 0201 	mvn.w	r2, #1
 8006290:	2100      	movs	r1, #0
 8006292:	4810      	ldr	r0, [pc, #64]	; (80062d4 <rt_test_011_007_execute+0x114>)
 8006294:	f7fe ff64 	bl	8005160 <chSemResetWithMessage>
    test_wait_threads();
 8006298:	f7fd fde2 	bl	8003e60 <test_wait_threads>
  test_set_step(4);
 800629c:	2304      	movs	r3, #4
 800629e:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 80062a0:	480e      	ldr	r0, [pc, #56]	; (80062dc <rt_test_011_007_execute+0x11c>)
 80062a2:	f7fa fb55 	bl	8000950 <test_print>
    test_printn(n);
 80062a6:	4620      	mov	r0, r4
 80062a8:	f7fa fb72 	bl	8000990 <test_printn>
    test_print(" reschedules/S, ");
 80062ac:	480c      	ldr	r0, [pc, #48]	; (80062e0 <rt_test_011_007_execute+0x120>)
 80062ae:	f7fa fb4f 	bl	8000950 <test_print>
    test_printn(n * 6);
 80062b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80062b6:	0060      	lsls	r0, r4, #1
 80062b8:	f7fa fb6a 	bl	8000990 <test_printn>
    test_println(" ctxswc/S");
 80062bc:	4809      	ldr	r0, [pc, #36]	; (80062e4 <rt_test_011_007_execute+0x124>)
 80062be:	f7fa fb57 	bl	8000970 <test_println>
}
 80062c2:	b003      	add	sp, #12
 80062c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062c8:	080024f1 	.word	0x080024f1
 80062cc:	20001d40 	.word	0x20001d40
 80062d0:	2000246c 	.word	0x2000246c
 80062d4:	20001d2c 	.word	0x20001d2c
 80062d8:	20002454 	.word	0x20002454
 80062dc:	0800cc0c 	.word	0x0800cc0c
 80062e0:	0800cd9c 	.word	0x0800cd9c
 80062e4:	0800cd90 	.word	0x0800cd90
 80062e8:	20001a18 	.word	0x20001a18
 80062ec:	00000000 	.word	0x00000000

080062f0 <rt_test_011_006_execute>:
static void rt_test_011_006_execute(void) {
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	b082      	sub	sp, #8
  return ch.rlist.current;
 80062f4:	4b15      	ldr	r3, [pc, #84]	; (800634c <rt_test_011_006_execute+0x5c>)
 80062f6:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80062f8:	689e      	ldr	r6, [r3, #8]
  tprio_t prio = chThdGetPriorityX() + 1;
 80062fa:	3601      	adds	r6, #1
  test_set_step(1);
 80062fc:	4b14      	ldr	r3, [pc, #80]	; (8006350 <rt_test_011_006_execute+0x60>)
 80062fe:	2201      	movs	r2, #1
 8006300:	601a      	str	r2, [r3, #0]
    start = test_wait_tick();
 8006302:	f7ff fc4d 	bl	8005ba0 <test_wait_tick>
 8006306:	4605      	mov	r5, r0
    n = 0;
 8006308:	2400      	movs	r4, #0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800630a:	2300      	movs	r3, #0
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	4b11      	ldr	r3, [pc, #68]	; (8006354 <rt_test_011_006_execute+0x64>)
 8006310:	4632      	mov	r2, r6
 8006312:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006316:	4810      	ldr	r0, [pc, #64]	; (8006358 <rt_test_011_006_execute+0x68>)
 8006318:	f7ff feaa 	bl	8006070 <chThdCreateStatic>
 800631c:	f7fd fcf8 	bl	8003d10 <chThdRelease>
      n++;
 8006320:	3401      	adds	r4, #1
 8006322:	f004 fde5 	bl	800aef0 <stGetCounter>
 8006326:	1b40      	subs	r0, r0, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 8006328:	f242 730f 	movw	r3, #9999	; 0x270f
 800632c:	4298      	cmp	r0, r3
 800632e:	d9ec      	bls.n	800630a <rt_test_011_006_execute+0x1a>
  test_set_step(2);
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <rt_test_011_006_execute+0x60>)
 8006332:	2202      	movs	r2, #2
 8006334:	601a      	str	r2, [r3, #0]
    test_print("--- Score : ");
 8006336:	4809      	ldr	r0, [pc, #36]	; (800635c <rt_test_011_006_execute+0x6c>)
 8006338:	f7fa fb0a 	bl	8000950 <test_print>
    test_printn(n);
 800633c:	4620      	mov	r0, r4
 800633e:	f7fa fb27 	bl	8000990 <test_printn>
    test_println(" threads/S");
 8006342:	4807      	ldr	r0, [pc, #28]	; (8006360 <rt_test_011_006_execute+0x70>)
 8006344:	f7fa fb14 	bl	8000970 <test_println>
}
 8006348:	b002      	add	sp, #8
 800634a:	bd70      	pop	{r4, r5, r6, pc}
 800634c:	20001a18 	.word	0x20001a18
 8006350:	20002454 	.word	0x20002454
 8006354:	08009231 	.word	0x08009231
 8006358:	20001d40 	.word	0x20001d40
 800635c:	0800cc0c 	.word	0x0800cc0c
 8006360:	0800cdb0 	.word	0x0800cdb0
	...

08006370 <rt_test_011_005_execute>:
static void rt_test_011_005_execute(void) {
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	b082      	sub	sp, #8
  return ch.rlist.current;
 8006374:	4b15      	ldr	r3, [pc, #84]	; (80063cc <rt_test_011_005_execute+0x5c>)
 8006376:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8006378:	689e      	ldr	r6, [r3, #8]
  tprio_t prio = chThdGetPriorityX() - 1;
 800637a:	3e01      	subs	r6, #1
  test_set_step(1);
 800637c:	4b14      	ldr	r3, [pc, #80]	; (80063d0 <rt_test_011_005_execute+0x60>)
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]
    start = test_wait_tick();
 8006382:	f7ff fc0d 	bl	8005ba0 <test_wait_tick>
 8006386:	4605      	mov	r5, r0
    n = 0;
 8006388:	2400      	movs	r4, #0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800638a:	2300      	movs	r3, #0
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <rt_test_011_005_execute+0x64>)
 8006390:	4632      	mov	r2, r6
 8006392:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006396:	4810      	ldr	r0, [pc, #64]	; (80063d8 <rt_test_011_005_execute+0x68>)
 8006398:	f7ff fe6a 	bl	8006070 <chThdCreateStatic>
 800639c:	f7fd fd40 	bl	8003e20 <chThdWait>
      n++;
 80063a0:	3401      	adds	r4, #1
 80063a2:	f004 fda5 	bl	800aef0 <stGetCounter>
 80063a6:	1b40      	subs	r0, r0, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 80063a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80063ac:	4298      	cmp	r0, r3
 80063ae:	d9ec      	bls.n	800638a <rt_test_011_005_execute+0x1a>
  test_set_step(2);
 80063b0:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <rt_test_011_005_execute+0x60>)
 80063b2:	2202      	movs	r2, #2
 80063b4:	601a      	str	r2, [r3, #0]
    test_print("--- Score : ");
 80063b6:	4809      	ldr	r0, [pc, #36]	; (80063dc <rt_test_011_005_execute+0x6c>)
 80063b8:	f7fa faca 	bl	8000950 <test_print>
    test_printn(n);
 80063bc:	4620      	mov	r0, r4
 80063be:	f7fa fae7 	bl	8000990 <test_printn>
    test_println(" threads/S");
 80063c2:	4807      	ldr	r0, [pc, #28]	; (80063e0 <rt_test_011_005_execute+0x70>)
 80063c4:	f7fa fad4 	bl	8000970 <test_println>
}
 80063c8:	b002      	add	sp, #8
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
 80063cc:	20001a18 	.word	0x20001a18
 80063d0:	20002454 	.word	0x20002454
 80063d4:	08009231 	.word	0x08009231
 80063d8:	20001d40 	.word	0x20001d40
 80063dc:	0800cc0c 	.word	0x0800cc0c
 80063e0:	0800cdb0 	.word	0x0800cdb0
	...

080063f0 <rt_test_011_004_execute>:
static void rt_test_011_004_execute(void) {
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	b082      	sub	sp, #8
  test_set_step(1);
 80063f4:	4e28      	ldr	r6, [pc, #160]	; (8006498 <rt_test_011_004_execute+0xa8>)
 80063f6:	2301      	movs	r3, #1
 80063f8:	6033      	str	r3, [r6, #0]
  return ch.rlist.current;
 80063fa:	4b28      	ldr	r3, [pc, #160]	; (800649c <rt_test_011_004_execute+0xac>)
 80063fc:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80063fe:	689a      	ldr	r2, [r3, #8]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 8006400:	2500      	movs	r5, #0
 8006402:	9500      	str	r5, [sp, #0]
 8006404:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <rt_test_011_004_execute+0xb0>)
 8006406:	3201      	adds	r2, #1
 8006408:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800640c:	4825      	ldr	r0, [pc, #148]	; (80064a4 <rt_test_011_004_execute+0xb4>)
 800640e:	f7ff fe2f 	bl	8006070 <chThdCreateStatic>
 8006412:	4604      	mov	r4, r0
 8006414:	4b24      	ldr	r3, [pc, #144]	; (80064a8 <rt_test_011_004_execute+0xb8>)
 8006416:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 8006418:	2302      	movs	r3, #2
 800641a:	6033      	str	r3, [r6, #0]
    start = test_wait_tick();
 800641c:	f7ff fbc0 	bl	8005ba0 <test_wait_tick>
 8006420:	4606      	mov	r6, r0
 8006422:	2320      	movs	r3, #32
 8006424:	f383 8811 	msr	BASEPRI, r3
      chSchWakeupS(tp, MSG_OK);
 8006428:	2100      	movs	r1, #0
 800642a:	4620      	mov	r0, r4
 800642c:	f004 f908 	bl	800a640 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8006430:	2100      	movs	r1, #0
 8006432:	4620      	mov	r0, r4
 8006434:	f004 f904 	bl	800a640 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8006438:	2100      	movs	r1, #0
 800643a:	4620      	mov	r0, r4
 800643c:	f004 f900 	bl	800a640 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 8006440:	2100      	movs	r1, #0
 8006442:	4620      	mov	r0, r4
 8006444:	f004 f8fc 	bl	800a640 <chSchWakeupS>
 8006448:	2300      	movs	r3, #0
 800644a:	f383 8811 	msr	BASEPRI, r3
      n += 4;
 800644e:	3504      	adds	r5, #4
 8006450:	f004 fd4e 	bl	800aef0 <stGetCounter>
 8006454:	1b80      	subs	r0, r0, r6
    } while (chVTIsSystemTimeWithinX(start, end));
 8006456:	f242 730f 	movw	r3, #9999	; 0x270f
 800645a:	4298      	cmp	r0, r3
 800645c:	d9e1      	bls.n	8006422 <rt_test_011_004_execute+0x32>
  test_set_step(3);
 800645e:	4e0e      	ldr	r6, [pc, #56]	; (8006498 <rt_test_011_004_execute+0xa8>)
 8006460:	2303      	movs	r3, #3
 8006462:	6033      	str	r3, [r6, #0]
 8006464:	2320      	movs	r3, #32
 8006466:	f383 8811 	msr	BASEPRI, r3
    chSchWakeupS(tp, MSG_TIMEOUT);
 800646a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800646e:	4620      	mov	r0, r4
 8006470:	f004 f8e6 	bl	800a640 <chSchWakeupS>
 8006474:	2300      	movs	r3, #0
 8006476:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 800647a:	f7fd fcf1 	bl	8003e60 <test_wait_threads>
  test_set_step(4);
 800647e:	2304      	movs	r3, #4
 8006480:	6033      	str	r3, [r6, #0]
    test_print("--- Score : ");
 8006482:	480a      	ldr	r0, [pc, #40]	; (80064ac <rt_test_011_004_execute+0xbc>)
 8006484:	f7fa fa64 	bl	8000950 <test_print>
    test_printn(n * 2);
 8006488:	0068      	lsls	r0, r5, #1
 800648a:	f7fa fa81 	bl	8000990 <test_printn>
    test_println(" ctxswc/S");
 800648e:	4808      	ldr	r0, [pc, #32]	; (80064b0 <rt_test_011_004_execute+0xc0>)
 8006490:	f7fa fa6e 	bl	8000970 <test_println>
}
 8006494:	b002      	add	sp, #8
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	20002454 	.word	0x20002454
 800649c:	20001a18 	.word	0x20001a18
 80064a0:	08002241 	.word	0x08002241
 80064a4:	20001d40 	.word	0x20001d40
 80064a8:	2000246c 	.word	0x2000246c
 80064ac:	0800cc0c 	.word	0x0800cc0c
 80064b0:	0800cd90 	.word	0x0800cd90
	...

080064c0 <rt_test_011_003_execute>:
static void rt_test_011_003_execute(void) {
 80064c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064c4:	b083      	sub	sp, #12
  test_set_step(1);
 80064c6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80065b0 <rt_test_011_003_execute+0xf0>
 80064ca:	2301      	movs	r3, #1
 80064cc:	f8c8 3000 	str.w	r3, [r8]
  return ch.rlist.current;
 80064d0:	4f30      	ldr	r7, [pc, #192]	; (8006594 <rt_test_011_003_execute+0xd4>)
 80064d2:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 80064d4:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80064d6:	4d30      	ldr	r5, [pc, #192]	; (8006598 <rt_test_011_003_execute+0xd8>)
 80064d8:	2600      	movs	r6, #0
 80064da:	9600      	str	r6, [sp, #0]
 80064dc:	4b2f      	ldr	r3, [pc, #188]	; (800659c <rt_test_011_003_execute+0xdc>)
 80064de:	3201      	adds	r2, #1
 80064e0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80064e4:	4628      	mov	r0, r5
 80064e6:	f7ff fdc3 	bl	8006070 <chThdCreateStatic>
 80064ea:	4c2d      	ldr	r4, [pc, #180]	; (80065a0 <rt_test_011_003_execute+0xe0>)
 80064ec:	6020      	str	r0, [r4, #0]
  test_set_step(2);
 80064ee:	2302      	movs	r3, #2
 80064f0:	f8c8 3000 	str.w	r3, [r8]
  return ch.rlist.current;
 80064f4:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 80064f6:	689a      	ldr	r2, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 80064f8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80065b4 <rt_test_011_003_execute+0xf4>
 80064fc:	9600      	str	r6, [sp, #0]
 80064fe:	464b      	mov	r3, r9
 8006500:	3a02      	subs	r2, #2
 8006502:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006506:	1868      	adds	r0, r5, r1
 8006508:	f7ff fdb2 	bl	8006070 <chThdCreateStatic>
 800650c:	6060      	str	r0, [r4, #4]
  return ch.rlist.current;
 800650e:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 8006510:	689a      	ldr	r2, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 8006512:	9600      	str	r6, [sp, #0]
 8006514:	464b      	mov	r3, r9
 8006516:	3a03      	subs	r2, #3
 8006518:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800651c:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8006520:	f7ff fda6 	bl	8006070 <chThdCreateStatic>
 8006524:	60a0      	str	r0, [r4, #8]
  return ch.rlist.current;
 8006526:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 8006528:	689a      	ldr	r2, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800652a:	9600      	str	r6, [sp, #0]
 800652c:	464b      	mov	r3, r9
 800652e:	3a04      	subs	r2, #4
 8006530:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006534:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8006538:	f7ff fd9a 	bl	8006070 <chThdCreateStatic>
 800653c:	60e0      	str	r0, [r4, #12]
  return ch.rlist.current;
 800653e:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 8006540:	689a      	ldr	r2, [r3, #8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 8006542:	9600      	str	r6, [sp, #0]
 8006544:	464b      	mov	r3, r9
 8006546:	3a05      	subs	r2, #5
 8006548:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800654c:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8006550:	f7ff fd8e 	bl	8006070 <chThdCreateStatic>
 8006554:	6120      	str	r0, [r4, #16]
  test_set_step(3);
 8006556:	2303      	movs	r3, #3
 8006558:	f8c8 3000 	str.w	r3, [r8]
    n = msg_loop_test(threads[0]);
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	f7ff fbf7 	bl	8005d50 <msg_loop_test>
 8006562:	4604      	mov	r4, r0
    test_wait_threads();
 8006564:	f7fd fc7c 	bl	8003e60 <test_wait_threads>
  test_set_step(4);
 8006568:	2304      	movs	r3, #4
 800656a:	f8c8 3000 	str.w	r3, [r8]
    test_print("--- Score : ");
 800656e:	480d      	ldr	r0, [pc, #52]	; (80065a4 <rt_test_011_003_execute+0xe4>)
 8006570:	f7fa f9ee 	bl	8000950 <test_print>
    test_printn(n);
 8006574:	4620      	mov	r0, r4
 8006576:	f7fa fa0b 	bl	8000990 <test_printn>
    test_print(" msgs/S, ");
 800657a:	480b      	ldr	r0, [pc, #44]	; (80065a8 <rt_test_011_003_execute+0xe8>)
 800657c:	f7fa f9e8 	bl	8000950 <test_print>
    test_printn(n << 1);
 8006580:	0060      	lsls	r0, r4, #1
 8006582:	f7fa fa05 	bl	8000990 <test_printn>
    test_println(" ctxswc/S");
 8006586:	4809      	ldr	r0, [pc, #36]	; (80065ac <rt_test_011_003_execute+0xec>)
 8006588:	f7fa f9f2 	bl	8000970 <test_println>
}
 800658c:	b003      	add	sp, #12
 800658e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006592:	bf00      	nop
 8006594:	20001a18 	.word	0x20001a18
 8006598:	20001d40 	.word	0x20001d40
 800659c:	080022b1 	.word	0x080022b1
 80065a0:	2000246c 	.word	0x2000246c
 80065a4:	0800cc0c 	.word	0x0800cc0c
 80065a8:	0800cdbc 	.word	0x0800cdbc
 80065ac:	0800cd90 	.word	0x0800cd90
 80065b0:	20002454 	.word	0x20002454
 80065b4:	08009231 	.word	0x08009231
	...

080065c0 <rt_test_011_002_execute>:
static void rt_test_011_002_execute(void) {
 80065c0:	b530      	push	{r4, r5, lr}
 80065c2:	b083      	sub	sp, #12
  test_set_step(1);
 80065c4:	4d15      	ldr	r5, [pc, #84]	; (800661c <rt_test_011_002_execute+0x5c>)
 80065c6:	2301      	movs	r3, #1
 80065c8:	602b      	str	r3, [r5, #0]
  return ch.rlist.current;
 80065ca:	4b15      	ldr	r3, [pc, #84]	; (8006620 <rt_test_011_002_execute+0x60>)
 80065cc:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80065ce:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 80065d0:	2300      	movs	r3, #0
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	4b13      	ldr	r3, [pc, #76]	; (8006624 <rt_test_011_002_execute+0x64>)
 80065d6:	3201      	adds	r2, #1
 80065d8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80065dc:	4812      	ldr	r0, [pc, #72]	; (8006628 <rt_test_011_002_execute+0x68>)
 80065de:	f7ff fd47 	bl	8006070 <chThdCreateStatic>
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <rt_test_011_002_execute+0x6c>)
 80065e4:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 80065e6:	2302      	movs	r3, #2
 80065e8:	602b      	str	r3, [r5, #0]
    n = msg_loop_test(threads[0]);
 80065ea:	f7ff fbb1 	bl	8005d50 <msg_loop_test>
 80065ee:	4604      	mov	r4, r0
    test_wait_threads();
 80065f0:	f7fd fc36 	bl	8003e60 <test_wait_threads>
  test_set_step(3);
 80065f4:	2303      	movs	r3, #3
 80065f6:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 80065f8:	480d      	ldr	r0, [pc, #52]	; (8006630 <rt_test_011_002_execute+0x70>)
 80065fa:	f7fa f9a9 	bl	8000950 <test_print>
    test_printn(n);
 80065fe:	4620      	mov	r0, r4
 8006600:	f7fa f9c6 	bl	8000990 <test_printn>
    test_print(" msgs/S, ");
 8006604:	480b      	ldr	r0, [pc, #44]	; (8006634 <rt_test_011_002_execute+0x74>)
 8006606:	f7fa f9a3 	bl	8000950 <test_print>
    test_printn(n << 1);
 800660a:	0060      	lsls	r0, r4, #1
 800660c:	f7fa f9c0 	bl	8000990 <test_printn>
    test_println(" ctxswc/S");
 8006610:	4809      	ldr	r0, [pc, #36]	; (8006638 <rt_test_011_002_execute+0x78>)
 8006612:	f7fa f9ad 	bl	8000970 <test_println>
}
 8006616:	b003      	add	sp, #12
 8006618:	bd30      	pop	{r4, r5, pc}
 800661a:	bf00      	nop
 800661c:	20002454 	.word	0x20002454
 8006620:	20001a18 	.word	0x20001a18
 8006624:	080022b1 	.word	0x080022b1
 8006628:	20001d40 	.word	0x20001d40
 800662c:	2000246c 	.word	0x2000246c
 8006630:	0800cc0c 	.word	0x0800cc0c
 8006634:	0800cdbc 	.word	0x0800cdbc
 8006638:	0800cd90 	.word	0x0800cd90
 800663c:	00000000 	.word	0x00000000

08006640 <rt_test_011_001_execute>:
static void rt_test_011_001_execute(void) {
 8006640:	b530      	push	{r4, r5, lr}
 8006642:	b083      	sub	sp, #12
  test_set_step(1);
 8006644:	4d15      	ldr	r5, [pc, #84]	; (800669c <rt_test_011_001_execute+0x5c>)
 8006646:	2301      	movs	r3, #1
 8006648:	602b      	str	r3, [r5, #0]
  return ch.rlist.current;
 800664a:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <rt_test_011_001_execute+0x60>)
 800664c:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 800664e:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 8006650:	2300      	movs	r3, #0
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	4b13      	ldr	r3, [pc, #76]	; (80066a4 <rt_test_011_001_execute+0x64>)
 8006656:	3a01      	subs	r2, #1
 8006658:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800665c:	4812      	ldr	r0, [pc, #72]	; (80066a8 <rt_test_011_001_execute+0x68>)
 800665e:	f7ff fd07 	bl	8006070 <chThdCreateStatic>
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <rt_test_011_001_execute+0x6c>)
 8006664:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 8006666:	2302      	movs	r3, #2
 8006668:	602b      	str	r3, [r5, #0]
    n = msg_loop_test(threads[0]);
 800666a:	f7ff fb71 	bl	8005d50 <msg_loop_test>
 800666e:	4604      	mov	r4, r0
    test_wait_threads();
 8006670:	f7fd fbf6 	bl	8003e60 <test_wait_threads>
  test_set_step(3);
 8006674:	2303      	movs	r3, #3
 8006676:	602b      	str	r3, [r5, #0]
    test_print("--- Score : ");
 8006678:	480d      	ldr	r0, [pc, #52]	; (80066b0 <rt_test_011_001_execute+0x70>)
 800667a:	f7fa f969 	bl	8000950 <test_print>
    test_printn(n);
 800667e:	4620      	mov	r0, r4
 8006680:	f7fa f986 	bl	8000990 <test_printn>
    test_print(" msgs/S, ");
 8006684:	480b      	ldr	r0, [pc, #44]	; (80066b4 <rt_test_011_001_execute+0x74>)
 8006686:	f7fa f963 	bl	8000950 <test_print>
    test_printn(n << 1);
 800668a:	0060      	lsls	r0, r4, #1
 800668c:	f7fa f980 	bl	8000990 <test_printn>
    test_println(" ctxswc/S");
 8006690:	4809      	ldr	r0, [pc, #36]	; (80066b8 <rt_test_011_001_execute+0x78>)
 8006692:	f7fa f96d 	bl	8000970 <test_println>
}
 8006696:	b003      	add	sp, #12
 8006698:	bd30      	pop	{r4, r5, pc}
 800669a:	bf00      	nop
 800669c:	20002454 	.word	0x20002454
 80066a0:	20001a18 	.word	0x20001a18
 80066a4:	080022b1 	.word	0x080022b1
 80066a8:	20001d40 	.word	0x20001d40
 80066ac:	2000246c 	.word	0x2000246c
 80066b0:	0800cc0c 	.word	0x0800cc0c
 80066b4:	0800cdbc 	.word	0x0800cdbc
 80066b8:	0800cd90 	.word	0x0800cd90
 80066bc:	00000000 	.word	0x00000000

080066c0 <rt_test_009_007_execute>:

static void rt_test_009_007_execute(void) {
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	b08c      	sub	sp, #48	; 0x30
  event_listener_t el1, el2;
  systime_t target_time;

  /* [9.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 80066c4:	4d2f      	ldr	r5, [pc, #188]	; (8006784 <rt_test_009_007_execute+0xc4>)
 80066c6:	2201      	movs	r2, #1
 80066c8:	602a      	str	r2, [r5, #0]
  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 80066ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066ce:	a907      	add	r1, sp, #28
 80066d0:	482d      	ldr	r0, [pc, #180]	; (8006788 <rt_test_009_007_execute+0xc8>)
 80066d2:	f7fb fa5d 	bl	8001b90 <chEvtRegisterMaskWithFlags>
 80066d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066da:	2204      	movs	r2, #4
 80066dc:	a902      	add	r1, sp, #8
 80066de:	482b      	ldr	r0, [pc, #172]	; (800678c <rt_test_009_007_execute+0xcc>)
 80066e0:	f7fb fa56 	bl	8001b90 <chEvtRegisterMaskWithFlags>
  test_end_step(1);

  /* [9.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 80066e4:	2302      	movs	r3, #2
 80066e6:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80066e8:	f7ff fa5a 	bl	8005ba0 <test_wait_tick>
 80066ec:	4604      	mov	r4, r0
  return systime + (systime_t)interval;
 80066ee:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4
  return ch.rlist.current;
 80066f2:	4b27      	ldr	r3, [pc, #156]	; (8006790 <rt_test_009_007_execute+0xd0>)
 80066f4:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80066f6:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80066f8:	4b26      	ldr	r3, [pc, #152]	; (8006794 <rt_test_009_007_execute+0xd4>)
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	4b26      	ldr	r3, [pc, #152]	; (8006798 <rt_test_009_007_execute+0xd8>)
 80066fe:	3a01      	subs	r2, #1
 8006700:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006704:	4825      	ldr	r0, [pc, #148]	; (800679c <rt_test_009_007_execute+0xdc>)
 8006706:	f7ff fcb3 	bl	8006070 <chThdCreateStatic>
 800670a:	4b25      	ldr	r3, [pc, #148]	; (80067a0 <rt_test_009_007_execute+0xe0>)
 800670c:	6018      	str	r0, [r3, #0]
  test_end_step(2);

  /* [9.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 800670e:	2303      	movs	r3, #3
 8006710:	602b      	str	r3, [r5, #0]
  {
    m = chEvtWaitAll(5);
 8006712:	2005      	movs	r0, #5
 8006714:	f7fb fdf4 	bl	8002300 <chEvtWaitAll>
    test_assert_time_window(target_time,
 8006718:	4a22      	ldr	r2, [pc, #136]	; (80067a4 <rt_test_009_007_execute+0xe4>)
 800671a:	f504 7102 	add.w	r1, r4, #520	; 0x208
 800671e:	4630      	mov	r0, r6
 8006720:	f7fb fd1e 	bl	8002160 <_test_assert_time_window>
 8006724:	b108      	cbz	r0, 800672a <rt_test_009_007_execute+0x6a>
    chEvtUnregister(&es2, &el2);
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
  }
  test_end_step(4);
}
 8006726:	b00c      	add	sp, #48	; 0x30
 8006728:	bd70      	pop	{r4, r5, r6, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800672a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800672e:	f7fb f9d7 	bl	8001ae0 <chEvtGetAndClearEvents>
    test_assert(m == 0, "stuck event");
 8006732:	491d      	ldr	r1, [pc, #116]	; (80067a8 <rt_test_009_007_execute+0xe8>)
 8006734:	fab0 f080 	clz	r0, r0
 8006738:	0940      	lsrs	r0, r0, #5
 800673a:	f7fa fd59 	bl	80011f0 <_test_assert>
 800673e:	2800      	cmp	r0, #0
 8006740:	d1f1      	bne.n	8006726 <rt_test_009_007_execute+0x66>
    test_wait_threads();
 8006742:	f7fd fb8d 	bl	8003e60 <test_wait_threads>
  test_set_step(4);
 8006746:	2204      	movs	r2, #4
 8006748:	602a      	str	r2, [r5, #0]
    chEvtUnregister(&es1, &el1);
 800674a:	4c0f      	ldr	r4, [pc, #60]	; (8006788 <rt_test_009_007_execute+0xc8>)
 800674c:	a907      	add	r1, sp, #28
 800674e:	4620      	mov	r0, r4
 8006750:	f7fb fa0e 	bl	8001b70 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 8006754:	a902      	add	r1, sp, #8
 8006756:	480d      	ldr	r0, [pc, #52]	; (800678c <rt_test_009_007_execute+0xcc>)
 8006758:	f7fb fa0a 	bl	8001b70 <chEvtUnregister>
  return (bool)(esp != (event_source_t *)esp->next);
 800675c:	6820      	ldr	r0, [r4, #0]
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
 800675e:	4913      	ldr	r1, [pc, #76]	; (80067ac <rt_test_009_007_execute+0xec>)
 8006760:	42a0      	cmp	r0, r4
 8006762:	bf14      	ite	ne
 8006764:	2000      	movne	r0, #0
 8006766:	2001      	moveq	r0, #1
 8006768:	f7fa fd42 	bl	80011f0 <_test_assert>
 800676c:	2800      	cmp	r0, #0
 800676e:	d1da      	bne.n	8006726 <rt_test_009_007_execute+0x66>
 8006770:	4b06      	ldr	r3, [pc, #24]	; (800678c <rt_test_009_007_execute+0xcc>)
 8006772:	6818      	ldr	r0, [r3, #0]
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 8006774:	490d      	ldr	r1, [pc, #52]	; (80067ac <rt_test_009_007_execute+0xec>)
 8006776:	4298      	cmp	r0, r3
 8006778:	bf14      	ite	ne
 800677a:	2000      	movne	r0, #0
 800677c:	2001      	moveq	r0, #1
 800677e:	f7fa fd37 	bl	80011f0 <_test_assert>
 8006782:	e7d0      	b.n	8006726 <rt_test_009_007_execute+0x66>
 8006784:	20002454 	.word	0x20002454
 8006788:	20000808 	.word	0x20000808
 800678c:	2000080c 	.word	0x2000080c
 8006790:	20001a18 	.word	0x20001a18
 8006794:	0800c978 	.word	0x0800c978
 8006798:	08007c21 	.word	0x08007c21
 800679c:	20001d40 	.word	0x20001d40
 80067a0:	2000246c 	.word	0x2000246c
 80067a4:	0800cbe4 	.word	0x0800cbe4
 80067a8:	0800cdc8 	.word	0x0800cdc8
 80067ac:	0800c238 	.word	0x0800c238

080067b0 <rt_test_009_005_execute>:
static void rt_test_009_005_execute(void) {
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	b082      	sub	sp, #8
  test_set_step(1);
 80067b4:	4c2f      	ldr	r4, [pc, #188]	; (8006874 <rt_test_009_005_execute+0xc4>)
 80067b6:	2301      	movs	r3, #1
 80067b8:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(5);
 80067ba:	2005      	movs	r0, #5
 80067bc:	f7fb f970 	bl	8001aa0 <chEvtAddEvents>
  test_set_step(2);
 80067c0:	2302      	movs	r3, #2
 80067c2:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAll(5);
 80067c4:	2005      	movs	r0, #5
 80067c6:	f7fb fd9b 	bl	8002300 <chEvtWaitAll>
    test_assert(m == 5, "unexpected pending bit");
 80067ca:	492b      	ldr	r1, [pc, #172]	; (8006878 <rt_test_009_005_execute+0xc8>)
 80067cc:	2805      	cmp	r0, #5
 80067ce:	bf14      	ite	ne
 80067d0:	2000      	movne	r0, #0
 80067d2:	2001      	moveq	r0, #1
 80067d4:	f7fa fd0c 	bl	80011f0 <_test_assert>
 80067d8:	b108      	cbz	r0, 80067de <rt_test_009_005_execute+0x2e>
}
 80067da:	b002      	add	sp, #8
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80067de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067e2:	f7fb f97d 	bl	8001ae0 <chEvtGetAndClearEvents>
    test_assert(m == 0, "stuck event");
 80067e6:	4925      	ldr	r1, [pc, #148]	; (800687c <rt_test_009_005_execute+0xcc>)
 80067e8:	fab0 f080 	clz	r0, r0
 80067ec:	0940      	lsrs	r0, r0, #5
 80067ee:	f7fa fcff 	bl	80011f0 <_test_assert>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d1f1      	bne.n	80067da <rt_test_009_005_execute+0x2a>
  test_set_step(3);
 80067f6:	4625      	mov	r5, r4
 80067f8:	2303      	movs	r3, #3
 80067fa:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(4);
 80067fc:	2004      	movs	r0, #4
 80067fe:	f7fb f94f 	bl	8001aa0 <chEvtAddEvents>
  test_set_step(4);
 8006802:	2304      	movs	r3, #4
 8006804:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8006806:	f7ff f9cb 	bl	8005ba0 <test_wait_tick>
 800680a:	4604      	mov	r4, r0
 800680c:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4
  return ch.rlist.current;
 8006810:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <rt_test_009_005_execute+0xd0>)
 8006812:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8006814:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	4b1a      	ldr	r3, [pc, #104]	; (8006884 <rt_test_009_005_execute+0xd4>)
 800681a:	3a01      	subs	r2, #1
 800681c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006820:	4819      	ldr	r0, [pc, #100]	; (8006888 <rt_test_009_005_execute+0xd8>)
 8006822:	f7ff fc25 	bl	8006070 <chThdCreateStatic>
 8006826:	4b19      	ldr	r3, [pc, #100]	; (800688c <rt_test_009_005_execute+0xdc>)
 8006828:	6018      	str	r0, [r3, #0]
  test_set_step(5);
 800682a:	2005      	movs	r0, #5
 800682c:	6028      	str	r0, [r5, #0]
    m = chEvtWaitAll(5);
 800682e:	f7fb fd67 	bl	8002300 <chEvtWaitAll>
 8006832:	4605      	mov	r5, r0
    test_assert_time_window(target_time,
 8006834:	4a16      	ldr	r2, [pc, #88]	; (8006890 <rt_test_009_005_execute+0xe0>)
 8006836:	f504 7102 	add.w	r1, r4, #520	; 0x208
 800683a:	4630      	mov	r0, r6
 800683c:	f7fb fc90 	bl	8002160 <_test_assert_time_window>
 8006840:	2800      	cmp	r0, #0
 8006842:	d1ca      	bne.n	80067da <rt_test_009_005_execute+0x2a>
    test_assert(m == 5, "event flags error");
 8006844:	4913      	ldr	r1, [pc, #76]	; (8006894 <rt_test_009_005_execute+0xe4>)
 8006846:	2d05      	cmp	r5, #5
 8006848:	bf14      	ite	ne
 800684a:	2000      	movne	r0, #0
 800684c:	2001      	moveq	r0, #1
 800684e:	f7fa fccf 	bl	80011f0 <_test_assert>
 8006852:	2800      	cmp	r0, #0
 8006854:	d1c1      	bne.n	80067da <rt_test_009_005_execute+0x2a>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800685a:	f7fb f941 	bl	8001ae0 <chEvtGetAndClearEvents>
    test_assert(m == 0, "stuck event");
 800685e:	4907      	ldr	r1, [pc, #28]	; (800687c <rt_test_009_005_execute+0xcc>)
 8006860:	fab0 f080 	clz	r0, r0
 8006864:	0940      	lsrs	r0, r0, #5
 8006866:	f7fa fcc3 	bl	80011f0 <_test_assert>
 800686a:	2800      	cmp	r0, #0
 800686c:	d1b5      	bne.n	80067da <rt_test_009_005_execute+0x2a>
    test_wait_threads();
 800686e:	f7fd faf7 	bl	8003e60 <test_wait_threads>
  test_end_step(5);
 8006872:	e7b2      	b.n	80067da <rt_test_009_005_execute+0x2a>
 8006874:	20002454 	.word	0x20002454
 8006878:	0800cdd4 	.word	0x0800cdd4
 800687c:	0800cdc8 	.word	0x0800cdc8
 8006880:	20001a18 	.word	0x20001a18
 8006884:	08005961 	.word	0x08005961
 8006888:	20001d40 	.word	0x20001d40
 800688c:	2000246c 	.word	0x2000246c
 8006890:	0800cbe4 	.word	0x0800cbe4
 8006894:	0800cdec 	.word	0x0800cdec
	...

080068a0 <rt_test_009_004_execute>:
static void rt_test_009_004_execute(void) {
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	b082      	sub	sp, #8
  test_set_step(1);
 80068a4:	4c2e      	ldr	r4, [pc, #184]	; (8006960 <rt_test_009_004_execute+0xc0>)
 80068a6:	2301      	movs	r3, #1
 80068a8:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(5);
 80068aa:	2005      	movs	r0, #5
 80068ac:	f7fb f8f8 	bl	8001aa0 <chEvtAddEvents>
  test_set_step(2);
 80068b0:	2302      	movs	r3, #2
 80068b2:	6023      	str	r3, [r4, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068b8:	f7fb fd42 	bl	8002340 <chEvtWaitAny>
    test_assert(m == 5, "unexpected pending bit");
 80068bc:	4929      	ldr	r1, [pc, #164]	; (8006964 <rt_test_009_004_execute+0xc4>)
 80068be:	2805      	cmp	r0, #5
 80068c0:	bf14      	ite	ne
 80068c2:	2000      	movne	r0, #0
 80068c4:	2001      	moveq	r0, #1
 80068c6:	f7fa fc93 	bl	80011f0 <_test_assert>
 80068ca:	b108      	cbz	r0, 80068d0 <rt_test_009_004_execute+0x30>
}
 80068cc:	b002      	add	sp, #8
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80068d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068d4:	f7fb f904 	bl	8001ae0 <chEvtGetAndClearEvents>
    test_assert(m == 0, "stuck event");
 80068d8:	4923      	ldr	r1, [pc, #140]	; (8006968 <rt_test_009_004_execute+0xc8>)
 80068da:	fab0 f080 	clz	r0, r0
 80068de:	0940      	lsrs	r0, r0, #5
 80068e0:	f7fa fc86 	bl	80011f0 <_test_assert>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d1f1      	bne.n	80068cc <rt_test_009_004_execute+0x2c>
  test_set_step(3);
 80068e8:	4625      	mov	r5, r4
 80068ea:	2303      	movs	r3, #3
 80068ec:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80068ee:	f7ff f957 	bl	8005ba0 <test_wait_tick>
 80068f2:	4604      	mov	r4, r0
 80068f4:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4
  return ch.rlist.current;
 80068f8:	4b1c      	ldr	r3, [pc, #112]	; (800696c <rt_test_009_004_execute+0xcc>)
 80068fa:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80068fc:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	4b1b      	ldr	r3, [pc, #108]	; (8006970 <rt_test_009_004_execute+0xd0>)
 8006902:	3a01      	subs	r2, #1
 8006904:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006908:	481a      	ldr	r0, [pc, #104]	; (8006974 <rt_test_009_004_execute+0xd4>)
 800690a:	f7ff fbb1 	bl	8006070 <chThdCreateStatic>
 800690e:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <rt_test_009_004_execute+0xd8>)
 8006910:	6018      	str	r0, [r3, #0]
  test_set_step(4);
 8006912:	2304      	movs	r3, #4
 8006914:	602b      	str	r3, [r5, #0]
    m = chEvtWaitAny(ALL_EVENTS);
 8006916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800691a:	f7fb fd11 	bl	8002340 <chEvtWaitAny>
 800691e:	4605      	mov	r5, r0
    test_assert_time_window(target_time,
 8006920:	4a16      	ldr	r2, [pc, #88]	; (800697c <rt_test_009_004_execute+0xdc>)
 8006922:	f504 7102 	add.w	r1, r4, #520	; 0x208
 8006926:	4630      	mov	r0, r6
 8006928:	f7fb fc1a 	bl	8002160 <_test_assert_time_window>
 800692c:	2800      	cmp	r0, #0
 800692e:	d1cd      	bne.n	80068cc <rt_test_009_004_execute+0x2c>
    test_assert(m == 1, "event flag error");
 8006930:	4913      	ldr	r1, [pc, #76]	; (8006980 <rt_test_009_004_execute+0xe0>)
 8006932:	2d01      	cmp	r5, #1
 8006934:	bf14      	ite	ne
 8006936:	2000      	movne	r0, #0
 8006938:	2001      	moveq	r0, #1
 800693a:	f7fa fc59 	bl	80011f0 <_test_assert>
 800693e:	2800      	cmp	r0, #0
 8006940:	d1c4      	bne.n	80068cc <rt_test_009_004_execute+0x2c>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006946:	f7fb f8cb 	bl	8001ae0 <chEvtGetAndClearEvents>
    test_assert(m == 0, "stuck event");
 800694a:	4907      	ldr	r1, [pc, #28]	; (8006968 <rt_test_009_004_execute+0xc8>)
 800694c:	fab0 f080 	clz	r0, r0
 8006950:	0940      	lsrs	r0, r0, #5
 8006952:	f7fa fc4d 	bl	80011f0 <_test_assert>
 8006956:	2800      	cmp	r0, #0
 8006958:	d1b8      	bne.n	80068cc <rt_test_009_004_execute+0x2c>
    test_wait_threads();
 800695a:	f7fd fa81 	bl	8003e60 <test_wait_threads>
  test_end_step(4);
 800695e:	e7b5      	b.n	80068cc <rt_test_009_004_execute+0x2c>
 8006960:	20002454 	.word	0x20002454
 8006964:	0800cdd4 	.word	0x0800cdd4
 8006968:	0800cdc8 	.word	0x0800cdc8
 800696c:	20001a18 	.word	0x20001a18
 8006970:	08005961 	.word	0x08005961
 8006974:	20001d40 	.word	0x20001d40
 8006978:	2000246c 	.word	0x2000246c
 800697c:	0800cbe4 	.word	0x0800cbe4
 8006980:	0800ce00 	.word	0x0800ce00
	...

08006990 <rt_test_009_003_execute>:
static void rt_test_009_003_execute(void) {
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	b082      	sub	sp, #8
  test_set_step(1);
 8006994:	4c3b      	ldr	r4, [pc, #236]	; (8006a84 <rt_test_009_003_execute+0xf4>)
 8006996:	2301      	movs	r3, #1
 8006998:	6023      	str	r3, [r4, #0]
    chEvtAddEvents(7);
 800699a:	2007      	movs	r0, #7
 800699c:	f7fb f880 	bl	8001aa0 <chEvtAddEvents>
  test_set_step(2);
 80069a0:	2302      	movs	r3, #2
 80069a2:	6023      	str	r3, [r4, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069a8:	f7fb fcea 	bl	8002380 <chEvtWaitOne>
    test_assert(m == 1, "single event error");
 80069ac:	4936      	ldr	r1, [pc, #216]	; (8006a88 <rt_test_009_003_execute+0xf8>)
 80069ae:	2801      	cmp	r0, #1
 80069b0:	bf14      	ite	ne
 80069b2:	2000      	movne	r0, #0
 80069b4:	2001      	moveq	r0, #1
 80069b6:	f7fa fc1b 	bl	80011f0 <_test_assert>
 80069ba:	b108      	cbz	r0, 80069c0 <rt_test_009_003_execute+0x30>
}
 80069bc:	b002      	add	sp, #8
 80069be:	bd70      	pop	{r4, r5, r6, pc}
    m = chEvtWaitOne(ALL_EVENTS);
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069c4:	f7fb fcdc 	bl	8002380 <chEvtWaitOne>
    test_assert(m == 2, "single event error");
 80069c8:	492f      	ldr	r1, [pc, #188]	; (8006a88 <rt_test_009_003_execute+0xf8>)
 80069ca:	2802      	cmp	r0, #2
 80069cc:	bf14      	ite	ne
 80069ce:	2000      	movne	r0, #0
 80069d0:	2001      	moveq	r0, #1
 80069d2:	f7fa fc0d 	bl	80011f0 <_test_assert>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d1f0      	bne.n	80069bc <rt_test_009_003_execute+0x2c>
    m = chEvtWaitOne(ALL_EVENTS);
 80069da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069de:	f7fb fccf 	bl	8002380 <chEvtWaitOne>
    test_assert(m == 4, "single event error");
 80069e2:	4929      	ldr	r1, [pc, #164]	; (8006a88 <rt_test_009_003_execute+0xf8>)
 80069e4:	2804      	cmp	r0, #4
 80069e6:	bf14      	ite	ne
 80069e8:	2000      	movne	r0, #0
 80069ea:	2001      	moveq	r0, #1
 80069ec:	f7fa fc00 	bl	80011f0 <_test_assert>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d1e3      	bne.n	80069bc <rt_test_009_003_execute+0x2c>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80069f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069f8:	f7fb f872 	bl	8001ae0 <chEvtGetAndClearEvents>
    test_assert(m == 0, "stuck event");
 80069fc:	4923      	ldr	r1, [pc, #140]	; (8006a8c <rt_test_009_003_execute+0xfc>)
 80069fe:	fab0 f080 	clz	r0, r0
 8006a02:	0940      	lsrs	r0, r0, #5
 8006a04:	f7fa fbf4 	bl	80011f0 <_test_assert>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d1d7      	bne.n	80069bc <rt_test_009_003_execute+0x2c>
  test_set_step(3);
 8006a0c:	4625      	mov	r5, r4
 8006a0e:	2303      	movs	r3, #3
 8006a10:	6023      	str	r3, [r4, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8006a12:	f7ff f8c5 	bl	8005ba0 <test_wait_tick>
 8006a16:	4604      	mov	r4, r0
 8006a18:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4
  return ch.rlist.current;
 8006a1c:	4b1c      	ldr	r3, [pc, #112]	; (8006a90 <rt_test_009_003_execute+0x100>)
 8006a1e:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8006a20:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <rt_test_009_003_execute+0x104>)
 8006a26:	3a01      	subs	r2, #1
 8006a28:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006a2c:	481a      	ldr	r0, [pc, #104]	; (8006a98 <rt_test_009_003_execute+0x108>)
 8006a2e:	f7ff fb1f 	bl	8006070 <chThdCreateStatic>
 8006a32:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <rt_test_009_003_execute+0x10c>)
 8006a34:	6018      	str	r0, [r3, #0]
  test_set_step(4);
 8006a36:	2304      	movs	r3, #4
 8006a38:	602b      	str	r3, [r5, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8006a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a3e:	f7fb fc9f 	bl	8002380 <chEvtWaitOne>
 8006a42:	4605      	mov	r5, r0
    test_assert_time_window(target_time,
 8006a44:	4a16      	ldr	r2, [pc, #88]	; (8006aa0 <rt_test_009_003_execute+0x110>)
 8006a46:	f504 7102 	add.w	r1, r4, #520	; 0x208
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f7fb fb88 	bl	8002160 <_test_assert_time_window>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d1b3      	bne.n	80069bc <rt_test_009_003_execute+0x2c>
    test_assert(m == 1, "event flag error");
 8006a54:	4913      	ldr	r1, [pc, #76]	; (8006aa4 <rt_test_009_003_execute+0x114>)
 8006a56:	2d01      	cmp	r5, #1
 8006a58:	bf14      	ite	ne
 8006a5a:	2000      	movne	r0, #0
 8006a5c:	2001      	moveq	r0, #1
 8006a5e:	f7fa fbc7 	bl	80011f0 <_test_assert>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d1aa      	bne.n	80069bc <rt_test_009_003_execute+0x2c>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8006a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a6a:	f7fb f839 	bl	8001ae0 <chEvtGetAndClearEvents>
    test_assert(m == 0, "stuck event");
 8006a6e:	4907      	ldr	r1, [pc, #28]	; (8006a8c <rt_test_009_003_execute+0xfc>)
 8006a70:	fab0 f080 	clz	r0, r0
 8006a74:	0940      	lsrs	r0, r0, #5
 8006a76:	f7fa fbbb 	bl	80011f0 <_test_assert>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d19e      	bne.n	80069bc <rt_test_009_003_execute+0x2c>
    test_wait_threads();
 8006a7e:	f7fd f9ef 	bl	8003e60 <test_wait_threads>
  test_end_step(4);
 8006a82:	e79b      	b.n	80069bc <rt_test_009_003_execute+0x2c>
 8006a84:	20002454 	.word	0x20002454
 8006a88:	0800ce14 	.word	0x0800ce14
 8006a8c:	0800cdc8 	.word	0x0800cdc8
 8006a90:	20001a18 	.word	0x20001a18
 8006a94:	08005961 	.word	0x08005961
 8006a98:	20001d40 	.word	0x20001d40
 8006a9c:	2000246c 	.word	0x2000246c
 8006aa0:	0800cbe4 	.word	0x0800cbe4
 8006aa4:	0800ce00 	.word	0x0800ce00
	...

08006ab0 <rt_test_008_001_execute>:
 * - [8.1.1] Starting the messenger thread.
 * - [8.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_008_001_execute(void) {
 8006ab0:	b530      	push	{r4, r5, lr}
 8006ab2:	b083      	sub	sp, #12
  thread_t *tp;
  msg_t msg;

  /* [8.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8006ab4:	4c16      	ldr	r4, [pc, #88]	; (8006b10 <rt_test_008_001_execute+0x60>)
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	6023      	str	r3, [r4, #0]
  return ch.rlist.current;
 8006aba:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <rt_test_008_001_execute+0x64>)
 8006abc:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8006abe:	689a      	ldr	r2, [r3, #8]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	4b15      	ldr	r3, [pc, #84]	; (8006b18 <rt_test_008_001_execute+0x68>)
 8006ac4:	3201      	adds	r2, #1
 8006ac6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006aca:	4814      	ldr	r0, [pc, #80]	; (8006b1c <rt_test_008_001_execute+0x6c>)
 8006acc:	f7ff fad0 	bl	8006070 <chThdCreateStatic>
 8006ad0:	4b13      	ldr	r3, [pc, #76]	; (8006b20 <rt_test_008_001_execute+0x70>)
 8006ad2:	6018      	str	r0, [r3, #0]
  }
  test_end_step(1);

  /* [8.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	6023      	str	r3, [r4, #0]
  {
    unsigned i;

    for (i = 0; i < 4; i++) {
 8006ad8:	2400      	movs	r4, #0
 8006ada:	e00f      	b.n	8006afc <rt_test_008_001_execute+0x4c>
 8006adc:	2320      	movs	r3, #32
 8006ade:	f383 8811 	msr	BASEPRI, r3
  tp = chMsgWaitS();
 8006ae2:	f7fb fbc5 	bl	8002270 <chMsgWaitS>
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f382 8811 	msr	BASEPRI, r2
  return tp->u.sentmsg;
 8006aec:	6a45      	ldr	r5, [r0, #36]	; 0x24
      tp = chMsgWait();
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7fb fb46 	bl	8002180 <chMsgRelease>
      test_emit_token(msg);
 8006af4:	b2e8      	uxtb	r0, r5
 8006af6:	f7f9 fe8b 	bl	8000810 <test_emit_token>
    for (i = 0; i < 4; i++) {
 8006afa:	3401      	adds	r4, #1
 8006afc:	2c03      	cmp	r4, #3
 8006afe:	d9ed      	bls.n	8006adc <rt_test_008_001_execute+0x2c>
    }
    test_wait_threads();
 8006b00:	f7fd f9ae 	bl	8003e60 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8006b04:	4907      	ldr	r1, [pc, #28]	; (8006b24 <rt_test_008_001_execute+0x74>)
 8006b06:	4808      	ldr	r0, [pc, #32]	; (8006b28 <rt_test_008_001_execute+0x78>)
 8006b08:	f7fa fc22 	bl	8001350 <_test_assert_sequence>
  }
  test_end_step(2);
}
 8006b0c:	b003      	add	sp, #12
 8006b0e:	bd30      	pop	{r4, r5, pc}
 8006b10:	20002454 	.word	0x20002454
 8006b14:	20001a18 	.word	0x20001a18
 8006b18:	08002f71 	.word	0x08002f71
 8006b1c:	20001d40 	.word	0x20001d40
 8006b20:	2000246c 	.word	0x2000246c
 8006b24:	0800c214 	.word	0x0800c214
 8006b28:	0800c9d8 	.word	0x0800c9d8
 8006b2c:	00000000 	.word	0x00000000

08006b30 <rt_test_007_009_execute>:
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}

static void rt_test_007_009_execute(void) {
 8006b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b32:	b083      	sub	sp, #12
  return ch.rlist.current;
 8006b34:	4b1f      	ldr	r3, [pc, #124]	; (8006bb4 <rt_test_007_009_execute+0x84>)
 8006b36:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8006b38:	689f      	ldr	r7, [r3, #8]
  }
  test_end_step(1);

  /* [7.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8006b3a:	4c1f      	ldr	r4, [pc, #124]	; (8006bb8 <rt_test_007_009_execute+0x88>)
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	6023      	str	r3, [r4, #0]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8006b40:	4e1e      	ldr	r6, [pc, #120]	; (8006bbc <rt_test_007_009_execute+0x8c>)
 8006b42:	4b1f      	ldr	r3, [pc, #124]	; (8006bc0 <rt_test_007_009_execute+0x90>)
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	4b1f      	ldr	r3, [pc, #124]	; (8006bc4 <rt_test_007_009_execute+0x94>)
 8006b48:	1c7a      	adds	r2, r7, #1
 8006b4a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f7ff fa8e 	bl	8006070 <chThdCreateStatic>
 8006b54:	4d1c      	ldr	r5, [pc, #112]	; (8006bc8 <rt_test_007_009_execute+0x98>)
 8006b56:	6028      	str	r0, [r5, #0]
  }
  test_end_step(2);

  /* [7.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 8006b58:	2303      	movs	r3, #3
 8006b5a:	6023      	str	r3, [r4, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8006b5c:	4b1b      	ldr	r3, [pc, #108]	; (8006bcc <rt_test_007_009_execute+0x9c>)
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	4b1b      	ldr	r3, [pc, #108]	; (8006bd0 <rt_test_007_009_execute+0xa0>)
 8006b62:	1cba      	adds	r2, r7, #2
 8006b64:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006b68:	1870      	adds	r0, r6, r1
 8006b6a:	f7ff fa81 	bl	8006070 <chThdCreateStatic>
 8006b6e:	6068      	str	r0, [r5, #4]
  }
  test_end_step(3);

  /* [7.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 8006b70:	2304      	movs	r3, #4
 8006b72:	6023      	str	r3, [r4, #0]
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8006b74:	4b17      	ldr	r3, [pc, #92]	; (8006bd4 <rt_test_007_009_execute+0xa4>)
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	4b17      	ldr	r3, [pc, #92]	; (8006bd8 <rt_test_007_009_execute+0xa8>)
 8006b7a:	1cfa      	adds	r2, r7, #3
 8006b7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006b80:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8006b84:	f7ff fa74 	bl	8006070 <chThdCreateStatic>
 8006b88:	60a8      	str	r0, [r5, #8]
  test_end_step(4);

  /* [7.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8006b8a:	2305      	movs	r3, #5
 8006b8c:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8006b8e:	4d13      	ldr	r5, [pc, #76]	; (8006bdc <rt_test_007_009_execute+0xac>)
 8006b90:	4628      	mov	r0, r5
 8006b92:	f7fb fb05 	bl	80021a0 <chCondSignal>
  }
  test_end_step(5);

  /* [7.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8006b96:	2306      	movs	r3, #6
 8006b98:	6023      	str	r3, [r4, #0]
  {
    chCondSignal(&c1);
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f7fb fb00 	bl	80021a0 <chCondSignal>
  }
  test_end_step(6);

  /* [7.9.7] Checking the order of operations.*/
  test_set_step(7);
 8006ba0:	2307      	movs	r3, #7
 8006ba2:	6023      	str	r3, [r4, #0]
  {
    test_wait_threads();
 8006ba4:	f7fd f95c 	bl	8003e60 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
 8006ba8:	490d      	ldr	r1, [pc, #52]	; (8006be0 <rt_test_007_009_execute+0xb0>)
 8006baa:	480e      	ldr	r0, [pc, #56]	; (8006be4 <rt_test_007_009_execute+0xb4>)
 8006bac:	f7fa fbd0 	bl	8001350 <_test_assert_sequence>
  }
  test_end_step(7);
}
 8006bb0:	b003      	add	sp, #12
 8006bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb4:	20001a18 	.word	0x20001a18
 8006bb8:	20002454 	.word	0x20002454
 8006bbc:	20001d40 	.word	0x20001d40
 8006bc0:	0800c978 	.word	0x0800c978
 8006bc4:	08005501 	.word	0x08005501
 8006bc8:	2000246c 	.word	0x2000246c
 8006bcc:	0800c990 	.word	0x0800c990
 8006bd0:	080033f1 	.word	0x080033f1
 8006bd4:	0800c984 	.word	0x0800c984
 8006bd8:	08003421 	.word	0x08003421
 8006bdc:	20000800 	.word	0x20000800
 8006be0:	0800c214 	.word	0x0800c214
 8006be4:	0800c228 	.word	0x0800c228
	...

08006bf0 <rt_test_007_008_execute>:
static void rt_test_007_008_execute(void) {
 8006bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf4:	b082      	sub	sp, #8
  test_set_step(1);
 8006bf6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8006cc4 <rt_test_007_008_execute+0xd4>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f8c8 3000 	str.w	r3, [r8]
  return ch.rlist.current;
 8006c00:	4b24      	ldr	r3, [pc, #144]	; (8006c94 <rt_test_007_008_execute+0xa4>)
 8006c02:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8006c04:	689e      	ldr	r6, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8006c06:	4f24      	ldr	r7, [pc, #144]	; (8006c98 <rt_test_007_008_execute+0xa8>)
 8006c08:	4d24      	ldr	r5, [pc, #144]	; (8006c9c <rt_test_007_008_execute+0xac>)
 8006c0a:	4b25      	ldr	r3, [pc, #148]	; (8006ca0 <rt_test_007_008_execute+0xb0>)
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	463b      	mov	r3, r7
 8006c10:	1c72      	adds	r2, r6, #1
 8006c12:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006c16:	4628      	mov	r0, r5
 8006c18:	f7ff fa2a 	bl	8006070 <chThdCreateStatic>
 8006c1c:	4c21      	ldr	r4, [pc, #132]	; (8006ca4 <rt_test_007_008_execute+0xb4>)
 8006c1e:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8006c20:	4b21      	ldr	r3, [pc, #132]	; (8006ca8 <rt_test_007_008_execute+0xb8>)
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	463b      	mov	r3, r7
 8006c26:	1cb2      	adds	r2, r6, #2
 8006c28:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006c2c:	1868      	adds	r0, r5, r1
 8006c2e:	f7ff fa1f 	bl	8006070 <chThdCreateStatic>
 8006c32:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8006c34:	4b1d      	ldr	r3, [pc, #116]	; (8006cac <rt_test_007_008_execute+0xbc>)
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	463b      	mov	r3, r7
 8006c3a:	1cf2      	adds	r2, r6, #3
 8006c3c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006c40:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8006c44:	f7ff fa14 	bl	8006070 <chThdCreateStatic>
 8006c48:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8006c4a:	4b19      	ldr	r3, [pc, #100]	; (8006cb0 <rt_test_007_008_execute+0xc0>)
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	463b      	mov	r3, r7
 8006c50:	1d32      	adds	r2, r6, #4
 8006c52:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006c56:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8006c5a:	f7ff fa09 	bl	8006070 <chThdCreateStatic>
 8006c5e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8006c60:	4b14      	ldr	r3, [pc, #80]	; (8006cb4 <rt_test_007_008_execute+0xc4>)
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	463b      	mov	r3, r7
 8006c66:	1d72      	adds	r2, r6, #5
 8006c68:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006c6c:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8006c70:	f7ff f9fe 	bl	8006070 <chThdCreateStatic>
 8006c74:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8006c76:	2302      	movs	r3, #2
 8006c78:	f8c8 3000 	str.w	r3, [r8]
    chCondBroadcast(&c1);
 8006c7c:	480e      	ldr	r0, [pc, #56]	; (8006cb8 <rt_test_007_008_execute+0xc8>)
 8006c7e:	f7fc f9df 	bl	8003040 <chCondBroadcast>
    test_wait_threads();
 8006c82:	f7fd f8ed 	bl	8003e60 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8006c86:	490d      	ldr	r1, [pc, #52]	; (8006cbc <rt_test_007_008_execute+0xcc>)
 8006c88:	480d      	ldr	r0, [pc, #52]	; (8006cc0 <rt_test_007_008_execute+0xd0>)
 8006c8a:	f7fa fb61 	bl	8001350 <_test_assert_sequence>
}
 8006c8e:	b002      	add	sp, #8
 8006c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c94:	20001a18 	.word	0x20001a18
 8006c98:	080033f1 	.word	0x080033f1
 8006c9c:	20001d40 	.word	0x20001d40
 8006ca0:	0800ce2c 	.word	0x0800ce2c
 8006ca4:	2000246c 	.word	0x2000246c
 8006ca8:	0800da20 	.word	0x0800da20
 8006cac:	0800c990 	.word	0x0800c990
 8006cb0:	0800c984 	.word	0x0800c984
 8006cb4:	0800c978 	.word	0x0800c978
 8006cb8:	20000800 	.word	0x20000800
 8006cbc:	0800c214 	.word	0x0800c214
 8006cc0:	0800ce28 	.word	0x0800ce28
 8006cc4:	20002454 	.word	0x20002454
	...

08006cd0 <rt_test_007_007_execute>:
static void rt_test_007_007_execute(void) {
 8006cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd4:	b082      	sub	sp, #8
  test_set_step(1);
 8006cd6:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8006dd0 <rt_test_007_007_execute+0x100>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f8c8 3000 	str.w	r3, [r8]
  return ch.rlist.current;
 8006ce0:	4b2f      	ldr	r3, [pc, #188]	; (8006da0 <rt_test_007_007_execute+0xd0>)
 8006ce2:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 8006ce4:	689e      	ldr	r6, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 8006ce6:	4f2f      	ldr	r7, [pc, #188]	; (8006da4 <rt_test_007_007_execute+0xd4>)
 8006ce8:	4d2f      	ldr	r5, [pc, #188]	; (8006da8 <rt_test_007_007_execute+0xd8>)
 8006cea:	4b30      	ldr	r3, [pc, #192]	; (8006dac <rt_test_007_007_execute+0xdc>)
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	463b      	mov	r3, r7
 8006cf0:	1c72      	adds	r2, r6, #1
 8006cf2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f7ff f9ba 	bl	8006070 <chThdCreateStatic>
 8006cfc:	4c2c      	ldr	r4, [pc, #176]	; (8006db0 <rt_test_007_007_execute+0xe0>)
 8006cfe:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8006d00:	4b2c      	ldr	r3, [pc, #176]	; (8006db4 <rt_test_007_007_execute+0xe4>)
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	463b      	mov	r3, r7
 8006d06:	1cb2      	adds	r2, r6, #2
 8006d08:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d0c:	1868      	adds	r0, r5, r1
 8006d0e:	f7ff f9af 	bl	8006070 <chThdCreateStatic>
 8006d12:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8006d14:	4b28      	ldr	r3, [pc, #160]	; (8006db8 <rt_test_007_007_execute+0xe8>)
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	463b      	mov	r3, r7
 8006d1a:	1cf2      	adds	r2, r6, #3
 8006d1c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d20:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8006d24:	f7ff f9a4 	bl	8006070 <chThdCreateStatic>
 8006d28:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8006d2a:	4b24      	ldr	r3, [pc, #144]	; (8006dbc <rt_test_007_007_execute+0xec>)
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	463b      	mov	r3, r7
 8006d30:	1d32      	adds	r2, r6, #4
 8006d32:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d36:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8006d3a:	f7ff f999 	bl	8006070 <chThdCreateStatic>
 8006d3e:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8006d40:	4b1f      	ldr	r3, [pc, #124]	; (8006dc0 <rt_test_007_007_execute+0xf0>)
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	463b      	mov	r3, r7
 8006d46:	1d72      	adds	r2, r6, #5
 8006d48:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006d4c:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8006d50:	f7ff f98e 	bl	8006070 <chThdCreateStatic>
 8006d54:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8006d56:	2302      	movs	r3, #2
 8006d58:	f8c8 3000 	str.w	r3, [r8]
 8006d5c:	2320      	movs	r3, #32
 8006d5e:	f383 8811 	msr	BASEPRI, r3
    chCondSignalI(&c1);
 8006d62:	4c18      	ldr	r4, [pc, #96]	; (8006dc4 <rt_test_007_007_execute+0xf4>)
 8006d64:	4620      	mov	r0, r4
 8006d66:	f7fc f97b 	bl	8003060 <chCondSignalI>
    chCondSignalI(&c1);
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f7fc f978 	bl	8003060 <chCondSignalI>
    chCondSignalI(&c1);
 8006d70:	4620      	mov	r0, r4
 8006d72:	f7fc f975 	bl	8003060 <chCondSignalI>
    chCondSignalI(&c1);
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7fc f972 	bl	8003060 <chCondSignalI>
    chCondSignalI(&c1);
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f7fc f96f 	bl	8003060 <chCondSignalI>
    chSchRescheduleS();
 8006d82:	f003 fc05 	bl	800a590 <chSchRescheduleS>
 8006d86:	2300      	movs	r3, #0
 8006d88:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8006d8c:	f7fd f868 	bl	8003e60 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8006d90:	490d      	ldr	r1, [pc, #52]	; (8006dc8 <rt_test_007_007_execute+0xf8>)
 8006d92:	480e      	ldr	r0, [pc, #56]	; (8006dcc <rt_test_007_007_execute+0xfc>)
 8006d94:	f7fa fadc 	bl	8001350 <_test_assert_sequence>
}
 8006d98:	b002      	add	sp, #8
 8006d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d9e:	bf00      	nop
 8006da0:	20001a18 	.word	0x20001a18
 8006da4:	080033f1 	.word	0x080033f1
 8006da8:	20001d40 	.word	0x20001d40
 8006dac:	0800ce2c 	.word	0x0800ce2c
 8006db0:	2000246c 	.word	0x2000246c
 8006db4:	0800da20 	.word	0x0800da20
 8006db8:	0800c990 	.word	0x0800c990
 8006dbc:	0800c984 	.word	0x0800c984
 8006dc0:	0800c978 	.word	0x0800c978
 8006dc4:	20000800 	.word	0x20000800
 8006dc8:	0800c214 	.word	0x0800c214
 8006dcc:	0800ce28 	.word	0x0800ce28
 8006dd0:	20002454 	.word	0x20002454
	...

08006de0 <rt_test_007_004_execute>:
static void rt_test_007_004_execute(void) {
 8006de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	b082      	sub	sp, #8
  return ch.rlist.current;
 8006de6:	4d42      	ldr	r5, [pc, #264]	; (8006ef0 <rt_test_007_004_execute+0x110>)
 8006de8:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8006dea:	689c      	ldr	r4, [r3, #8]
    pa = p + 1;
 8006dec:	f104 0901 	add.w	r9, r4, #1
    pb = p + 2;
 8006df0:	f104 0a02 	add.w	sl, r4, #2
  test_set_step(2);
 8006df4:	4e3f      	ldr	r6, [pc, #252]	; (8006ef4 <rt_test_007_004_execute+0x114>)
 8006df6:	2302      	movs	r3, #2
 8006df8:	6033      	str	r3, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8006dfa:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8006f18 <rt_test_007_004_execute+0x138>
 8006dfe:	4b3e      	ldr	r3, [pc, #248]	; (8006ef8 <rt_test_007_004_execute+0x118>)
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	4b3e      	ldr	r3, [pc, #248]	; (8006efc <rt_test_007_004_execute+0x11c>)
 8006e04:	464a      	mov	r2, r9
 8006e06:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	f7ff f930 	bl	8006070 <chThdCreateStatic>
 8006e10:	4f3b      	ldr	r7, [pc, #236]	; (8006f00 <rt_test_007_004_execute+0x120>)
 8006e12:	6038      	str	r0, [r7, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8006e14:	4b3b      	ldr	r3, [pc, #236]	; (8006f04 <rt_test_007_004_execute+0x124>)
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4b3b      	ldr	r3, [pc, #236]	; (8006f08 <rt_test_007_004_execute+0x128>)
 8006e1a:	4652      	mov	r2, sl
 8006e1c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006e20:	eb08 0001 	add.w	r0, r8, r1
 8006e24:	f7ff f924 	bl	8006070 <chThdCreateStatic>
 8006e28:	6078      	str	r0, [r7, #4]
  test_set_step(3);
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8006e2e:	4837      	ldr	r0, [pc, #220]	; (8006f0c <rt_test_007_004_execute+0x12c>)
 8006e30:	f7fc face 	bl	80033d0 <chMtxLock>
  return ch.rlist.current;
 8006e34:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8006e36:	6898      	ldr	r0, [r3, #8]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8006e38:	4935      	ldr	r1, [pc, #212]	; (8006f10 <rt_test_007_004_execute+0x130>)
 8006e3a:	4284      	cmp	r4, r0
 8006e3c:	bf14      	ite	ne
 8006e3e:	2000      	movne	r0, #0
 8006e40:	2001      	moveq	r0, #1
 8006e42:	f7fa f9d5 	bl	80011f0 <_test_assert>
 8006e46:	b110      	cbz	r0, 8006e4e <rt_test_007_004_execute+0x6e>
}
 8006e48:	b002      	add	sp, #8
 8006e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  test_set_step(4);
 8006e4e:	2204      	movs	r2, #4
 8006e50:	6032      	str	r2, [r6, #0]
    chThdSleepMilliseconds(100);
 8006e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e56:	f7fe fd3b 	bl	80058d0 <chThdSleep>
  return ch.rlist.current;
 8006e5a:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8006e5c:	6898      	ldr	r0, [r3, #8]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8006e5e:	492c      	ldr	r1, [pc, #176]	; (8006f10 <rt_test_007_004_execute+0x130>)
 8006e60:	4581      	cmp	r9, r0
 8006e62:	bf14      	ite	ne
 8006e64:	2000      	movne	r0, #0
 8006e66:	2001      	moveq	r0, #1
 8006e68:	f7fa f9c2 	bl	80011f0 <_test_assert>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d1eb      	bne.n	8006e48 <rt_test_007_004_execute+0x68>
  test_set_step(5);
 8006e70:	2205      	movs	r2, #5
 8006e72:	6032      	str	r2, [r6, #0]
    chMtxLock(&m2);
 8006e74:	4827      	ldr	r0, [pc, #156]	; (8006f14 <rt_test_007_004_execute+0x134>)
 8006e76:	f7fc faab 	bl	80033d0 <chMtxLock>
  return ch.rlist.current;
 8006e7a:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8006e7c:	6898      	ldr	r0, [r3, #8]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8006e7e:	4924      	ldr	r1, [pc, #144]	; (8006f10 <rt_test_007_004_execute+0x130>)
 8006e80:	4581      	cmp	r9, r0
 8006e82:	bf14      	ite	ne
 8006e84:	2000      	movne	r0, #0
 8006e86:	2001      	moveq	r0, #1
 8006e88:	f7fa f9b2 	bl	80011f0 <_test_assert>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d1db      	bne.n	8006e48 <rt_test_007_004_execute+0x68>
  test_set_step(6);
 8006e90:	2206      	movs	r2, #6
 8006e92:	6032      	str	r2, [r6, #0]
    chThdSleepMilliseconds(100);
 8006e94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e98:	f7fe fd1a 	bl	80058d0 <chThdSleep>
  return ch.rlist.current;
 8006e9c:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8006e9e:	6898      	ldr	r0, [r3, #8]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8006ea0:	491b      	ldr	r1, [pc, #108]	; (8006f10 <rt_test_007_004_execute+0x130>)
 8006ea2:	4582      	cmp	sl, r0
 8006ea4:	bf14      	ite	ne
 8006ea6:	2000      	movne	r0, #0
 8006ea8:	2001      	moveq	r0, #1
 8006eaa:	f7fa f9a1 	bl	80011f0 <_test_assert>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d1ca      	bne.n	8006e48 <rt_test_007_004_execute+0x68>
  test_set_step(7);
 8006eb2:	2207      	movs	r2, #7
 8006eb4:	6032      	str	r2, [r6, #0]
    chMtxUnlock(&m2);
 8006eb6:	4817      	ldr	r0, [pc, #92]	; (8006f14 <rt_test_007_004_execute+0x134>)
 8006eb8:	f7fc f932 	bl	8003120 <chMtxUnlock>
  return ch.rlist.current;
 8006ebc:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8006ebe:	6898      	ldr	r0, [r3, #8]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8006ec0:	4913      	ldr	r1, [pc, #76]	; (8006f10 <rt_test_007_004_execute+0x130>)
 8006ec2:	4581      	cmp	r9, r0
 8006ec4:	bf14      	ite	ne
 8006ec6:	2000      	movne	r0, #0
 8006ec8:	2001      	moveq	r0, #1
 8006eca:	f7fa f991 	bl	80011f0 <_test_assert>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d1ba      	bne.n	8006e48 <rt_test_007_004_execute+0x68>
  test_set_step(8);
 8006ed2:	2208      	movs	r2, #8
 8006ed4:	6032      	str	r2, [r6, #0]
    chMtxUnlock(&m1);
 8006ed6:	480d      	ldr	r0, [pc, #52]	; (8006f0c <rt_test_007_004_execute+0x12c>)
 8006ed8:	f7fc f922 	bl	8003120 <chMtxUnlock>
  return ch.rlist.current;
 8006edc:	69ab      	ldr	r3, [r5, #24]
  return chThdGetSelfX()->prio;
 8006ede:	6898      	ldr	r0, [r3, #8]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8006ee0:	490b      	ldr	r1, [pc, #44]	; (8006f10 <rt_test_007_004_execute+0x130>)
 8006ee2:	4284      	cmp	r4, r0
 8006ee4:	bf14      	ite	ne
 8006ee6:	2000      	movne	r0, #0
 8006ee8:	2001      	moveq	r0, #1
 8006eea:	f7fa f981 	bl	80011f0 <_test_assert>
  test_end_step(8);
 8006eee:	e7ab      	b.n	8006e48 <rt_test_007_004_execute+0x68>
 8006ef0:	20001a18 	.word	0x20001a18
 8006ef4:	20002454 	.word	0x20002454
 8006ef8:	0800c978 	.word	0x0800c978
 8006efc:	08005981 	.word	0x08005981
 8006f00:	2000246c 	.word	0x2000246c
 8006f04:	0800c984 	.word	0x0800c984
 8006f08:	080059a1 	.word	0x080059a1
 8006f0c:	2000082c 	.word	0x2000082c
 8006f10:	0800c7bc 	.word	0x0800c7bc
 8006f14:	2000083c 	.word	0x2000083c
 8006f18:	20001d40 	.word	0x20001d40
 8006f1c:	00000000 	.word	0x00000000

08006f20 <rt_test_007_001_execute>:
static void rt_test_007_001_execute(void) {
 8006f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f24:	b082      	sub	sp, #8
  return ch.rlist.current;
 8006f26:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 800701c <rt_test_007_001_execute+0xfc>
 8006f2a:	f8d9 3018 	ldr.w	r3, [r9, #24]
  return chThdGetSelfX()->prio;
 8006f2e:	689c      	ldr	r4, [r3, #8]
  test_set_step(2);
 8006f30:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8007020 <rt_test_007_001_execute+0x100>
 8006f34:	2302      	movs	r3, #2
 8006f36:	f8c8 3000 	str.w	r3, [r8]
    chMtxLock(&m1);
 8006f3a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8007024 <rt_test_007_001_execute+0x104>
 8006f3e:	4650      	mov	r0, sl
 8006f40:	f7fc fa46 	bl	80033d0 <chMtxLock>
  test_set_step(3);
 8006f44:	2303      	movs	r3, #3
 8006f46:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8006f4a:	4f29      	ldr	r7, [pc, #164]	; (8006ff0 <rt_test_007_001_execute+0xd0>)
 8006f4c:	4e29      	ldr	r6, [pc, #164]	; (8006ff4 <rt_test_007_001_execute+0xd4>)
 8006f4e:	4b2a      	ldr	r3, [pc, #168]	; (8006ff8 <rt_test_007_001_execute+0xd8>)
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	463b      	mov	r3, r7
 8006f54:	1c62      	adds	r2, r4, #1
 8006f56:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff f888 	bl	8006070 <chThdCreateStatic>
 8006f60:	4d26      	ldr	r5, [pc, #152]	; (8006ffc <rt_test_007_001_execute+0xdc>)
 8006f62:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 8006f64:	4b26      	ldr	r3, [pc, #152]	; (8007000 <rt_test_007_001_execute+0xe0>)
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	463b      	mov	r3, r7
 8006f6a:	1ca2      	adds	r2, r4, #2
 8006f6c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006f70:	1870      	adds	r0, r6, r1
 8006f72:	f7ff f87d 	bl	8006070 <chThdCreateStatic>
 8006f76:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 8006f78:	4b22      	ldr	r3, [pc, #136]	; (8007004 <rt_test_007_001_execute+0xe4>)
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	463b      	mov	r3, r7
 8006f7e:	1ce2      	adds	r2, r4, #3
 8006f80:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006f84:	f506 7024 	add.w	r0, r6, #656	; 0x290
 8006f88:	f7ff f872 	bl	8006070 <chThdCreateStatic>
 8006f8c:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 8006f8e:	4b1e      	ldr	r3, [pc, #120]	; (8007008 <rt_test_007_001_execute+0xe8>)
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	463b      	mov	r3, r7
 8006f94:	1d22      	adds	r2, r4, #4
 8006f96:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006f9a:	f506 7076 	add.w	r0, r6, #984	; 0x3d8
 8006f9e:	f7ff f867 	bl	8006070 <chThdCreateStatic>
 8006fa2:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 8006fa4:	4b19      	ldr	r3, [pc, #100]	; (800700c <rt_test_007_001_execute+0xec>)
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	463b      	mov	r3, r7
 8006faa:	1d62      	adds	r2, r4, #5
 8006fac:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006fb0:	f506 60a4 	add.w	r0, r6, #1312	; 0x520
 8006fb4:	f7ff f85c 	bl	8006070 <chThdCreateStatic>
 8006fb8:	6128      	str	r0, [r5, #16]
  test_set_step(4);
 8006fba:	2304      	movs	r3, #4
 8006fbc:	f8c8 3000 	str.w	r3, [r8]
    chMtxUnlock(&m1);
 8006fc0:	4650      	mov	r0, sl
 8006fc2:	f7fc f8ad 	bl	8003120 <chMtxUnlock>
    test_wait_threads();
 8006fc6:	f7fc ff4b 	bl	8003e60 <test_wait_threads>
  return ch.rlist.current;
 8006fca:	f8d9 3018 	ldr.w	r3, [r9, #24]
  return chThdGetSelfX()->prio;
 8006fce:	6898      	ldr	r0, [r3, #8]
    test_assert(prio == chThdGetPriorityX(), "wrong priority level");
 8006fd0:	490f      	ldr	r1, [pc, #60]	; (8007010 <rt_test_007_001_execute+0xf0>)
 8006fd2:	42a0      	cmp	r0, r4
 8006fd4:	bf14      	ite	ne
 8006fd6:	2000      	movne	r0, #0
 8006fd8:	2001      	moveq	r0, #1
 8006fda:	f7fa f909 	bl	80011f0 <_test_assert>
 8006fde:	b110      	cbz	r0, 8006fe6 <rt_test_007_001_execute+0xc6>
}
 8006fe0:	b002      	add	sp, #8
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    test_assert_sequence("ABCDE", "invalid sequence");
 8006fe6:	490b      	ldr	r1, [pc, #44]	; (8007014 <rt_test_007_001_execute+0xf4>)
 8006fe8:	480b      	ldr	r0, [pc, #44]	; (8007018 <rt_test_007_001_execute+0xf8>)
 8006fea:	f7fa f9b1 	bl	8001350 <_test_assert_sequence>
  test_end_step(4);
 8006fee:	e7f7      	b.n	8006fe0 <rt_test_007_001_execute+0xc0>
 8006ff0:	08003441 	.word	0x08003441
 8006ff4:	20001d40 	.word	0x20001d40
 8006ff8:	0800ce2c 	.word	0x0800ce2c
 8006ffc:	2000246c 	.word	0x2000246c
 8007000:	0800da20 	.word	0x0800da20
 8007004:	0800c990 	.word	0x0800c990
 8007008:	0800c984 	.word	0x0800c984
 800700c:	0800c978 	.word	0x0800c978
 8007010:	0800c7bc 	.word	0x0800c7bc
 8007014:	0800c214 	.word	0x0800c214
 8007018:	0800ce28 	.word	0x0800ce28
 800701c:	20001a18 	.word	0x20001a18
 8007020:	20002454 	.word	0x20002454
 8007024:	2000082c 	.word	0x2000082c
	...

08007030 <rt_test_006_006_execute>:

static void rt_test_006_006_execute(void) {
 8007030:	b530      	push	{r4, r5, lr}
 8007032:	b087      	sub	sp, #28
  binary_semaphore_t bsem;
  msg_t msg;

  /* [6.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8007034:	4b6c      	ldr	r3, [pc, #432]	; (80071e8 <rt_test_006_006_execute+0x1b8>)
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]
  chSemObjectInit(&bsp->sem, taken ? (cnt_t)0 : (cnt_t)1);
 800703a:	2100      	movs	r1, #0
 800703c:	a803      	add	r0, sp, #12
 800703e:	f7fa fe4f 	bl	8001ce0 <chSemObjectInit>
 8007042:	2320      	movs	r3, #32
 8007044:	f383 8811 	msr	BASEPRI, r3
  {
    chBSemObjectInit(&bsem, true);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8007048:	4968      	ldr	r1, [pc, #416]	; (80071ec <rt_test_006_006_execute+0x1bc>)
 800704a:	9805      	ldr	r0, [sp, #20]
 800704c:	2800      	cmp	r0, #0
 800704e:	bfcc      	ite	gt
 8007050:	2000      	movgt	r0, #0
 8007052:	2001      	movle	r0, #1
 8007054:	f7fa f8cc 	bl	80011f0 <_test_assert>
 8007058:	b120      	cbz	r0, 8007064 <rt_test_006_006_execute+0x34>
 800705a:	2300      	movs	r3, #0
 800705c:	f383 8811 	msr	BASEPRI, r3
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
  }
  test_end_step(6);
}
 8007060:	b007      	add	sp, #28
 8007062:	bd30      	pop	{r4, r5, pc}
 8007064:	2100      	movs	r1, #0
 8007066:	f381 8811 	msr	BASEPRI, r1
  test_set_step(2);
 800706a:	4b5f      	ldr	r3, [pc, #380]	; (80071e8 <rt_test_006_006_execute+0x1b8>)
 800706c:	2202      	movs	r2, #2
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	f06f 0201 	mvn.w	r2, #1
 8007074:	a803      	add	r0, sp, #12
 8007076:	f7fe f873 	bl	8005160 <chSemResetWithMessage>
 800707a:	2320      	movs	r3, #32
 800707c:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 8007080:	495a      	ldr	r1, [pc, #360]	; (80071ec <rt_test_006_006_execute+0x1bc>)
 8007082:	9805      	ldr	r0, [sp, #20]
 8007084:	2800      	cmp	r0, #0
 8007086:	bfcc      	ite	gt
 8007088:	2000      	movgt	r0, #0
 800708a:	2001      	movle	r0, #1
 800708c:	f7fa f8b0 	bl	80011f0 <_test_assert>
 8007090:	b118      	cbz	r0, 800709a <rt_test_006_006_execute+0x6a>
 8007092:	2300      	movs	r3, #0
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	e7e2      	b.n	8007060 <rt_test_006_006_execute+0x30>
 800709a:	2300      	movs	r3, #0
 800709c:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 80070a0:	4d51      	ldr	r5, [pc, #324]	; (80071e8 <rt_test_006_006_execute+0x1b8>)
 80070a2:	2303      	movs	r3, #3
 80070a4:	602b      	str	r3, [r5, #0]
  return ch.rlist.current;
 80070a6:	4b52      	ldr	r3, [pc, #328]	; (80071f0 <rt_test_006_006_execute+0x1c0>)
 80070a8:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80070aa:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 80070ac:	ac03      	add	r4, sp, #12
 80070ae:	9400      	str	r4, [sp, #0]
 80070b0:	4b50      	ldr	r3, [pc, #320]	; (80071f4 <rt_test_006_006_execute+0x1c4>)
 80070b2:	3a01      	subs	r2, #1
 80070b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80070b8:	484f      	ldr	r0, [pc, #316]	; (80071f8 <rt_test_006_006_execute+0x1c8>)
 80070ba:	f7fe ffd9 	bl	8006070 <chThdCreateStatic>
 80070be:	4b4f      	ldr	r3, [pc, #316]	; (80071fc <rt_test_006_006_execute+0x1cc>)
 80070c0:	6018      	str	r0, [r3, #0]
  test_set_step(4);
 80070c2:	2304      	movs	r3, #4
 80070c4:	602b      	str	r3, [r5, #0]
  return chSemWait(&bsp->sem);
 80070c6:	4620      	mov	r0, r4
 80070c8:	f7fb fa02 	bl	80024d0 <chSemWait>
 80070cc:	4604      	mov	r4, r0
 80070ce:	2320      	movs	r3, #32
 80070d0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
 80070d4:	4945      	ldr	r1, [pc, #276]	; (80071ec <rt_test_006_006_execute+0x1bc>)
 80070d6:	9805      	ldr	r0, [sp, #20]
 80070d8:	2800      	cmp	r0, #0
 80070da:	bfcc      	ite	gt
 80070dc:	2000      	movgt	r0, #0
 80070de:	2001      	movle	r0, #1
 80070e0:	f7fa f886 	bl	80011f0 <_test_assert>
 80070e4:	b118      	cbz	r0, 80070ee <rt_test_006_006_execute+0xbe>
 80070e6:	2300      	movs	r3, #0
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	e7b8      	b.n	8007060 <rt_test_006_006_execute+0x30>
 80070ee:	2300      	movs	r3, #0
 80070f0:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg == MSG_OK, "unexpected message");
 80070f4:	4942      	ldr	r1, [pc, #264]	; (8007200 <rt_test_006_006_execute+0x1d0>)
 80070f6:	fab4 f084 	clz	r0, r4
 80070fa:	0940      	lsrs	r0, r0, #5
 80070fc:	f7fa f878 	bl	80011f0 <_test_assert>
 8007100:	2800      	cmp	r0, #0
 8007102:	d1ad      	bne.n	8007060 <rt_test_006_006_execute+0x30>
  test_set_step(5);
 8007104:	4b38      	ldr	r3, [pc, #224]	; (80071e8 <rt_test_006_006_execute+0x1b8>)
 8007106:	2205      	movs	r2, #5
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	2320      	movs	r3, #32
 800710c:	f383 8811 	msr	BASEPRI, r3
  if (bsp->sem.cnt < (cnt_t)1) {
 8007110:	9b05      	ldr	r3, [sp, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	dd14      	ble.n	8007140 <rt_test_006_006_execute+0x110>
  chSchRescheduleS();
 8007116:	f003 fa3b 	bl	800a590 <chSchRescheduleS>
 800711a:	2300      	movs	r3, #0
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	2320      	movs	r3, #32
 8007122:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8007126:	4937      	ldr	r1, [pc, #220]	; (8007204 <rt_test_006_006_execute+0x1d4>)
 8007128:	9805      	ldr	r0, [sp, #20]
 800712a:	2800      	cmp	r0, #0
 800712c:	bfd4      	ite	le
 800712e:	2000      	movle	r0, #0
 8007130:	2001      	movgt	r0, #1
 8007132:	f7fa f85d 	bl	80011f0 <_test_assert>
 8007136:	b138      	cbz	r0, 8007148 <rt_test_006_006_execute+0x118>
 8007138:	2300      	movs	r3, #0
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	e78f      	b.n	8007060 <rt_test_006_006_execute+0x30>
    chSemSignalI(&bsp->sem);
 8007140:	a803      	add	r0, sp, #12
 8007142:	f7fd fcf5 	bl	8004b30 <chSemSignalI>
 8007146:	e7e6      	b.n	8007116 <rt_test_006_006_execute+0xe6>
 8007148:	2300      	movs	r3, #0
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	2320      	movs	r3, #32
 8007150:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8007154:	492c      	ldr	r1, [pc, #176]	; (8007208 <rt_test_006_006_execute+0x1d8>)
 8007156:	9805      	ldr	r0, [sp, #20]
 8007158:	2801      	cmp	r0, #1
 800715a:	bf14      	ite	ne
 800715c:	2000      	movne	r0, #0
 800715e:	2001      	moveq	r0, #1
 8007160:	f7fa f846 	bl	80011f0 <_test_assert>
 8007164:	b118      	cbz	r0, 800716e <rt_test_006_006_execute+0x13e>
 8007166:	2300      	movs	r3, #0
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	e778      	b.n	8007060 <rt_test_006_006_execute+0x30>
 800716e:	2300      	movs	r3, #0
 8007170:	f383 8811 	msr	BASEPRI, r3
  test_set_step(6);
 8007174:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <rt_test_006_006_execute+0x1b8>)
 8007176:	2206      	movs	r2, #6
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	2320      	movs	r3, #32
 800717c:	f383 8811 	msr	BASEPRI, r3
  if (bsp->sem.cnt < (cnt_t)1) {
 8007180:	9b05      	ldr	r3, [sp, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	dd14      	ble.n	80071b0 <rt_test_006_006_execute+0x180>
  chSchRescheduleS();
 8007186:	f003 fa03 	bl	800a590 <chSchRescheduleS>
 800718a:	2300      	movs	r3, #0
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	2320      	movs	r3, #32
 8007192:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 8007196:	491d      	ldr	r1, [pc, #116]	; (800720c <rt_test_006_006_execute+0x1dc>)
 8007198:	9805      	ldr	r0, [sp, #20]
 800719a:	2800      	cmp	r0, #0
 800719c:	bfd4      	ite	le
 800719e:	2000      	movle	r0, #0
 80071a0:	2001      	movgt	r0, #1
 80071a2:	f7fa f825 	bl	80011f0 <_test_assert>
 80071a6:	b138      	cbz	r0, 80071b8 <rt_test_006_006_execute+0x188>
 80071a8:	2300      	movs	r3, #0
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	e757      	b.n	8007060 <rt_test_006_006_execute+0x30>
    chSemSignalI(&bsp->sem);
 80071b0:	a803      	add	r0, sp, #12
 80071b2:	f7fd fcbd 	bl	8004b30 <chSemSignalI>
 80071b6:	e7e6      	b.n	8007186 <rt_test_006_006_execute+0x156>
 80071b8:	2300      	movs	r3, #0
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	2320      	movs	r3, #32
 80071c0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80071c4:	4910      	ldr	r1, [pc, #64]	; (8007208 <rt_test_006_006_execute+0x1d8>)
 80071c6:	9805      	ldr	r0, [sp, #20]
 80071c8:	2801      	cmp	r0, #1
 80071ca:	bf14      	ite	ne
 80071cc:	2000      	movne	r0, #0
 80071ce:	2001      	moveq	r0, #1
 80071d0:	f7fa f80e 	bl	80011f0 <_test_assert>
 80071d4:	b918      	cbnz	r0, 80071de <rt_test_006_006_execute+0x1ae>
 80071d6:	2300      	movs	r3, #0
 80071d8:	f383 8811 	msr	BASEPRI, r3
  test_end_step(6);
 80071dc:	e740      	b.n	8007060 <rt_test_006_006_execute+0x30>
 80071de:	2300      	movs	r3, #0
 80071e0:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 80071e4:	e73c      	b.n	8007060 <rt_test_006_006_execute+0x30>
 80071e6:	bf00      	nop
 80071e8:	20002454 	.word	0x20002454
 80071ec:	0800ce30 	.word	0x0800ce30
 80071f0:	20001a18 	.word	0x20001a18
 80071f4:	08004b61 	.word	0x08004b61
 80071f8:	20001d40 	.word	0x20001d40
 80071fc:	2000246c 	.word	0x2000246c
 8007200:	0800ce3c 	.word	0x0800ce3c
 8007204:	0800ce50 	.word	0x0800ce50
 8007208:	0800ce5c 	.word	0x0800ce5c
 800720c:	0800ce34 	.word	0x0800ce34

08007210 <rt_test_006_005_execute>:
static void rt_test_006_005_execute(void) {
 8007210:	b510      	push	{r4, lr}
 8007212:	b082      	sub	sp, #8
  test_set_step(1);
 8007214:	4c22      	ldr	r4, [pc, #136]	; (80072a0 <rt_test_006_005_execute+0x90>)
 8007216:	2301      	movs	r3, #1
 8007218:	6023      	str	r3, [r4, #0]
  return ch.rlist.current;
 800721a:	4b22      	ldr	r3, [pc, #136]	; (80072a4 <rt_test_006_005_execute+0x94>)
 800721c:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 800721e:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8007220:	2300      	movs	r3, #0
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	4b20      	ldr	r3, [pc, #128]	; (80072a8 <rt_test_006_005_execute+0x98>)
 8007226:	3201      	adds	r2, #1
 8007228:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800722c:	481f      	ldr	r0, [pc, #124]	; (80072ac <rt_test_006_005_execute+0x9c>)
 800722e:	f7fe ff1f 	bl	8006070 <chThdCreateStatic>
 8007232:	4b1f      	ldr	r3, [pc, #124]	; (80072b0 <rt_test_006_005_execute+0xa0>)
 8007234:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 8007236:	2302      	movs	r3, #2
 8007238:	6023      	str	r3, [r4, #0]
    chSemSignalWait(&sem1, &sem1);
 800723a:	4c1e      	ldr	r4, [pc, #120]	; (80072b4 <rt_test_006_005_execute+0xa4>)
 800723c:	4621      	mov	r1, r4
 800723e:	4620      	mov	r0, r4
 8007240:	f7fd fc2e 	bl	8004aa0 <chSemSignalWait>
  return (bool)(tqp->next == (const thread_t *)tqp);
 8007244:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8007246:	491c      	ldr	r1, [pc, #112]	; (80072b8 <rt_test_006_005_execute+0xa8>)
 8007248:	42a0      	cmp	r0, r4
 800724a:	bf14      	ite	ne
 800724c:	2000      	movne	r0, #0
 800724e:	2001      	moveq	r0, #1
 8007250:	f7f9 ffce 	bl	80011f0 <_test_assert>
 8007254:	b108      	cbz	r0, 800725a <rt_test_006_005_execute+0x4a>
}
 8007256:	b002      	add	sp, #8
 8007258:	bd10      	pop	{r4, pc}
    test_assert(sem1.cnt == 0, "counter not zero");
 800725a:	68a0      	ldr	r0, [r4, #8]
 800725c:	4917      	ldr	r1, [pc, #92]	; (80072bc <rt_test_006_005_execute+0xac>)
 800725e:	fab0 f080 	clz	r0, r0
 8007262:	0940      	lsrs	r0, r0, #5
 8007264:	f7f9 ffc4 	bl	80011f0 <_test_assert>
 8007268:	2800      	cmp	r0, #0
 800726a:	d1f4      	bne.n	8007256 <rt_test_006_005_execute+0x46>
  test_set_step(3);
 800726c:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <rt_test_006_005_execute+0x90>)
 800726e:	2203      	movs	r2, #3
 8007270:	601a      	str	r2, [r3, #0]
    chSemSignalWait(&sem1, &sem1);
 8007272:	4621      	mov	r1, r4
 8007274:	4620      	mov	r0, r4
 8007276:	f7fd fc13 	bl	8004aa0 <chSemSignalWait>
 800727a:	6820      	ldr	r0, [r4, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800727c:	490e      	ldr	r1, [pc, #56]	; (80072b8 <rt_test_006_005_execute+0xa8>)
 800727e:	42a0      	cmp	r0, r4
 8007280:	bf14      	ite	ne
 8007282:	2000      	movne	r0, #0
 8007284:	2001      	moveq	r0, #1
 8007286:	f7f9 ffb3 	bl	80011f0 <_test_assert>
 800728a:	2800      	cmp	r0, #0
 800728c:	d1e3      	bne.n	8007256 <rt_test_006_005_execute+0x46>
    test_assert(sem1.cnt == 0, "counter not zero");
 800728e:	68a0      	ldr	r0, [r4, #8]
 8007290:	490a      	ldr	r1, [pc, #40]	; (80072bc <rt_test_006_005_execute+0xac>)
 8007292:	fab0 f080 	clz	r0, r0
 8007296:	0940      	lsrs	r0, r0, #5
 8007298:	f7f9 ffaa 	bl	80011f0 <_test_assert>
  test_end_step(3);
 800729c:	e7db      	b.n	8007256 <rt_test_006_005_execute+0x46>
 800729e:	bf00      	nop
 80072a0:	20002454 	.word	0x20002454
 80072a4:	20001a18 	.word	0x20001a18
 80072a8:	08002521 	.word	0x08002521
 80072ac:	20001d40 	.word	0x20001d40
 80072b0:	2000246c 	.word	0x2000246c
 80072b4:	20001d20 	.word	0x20001d20
 80072b8:	0800c7ac 	.word	0x0800c7ac
 80072bc:	0800ce70 	.word	0x0800ce70

080072c0 <rt_test_006_004_execute>:
static void rt_test_006_004_execute(void) {
 80072c0:	b530      	push	{r4, r5, lr}
 80072c2:	b083      	sub	sp, #12
  test_set_step(1);
 80072c4:	4c1c      	ldr	r4, [pc, #112]	; (8007338 <rt_test_006_004_execute+0x78>)
 80072c6:	2301      	movs	r3, #1
 80072c8:	6023      	str	r3, [r4, #0]
  return ch.rlist.current;
 80072ca:	4b1c      	ldr	r3, [pc, #112]	; (800733c <rt_test_006_004_execute+0x7c>)
 80072cc:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80072ce:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 80072d0:	4b1b      	ldr	r3, [pc, #108]	; (8007340 <rt_test_006_004_execute+0x80>)
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	4b1b      	ldr	r3, [pc, #108]	; (8007344 <rt_test_006_004_execute+0x84>)
 80072d6:	3201      	adds	r2, #1
 80072d8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80072dc:	481a      	ldr	r0, [pc, #104]	; (8007348 <rt_test_006_004_execute+0x88>)
 80072de:	f7fe fec7 	bl	8006070 <chThdCreateStatic>
 80072e2:	4b1a      	ldr	r3, [pc, #104]	; (800734c <rt_test_006_004_execute+0x8c>)
 80072e4:	6018      	str	r0, [r3, #0]
  test_set_step(2);
 80072e6:	2102      	movs	r1, #2
 80072e8:	6021      	str	r1, [r4, #0]
 80072ea:	2520      	movs	r5, #32
 80072ec:	f385 8811 	msr	BASEPRI, r5
    chSemAddCounterI(&sem1, 2);
 80072f0:	4c17      	ldr	r4, [pc, #92]	; (8007350 <rt_test_006_004_execute+0x90>)
 80072f2:	4620      	mov	r0, r4
 80072f4:	f7fd fc04 	bl	8004b00 <chSemAddCounterI>
    chSchRescheduleS();
 80072f8:	f003 f94a 	bl	800a590 <chSchRescheduleS>
 80072fc:	2300      	movs	r3, #0
 80072fe:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8007302:	f7fc fdad 	bl	8003e60 <test_wait_threads>
 8007306:	f385 8811 	msr	BASEPRI, r5
  return sp->cnt;
 800730a:	68a0      	ldr	r0, [r4, #8]
    test_assert_lock(chSemGetCounterI(&sem1) == 1, "invalid counter");
 800730c:	4911      	ldr	r1, [pc, #68]	; (8007354 <rt_test_006_004_execute+0x94>)
 800730e:	2801      	cmp	r0, #1
 8007310:	bf14      	ite	ne
 8007312:	2000      	movne	r0, #0
 8007314:	2001      	moveq	r0, #1
 8007316:	f7f9 ff6b 	bl	80011f0 <_test_assert>
 800731a:	b120      	cbz	r0, 8007326 <rt_test_006_004_execute+0x66>
 800731c:	2300      	movs	r3, #0
 800731e:	f383 8811 	msr	BASEPRI, r3
}
 8007322:	b003      	add	sp, #12
 8007324:	bd30      	pop	{r4, r5, pc}
 8007326:	2300      	movs	r3, #0
 8007328:	f383 8811 	msr	BASEPRI, r3
    test_assert_sequence("A", "invalid sequence");
 800732c:	490a      	ldr	r1, [pc, #40]	; (8007358 <rt_test_006_004_execute+0x98>)
 800732e:	4804      	ldr	r0, [pc, #16]	; (8007340 <rt_test_006_004_execute+0x80>)
 8007330:	f7fa f80e 	bl	8001350 <_test_assert_sequence>
  test_end_step(2);
 8007334:	e7f5      	b.n	8007322 <rt_test_006_004_execute+0x62>
 8007336:	bf00      	nop
 8007338:	20002454 	.word	0x20002454
 800733c:	20001a18 	.word	0x20001a18
 8007340:	0800c978 	.word	0x0800c978
 8007344:	08002541 	.word	0x08002541
 8007348:	20001d40 	.word	0x20001d40
 800734c:	2000246c 	.word	0x2000246c
 8007350:	20001d20 	.word	0x20001d20
 8007354:	0800ce84 	.word	0x0800ce84
 8007358:	0800c214 	.word	0x0800c214
 800735c:	00000000 	.word	0x00000000

08007360 <rt_test_006_003_execute>:
static void rt_test_006_003_execute(void) {
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	b082      	sub	sp, #8
  test_set_step(1);
 8007364:	4b50      	ldr	r3, [pc, #320]	; (80074a8 <rt_test_006_003_execute+0x148>)
 8007366:	2201      	movs	r2, #1
 8007368:	601a      	str	r2, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_IMMEDIATE);
 800736a:	2100      	movs	r1, #0
 800736c:	484f      	ldr	r0, [pc, #316]	; (80074ac <rt_test_006_003_execute+0x14c>)
 800736e:	f7fe f9a7 	bl	80056c0 <chSemWaitTimeout>
    test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8007372:	494f      	ldr	r1, [pc, #316]	; (80074b0 <rt_test_006_003_execute+0x150>)
 8007374:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007378:	bf14      	ite	ne
 800737a:	2000      	movne	r0, #0
 800737c:	2001      	moveq	r0, #1
 800737e:	f7f9 ff37 	bl	80011f0 <_test_assert>
 8007382:	b108      	cbz	r0, 8007388 <rt_test_006_003_execute+0x28>
}
 8007384:	b002      	add	sp, #8
 8007386:	bd70      	pop	{r4, r5, r6, pc}
 8007388:	4b48      	ldr	r3, [pc, #288]	; (80074ac <rt_test_006_003_execute+0x14c>)
 800738a:	6818      	ldr	r0, [r3, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 800738c:	4949      	ldr	r1, [pc, #292]	; (80074b4 <rt_test_006_003_execute+0x154>)
 800738e:	4298      	cmp	r0, r3
 8007390:	bf14      	ite	ne
 8007392:	2000      	movne	r0, #0
 8007394:	2001      	moveq	r0, #1
 8007396:	f7f9 ff2b 	bl	80011f0 <_test_assert>
 800739a:	2800      	cmp	r0, #0
 800739c:	d1f2      	bne.n	8007384 <rt_test_006_003_execute+0x24>
    test_assert(sem1.cnt == 0, "counter not zero");
 800739e:	4b43      	ldr	r3, [pc, #268]	; (80074ac <rt_test_006_003_execute+0x14c>)
 80073a0:	6898      	ldr	r0, [r3, #8]
 80073a2:	4945      	ldr	r1, [pc, #276]	; (80074b8 <rt_test_006_003_execute+0x158>)
 80073a4:	fab0 f080 	clz	r0, r0
 80073a8:	0940      	lsrs	r0, r0, #5
 80073aa:	f7f9 ff21 	bl	80011f0 <_test_assert>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d1e8      	bne.n	8007384 <rt_test_006_003_execute+0x24>
  test_set_step(2);
 80073b2:	4b3d      	ldr	r3, [pc, #244]	; (80074a8 <rt_test_006_003_execute+0x148>)
 80073b4:	2202      	movs	r2, #2
 80073b6:	601a      	str	r2, [r3, #0]
  return ch.rlist.current;
 80073b8:	4b40      	ldr	r3, [pc, #256]	; (80074bc <rt_test_006_003_execute+0x15c>)
 80073ba:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80073bc:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80073be:	2300      	movs	r3, #0
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	4b3f      	ldr	r3, [pc, #252]	; (80074c0 <rt_test_006_003_execute+0x160>)
 80073c4:	3a01      	subs	r2, #1
 80073c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80073ca:	483e      	ldr	r0, [pc, #248]	; (80074c4 <rt_test_006_003_execute+0x164>)
 80073cc:	f7fe fe50 	bl	8006070 <chThdCreateStatic>
 80073d0:	4b3d      	ldr	r3, [pc, #244]	; (80074c8 <rt_test_006_003_execute+0x168>)
 80073d2:	6018      	str	r0, [r3, #0]
    msg = chSemWaitTimeout(&sem1, TIME_MS2I(500));
 80073d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80073d8:	4834      	ldr	r0, [pc, #208]	; (80074ac <rt_test_006_003_execute+0x14c>)
 80073da:	f7fe f971 	bl	80056c0 <chSemWaitTimeout>
 80073de:	4604      	mov	r4, r0
    test_wait_threads();
 80073e0:	f7fc fd3e 	bl	8003e60 <test_wait_threads>
    test_assert(msg == MSG_OK, "wrong wake-up message");
 80073e4:	4932      	ldr	r1, [pc, #200]	; (80074b0 <rt_test_006_003_execute+0x150>)
 80073e6:	fab4 f084 	clz	r0, r4
 80073ea:	0940      	lsrs	r0, r0, #5
 80073ec:	f7f9 ff00 	bl	80011f0 <_test_assert>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d1c7      	bne.n	8007384 <rt_test_006_003_execute+0x24>
 80073f4:	4b2d      	ldr	r3, [pc, #180]	; (80074ac <rt_test_006_003_execute+0x14c>)
 80073f6:	6818      	ldr	r0, [r3, #0]
    test_assert(queue_isempty(&sem1.queue), "queue not empty");
 80073f8:	492e      	ldr	r1, [pc, #184]	; (80074b4 <rt_test_006_003_execute+0x154>)
 80073fa:	4298      	cmp	r0, r3
 80073fc:	bf14      	ite	ne
 80073fe:	2000      	movne	r0, #0
 8007400:	2001      	moveq	r0, #1
 8007402:	f7f9 fef5 	bl	80011f0 <_test_assert>
 8007406:	2800      	cmp	r0, #0
 8007408:	d1bc      	bne.n	8007384 <rt_test_006_003_execute+0x24>
    test_assert(sem1.cnt == 0, "counter not zero");
 800740a:	4b28      	ldr	r3, [pc, #160]	; (80074ac <rt_test_006_003_execute+0x14c>)
 800740c:	6898      	ldr	r0, [r3, #8]
 800740e:	492a      	ldr	r1, [pc, #168]	; (80074b8 <rt_test_006_003_execute+0x158>)
 8007410:	fab0 f080 	clz	r0, r0
 8007414:	0940      	lsrs	r0, r0, #5
 8007416:	f7f9 feeb 	bl	80011f0 <_test_assert>
 800741a:	2800      	cmp	r0, #0
 800741c:	d1b2      	bne.n	8007384 <rt_test_006_003_execute+0x24>
  test_set_step(3);
 800741e:	4b22      	ldr	r3, [pc, #136]	; (80074a8 <rt_test_006_003_execute+0x148>)
 8007420:	2203      	movs	r2, #3
 8007422:	601a      	str	r2, [r3, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8007424:	f7fe fbbc 	bl	8005ba0 <test_wait_tick>
 8007428:	4605      	mov	r5, r0
 800742a:	f600 16c4 	addw	r6, r0, #2500	; 0x9c4
    for (i = 0; i < 5; i++) {
 800742e:	2400      	movs	r4, #0
 8007430:	2c04      	cmp	r4, #4
 8007432:	d82b      	bhi.n	800748c <rt_test_006_003_execute+0x12c>
      test_emit_token('A' + i);
 8007434:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8007438:	b2c0      	uxtb	r0, r0
 800743a:	f7f9 f9e9 	bl	8000810 <test_emit_token>
      msg = chSemWaitTimeout(&sem1, TIME_MS2I(50));
 800743e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007442:	481a      	ldr	r0, [pc, #104]	; (80074ac <rt_test_006_003_execute+0x14c>)
 8007444:	f7fe f93c 	bl	80056c0 <chSemWaitTimeout>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8007448:	4919      	ldr	r1, [pc, #100]	; (80074b0 <rt_test_006_003_execute+0x150>)
 800744a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800744e:	bf14      	ite	ne
 8007450:	2000      	movne	r0, #0
 8007452:	2001      	moveq	r0, #1
 8007454:	f7f9 fecc 	bl	80011f0 <_test_assert>
 8007458:	2800      	cmp	r0, #0
 800745a:	d193      	bne.n	8007384 <rt_test_006_003_execute+0x24>
 800745c:	4b13      	ldr	r3, [pc, #76]	; (80074ac <rt_test_006_003_execute+0x14c>)
 800745e:	6818      	ldr	r0, [r3, #0]
      test_assert(queue_isempty(&sem1.queue), "queue not empty");
 8007460:	4914      	ldr	r1, [pc, #80]	; (80074b4 <rt_test_006_003_execute+0x154>)
 8007462:	4298      	cmp	r0, r3
 8007464:	bf14      	ite	ne
 8007466:	2000      	movne	r0, #0
 8007468:	2001      	moveq	r0, #1
 800746a:	f7f9 fec1 	bl	80011f0 <_test_assert>
 800746e:	2800      	cmp	r0, #0
 8007470:	d188      	bne.n	8007384 <rt_test_006_003_execute+0x24>
      test_assert(sem1.cnt == 0, "counter not zero");
 8007472:	4b0e      	ldr	r3, [pc, #56]	; (80074ac <rt_test_006_003_execute+0x14c>)
 8007474:	6898      	ldr	r0, [r3, #8]
 8007476:	4910      	ldr	r1, [pc, #64]	; (80074b8 <rt_test_006_003_execute+0x158>)
 8007478:	fab0 f080 	clz	r0, r0
 800747c:	0940      	lsrs	r0, r0, #5
 800747e:	f7f9 feb7 	bl	80011f0 <_test_assert>
 8007482:	2800      	cmp	r0, #0
 8007484:	f47f af7e 	bne.w	8007384 <rt_test_006_003_execute+0x24>
    for (i = 0; i < 5; i++) {
 8007488:	3401      	adds	r4, #1
 800748a:	e7d1      	b.n	8007430 <rt_test_006_003_execute+0xd0>
    test_assert_sequence("ABCDE", "invalid sequence");
 800748c:	490f      	ldr	r1, [pc, #60]	; (80074cc <rt_test_006_003_execute+0x16c>)
 800748e:	4810      	ldr	r0, [pc, #64]	; (80074d0 <rt_test_006_003_execute+0x170>)
 8007490:	f7f9 ff5e 	bl	8001350 <_test_assert_sequence>
 8007494:	2800      	cmp	r0, #0
 8007496:	f47f af75 	bne.w	8007384 <rt_test_006_003_execute+0x24>
    test_assert_time_window(target_time,
 800749a:	4a0e      	ldr	r2, [pc, #56]	; (80074d4 <rt_test_006_003_execute+0x174>)
 800749c:	f605 11d8 	addw	r1, r5, #2520	; 0x9d8
 80074a0:	4630      	mov	r0, r6
 80074a2:	f7fa fe5d 	bl	8002160 <_test_assert_time_window>
  test_end_step(3);
 80074a6:	e76d      	b.n	8007384 <rt_test_006_003_execute+0x24>
 80074a8:	20002454 	.word	0x20002454
 80074ac:	20001d20 	.word	0x20001d20
 80074b0:	0800ce94 	.word	0x0800ce94
 80074b4:	0800c7ac 	.word	0x0800c7ac
 80074b8:	0800ce70 	.word	0x0800ce70
 80074bc:	20001a18 	.word	0x20001a18
 80074c0:	080059d1 	.word	0x080059d1
 80074c4:	20001d40 	.word	0x20001d40
 80074c8:	2000246c 	.word	0x2000246c
 80074cc:	0800c214 	.word	0x0800c214
 80074d0:	0800ce28 	.word	0x0800ce28
 80074d4:	0800cbe4 	.word	0x0800cbe4
	...

080074e0 <rt_test_006_002_execute>:
static void rt_test_006_002_execute(void) {
 80074e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e4:	b082      	sub	sp, #8
  test_set_step(1);
 80074e6:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80075e0 <rt_test_006_002_execute+0x100>
 80074ea:	2301      	movs	r3, #1
 80074ec:	f8c8 3000 	str.w	r3, [r8]
  return ch.rlist.current;
 80074f0:	4f2f      	ldr	r7, [pc, #188]	; (80075b0 <rt_test_006_002_execute+0xd0>)
 80074f2:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 80074f4:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 80074f6:	4e2f      	ldr	r6, [pc, #188]	; (80075b4 <rt_test_006_002_execute+0xd4>)
 80074f8:	4d2f      	ldr	r5, [pc, #188]	; (80075b8 <rt_test_006_002_execute+0xd8>)
 80074fa:	4b30      	ldr	r3, [pc, #192]	; (80075bc <rt_test_006_002_execute+0xdc>)
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	4633      	mov	r3, r6
 8007500:	3205      	adds	r2, #5
 8007502:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007506:	4628      	mov	r0, r5
 8007508:	f7fe fdb2 	bl	8006070 <chThdCreateStatic>
 800750c:	4c2c      	ldr	r4, [pc, #176]	; (80075c0 <rt_test_006_002_execute+0xe0>)
 800750e:	6020      	str	r0, [r4, #0]
  return ch.rlist.current;
 8007510:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 8007512:	689a      	ldr	r2, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8007514:	4b2b      	ldr	r3, [pc, #172]	; (80075c4 <rt_test_006_002_execute+0xe4>)
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	4633      	mov	r3, r6
 800751a:	3201      	adds	r2, #1
 800751c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007520:	1868      	adds	r0, r5, r1
 8007522:	f7fe fda5 	bl	8006070 <chThdCreateStatic>
 8007526:	6060      	str	r0, [r4, #4]
  return ch.rlist.current;
 8007528:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 800752a:	689a      	ldr	r2, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800752c:	4b26      	ldr	r3, [pc, #152]	; (80075c8 <rt_test_006_002_execute+0xe8>)
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	4633      	mov	r3, r6
 8007532:	3203      	adds	r2, #3
 8007534:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007538:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800753c:	f7fe fd98 	bl	8006070 <chThdCreateStatic>
 8007540:	60a0      	str	r0, [r4, #8]
  return ch.rlist.current;
 8007542:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 8007544:	689a      	ldr	r2, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8007546:	4b21      	ldr	r3, [pc, #132]	; (80075cc <rt_test_006_002_execute+0xec>)
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	4633      	mov	r3, r6
 800754c:	3204      	adds	r2, #4
 800754e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007552:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007556:	f7fe fd8b 	bl	8006070 <chThdCreateStatic>
 800755a:	60e0      	str	r0, [r4, #12]
  return ch.rlist.current;
 800755c:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 800755e:	689a      	ldr	r2, [r3, #8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8007560:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <rt_test_006_002_execute+0xf0>)
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	4633      	mov	r3, r6
 8007566:	3202      	adds	r2, #2
 8007568:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800756c:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8007570:	f7fe fd7e 	bl	8006070 <chThdCreateStatic>
 8007574:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8007576:	2302      	movs	r3, #2
 8007578:	f8c8 3000 	str.w	r3, [r8]
    chSemSignal(&sem1);
 800757c:	4c15      	ldr	r4, [pc, #84]	; (80075d4 <rt_test_006_002_execute+0xf4>)
 800757e:	4620      	mov	r0, r4
 8007580:	f7fa fe26 	bl	80021d0 <chSemSignal>
    chSemSignal(&sem1);
 8007584:	4620      	mov	r0, r4
 8007586:	f7fa fe23 	bl	80021d0 <chSemSignal>
    chSemSignal(&sem1);
 800758a:	4620      	mov	r0, r4
 800758c:	f7fa fe20 	bl	80021d0 <chSemSignal>
    chSemSignal(&sem1);
 8007590:	4620      	mov	r0, r4
 8007592:	f7fa fe1d 	bl	80021d0 <chSemSignal>
    chSemSignal(&sem1);
 8007596:	4620      	mov	r0, r4
 8007598:	f7fa fe1a 	bl	80021d0 <chSemSignal>
    test_wait_threads();
 800759c:	f7fc fc60 	bl	8003e60 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 80075a0:	490d      	ldr	r1, [pc, #52]	; (80075d8 <rt_test_006_002_execute+0xf8>)
 80075a2:	480e      	ldr	r0, [pc, #56]	; (80075dc <rt_test_006_002_execute+0xfc>)
 80075a4:	f7f9 fed4 	bl	8001350 <_test_assert_sequence>
}
 80075a8:	b002      	add	sp, #8
 80075aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ae:	bf00      	nop
 80075b0:	20001a18 	.word	0x20001a18
 80075b4:	08002541 	.word	0x08002541
 80075b8:	20001d40 	.word	0x20001d40
 80075bc:	0800c978 	.word	0x0800c978
 80075c0:	2000246c 	.word	0x2000246c
 80075c4:	0800c984 	.word	0x0800c984
 80075c8:	0800c990 	.word	0x0800c990
 80075cc:	0800da20 	.word	0x0800da20
 80075d0:	0800ce2c 	.word	0x0800ce2c
 80075d4:	20001d20 	.word	0x20001d20
 80075d8:	0800c214 	.word	0x0800c214
 80075dc:	0800ce28 	.word	0x0800ce28
 80075e0:	20002454 	.word	0x20002454
	...

080075f0 <rt_test_005_001_execute>:

static void rt_test_005_001_execute(void) {
 80075f0:	b530      	push	{r4, r5, lr}
 80075f2:	b083      	sub	sp, #12
  msg_t msg;

  /* [5.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 80075f4:	4b30      	ldr	r3, [pc, #192]	; (80076b8 <rt_test_005_001_execute+0xc8>)
 80075f6:	2201      	movs	r2, #1
 80075f8:	601a      	str	r2, [r3, #0]
  return ch.rlist.current;
 80075fa:	4b30      	ldr	r3, [pc, #192]	; (80076bc <rt_test_005_001_execute+0xcc>)
 80075fc:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 80075fe:	689a      	ldr	r2, [r3, #8]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 8007600:	4b2f      	ldr	r3, [pc, #188]	; (80076c0 <rt_test_005_001_execute+0xd0>)
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	4b2f      	ldr	r3, [pc, #188]	; (80076c4 <rt_test_005_001_execute+0xd4>)
 8007606:	3a01      	subs	r2, #1
 8007608:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800760c:	482e      	ldr	r0, [pc, #184]	; (80076c8 <rt_test_005_001_execute+0xd8>)
 800760e:	f7fe fd2f 	bl	8006070 <chThdCreateStatic>
 8007612:	4b2e      	ldr	r3, [pc, #184]	; (80076cc <rt_test_005_001_execute+0xdc>)
 8007614:	6018      	str	r0, [r3, #0]
 8007616:	2320      	movs	r3, #32
 8007618:	f383 8811 	msr	BASEPRI, r3
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
 800761c:	4d2c      	ldr	r5, [pc, #176]	; (80076d0 <rt_test_005_001_execute+0xe0>)
 800761e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007622:	4628      	mov	r0, r5
 8007624:	f7fe f85c 	bl	80056e0 <chThdSuspendTimeoutS>
 8007628:	4604      	mov	r4, r0
 800762a:	2300      	movs	r3, #0
 800762c:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
 8007630:	6828      	ldr	r0, [r5, #0]
 8007632:	4928      	ldr	r1, [pc, #160]	; (80076d4 <rt_test_005_001_execute+0xe4>)
 8007634:	fab0 f080 	clz	r0, r0
 8007638:	0940      	lsrs	r0, r0, #5
 800763a:	f7f9 fdd9 	bl	80011f0 <_test_assert>
 800763e:	b108      	cbz	r0, 8007644 <rt_test_005_001_execute+0x54>
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
  }
  test_end_step(2);
}
 8007640:	b003      	add	sp, #12
 8007642:	bd30      	pop	{r4, r5, pc}
    test_assert(MSG_OK == msg,"wrong returned message");
 8007644:	4924      	ldr	r1, [pc, #144]	; (80076d8 <rt_test_005_001_execute+0xe8>)
 8007646:	fab4 f084 	clz	r0, r4
 800764a:	0940      	lsrs	r0, r0, #5
 800764c:	f7f9 fdd0 	bl	80011f0 <_test_assert>
 8007650:	2800      	cmp	r0, #0
 8007652:	d1f5      	bne.n	8007640 <rt_test_005_001_execute+0x50>
    test_wait_threads();
 8007654:	f7fc fc04 	bl	8003e60 <test_wait_threads>
  test_set_step(2);
 8007658:	4b17      	ldr	r3, [pc, #92]	; (80076b8 <rt_test_005_001_execute+0xc8>)
 800765a:	2202      	movs	r2, #2
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	2320      	movs	r3, #32
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f003 fc44 	bl	800aef0 <stGetCounter>
 8007668:	4604      	mov	r4, r0
    msg = chThdSuspendTimeoutS(&tr1, TIME_MS2I(1000));
 800766a:	f242 7110 	movw	r1, #10000	; 0x2710
 800766e:	4628      	mov	r0, r5
 8007670:	f7fe f836 	bl	80056e0 <chThdSuspendTimeoutS>
 8007674:	4605      	mov	r5, r0
 8007676:	2300      	movs	r3, #0
 8007678:	f383 8811 	msr	BASEPRI, r3
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
 800767c:	4a17      	ldr	r2, [pc, #92]	; (80076dc <rt_test_005_001_execute+0xec>)
 800767e:	f504 511c 	add.w	r1, r4, #9984	; 0x2700
 8007682:	3113      	adds	r1, #19
 8007684:	f504 501c 	add.w	r0, r4, #9984	; 0x2700
 8007688:	3010      	adds	r0, #16
 800768a:	f7fa fd69 	bl	8002160 <_test_assert_time_window>
 800768e:	2800      	cmp	r0, #0
 8007690:	d1d6      	bne.n	8007640 <rt_test_005_001_execute+0x50>
    test_assert(NULL == tr1, "not NULL");
 8007692:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <rt_test_005_001_execute+0xe0>)
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	490f      	ldr	r1, [pc, #60]	; (80076d4 <rt_test_005_001_execute+0xe4>)
 8007698:	fab0 f080 	clz	r0, r0
 800769c:	0940      	lsrs	r0, r0, #5
 800769e:	f7f9 fda7 	bl	80011f0 <_test_assert>
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d1cc      	bne.n	8007640 <rt_test_005_001_execute+0x50>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 80076a6:	490c      	ldr	r1, [pc, #48]	; (80076d8 <rt_test_005_001_execute+0xe8>)
 80076a8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80076ac:	bf14      	ite	ne
 80076ae:	2000      	movne	r0, #0
 80076b0:	2001      	moveq	r0, #1
 80076b2:	f7f9 fd9d 	bl	80011f0 <_test_assert>
  test_end_step(2);
 80076b6:	e7c3      	b.n	8007640 <rt_test_005_001_execute+0x50>
 80076b8:	20002454 	.word	0x20002454
 80076bc:	20001a18 	.word	0x20001a18
 80076c0:	0800c978 	.word	0x0800c978
 80076c4:	08008bf1 	.word	0x08008bf1
 80076c8:	20001d40 	.word	0x20001d40
 80076cc:	2000246c 	.word	0x2000246c
 80076d0:	20002480 	.word	0x20002480
 80076d4:	0800ceac 	.word	0x0800ceac
 80076d8:	0800cb88 	.word	0x0800cb88
 80076dc:	0800cbe4 	.word	0x0800cbe4

080076e0 <rt_test_004_002_execute>:
static void rt_test_004_002_execute(void) {
 80076e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076e2:	b083      	sub	sp, #12
  test_set_step(1);
 80076e4:	4b70      	ldr	r3, [pc, #448]	; (80078a8 <rt_test_004_002_execute+0x1c8>)
 80076e6:	2201      	movs	r2, #1
 80076e8:	601a      	str	r2, [r3, #0]
  return ch.rlist.current;
 80076ea:	4f70      	ldr	r7, [pc, #448]	; (80078ac <rt_test_004_002_execute+0x1cc>)
 80076ec:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 80076ee:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80076f0:	4e6f      	ldr	r6, [pc, #444]	; (80078b0 <rt_test_004_002_execute+0x1d0>)
 80076f2:	4d70      	ldr	r5, [pc, #448]	; (80078b4 <rt_test_004_002_execute+0x1d4>)
 80076f4:	4b70      	ldr	r3, [pc, #448]	; (80078b8 <rt_test_004_002_execute+0x1d8>)
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	4633      	mov	r3, r6
 80076fa:	3a05      	subs	r2, #5
 80076fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007700:	4628      	mov	r0, r5
 8007702:	f7fe fcb5 	bl	8006070 <chThdCreateStatic>
 8007706:	4c6d      	ldr	r4, [pc, #436]	; (80078bc <rt_test_004_002_execute+0x1dc>)
 8007708:	6020      	str	r0, [r4, #0]
  return ch.rlist.current;
 800770a:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 800770c:	689a      	ldr	r2, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 800770e:	4b6c      	ldr	r3, [pc, #432]	; (80078c0 <rt_test_004_002_execute+0x1e0>)
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	4633      	mov	r3, r6
 8007714:	3a04      	subs	r2, #4
 8007716:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800771a:	1868      	adds	r0, r5, r1
 800771c:	f7fe fca8 	bl	8006070 <chThdCreateStatic>
 8007720:	6060      	str	r0, [r4, #4]
  return ch.rlist.current;
 8007722:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 8007724:	689a      	ldr	r2, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8007726:	4b67      	ldr	r3, [pc, #412]	; (80078c4 <rt_test_004_002_execute+0x1e4>)
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	4633      	mov	r3, r6
 800772c:	3a03      	subs	r2, #3
 800772e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007732:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007736:	f7fe fc9b 	bl	8006070 <chThdCreateStatic>
 800773a:	60a0      	str	r0, [r4, #8]
  return ch.rlist.current;
 800773c:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 800773e:	689a      	ldr	r2, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8007740:	4b61      	ldr	r3, [pc, #388]	; (80078c8 <rt_test_004_002_execute+0x1e8>)
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	4633      	mov	r3, r6
 8007746:	3a02      	subs	r2, #2
 8007748:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800774c:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 8007750:	f7fe fc8e 	bl	8006070 <chThdCreateStatic>
 8007754:	60e0      	str	r0, [r4, #12]
  return ch.rlist.current;
 8007756:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 8007758:	689a      	ldr	r2, [r3, #8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800775a:	4b5c      	ldr	r3, [pc, #368]	; (80078cc <rt_test_004_002_execute+0x1ec>)
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	4633      	mov	r3, r6
 8007760:	3a01      	subs	r2, #1
 8007762:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007766:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800776a:	f7fe fc81 	bl	8006070 <chThdCreateStatic>
 800776e:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 8007770:	f7fc fb76 	bl	8003e60 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8007774:	4956      	ldr	r1, [pc, #344]	; (80078d0 <rt_test_004_002_execute+0x1f0>)
 8007776:	4857      	ldr	r0, [pc, #348]	; (80078d4 <rt_test_004_002_execute+0x1f4>)
 8007778:	f7f9 fdea 	bl	8001350 <_test_assert_sequence>
 800777c:	b108      	cbz	r0, 8007782 <rt_test_004_002_execute+0xa2>
}
 800777e:	b003      	add	sp, #12
 8007780:	bdf0      	pop	{r4, r5, r6, r7, pc}
  test_set_step(2);
 8007782:	4b49      	ldr	r3, [pc, #292]	; (80078a8 <rt_test_004_002_execute+0x1c8>)
 8007784:	2202      	movs	r2, #2
 8007786:	601a      	str	r2, [r3, #0]
  return ch.rlist.current;
 8007788:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 800778a:	689a      	ldr	r2, [r3, #8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800778c:	4b4f      	ldr	r3, [pc, #316]	; (80078cc <rt_test_004_002_execute+0x1ec>)
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4633      	mov	r3, r6
 8007792:	3a01      	subs	r2, #1
 8007794:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007798:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800779c:	f7fe fc68 	bl	8006070 <chThdCreateStatic>
 80077a0:	6120      	str	r0, [r4, #16]
  return ch.rlist.current;
 80077a2:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 80077a4:	689a      	ldr	r2, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 80077a6:	4b48      	ldr	r3, [pc, #288]	; (80078c8 <rt_test_004_002_execute+0x1e8>)
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	4633      	mov	r3, r6
 80077ac:	3a02      	subs	r2, #2
 80077ae:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80077b2:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 80077b6:	f7fe fc5b 	bl	8006070 <chThdCreateStatic>
 80077ba:	60e0      	str	r0, [r4, #12]
  return ch.rlist.current;
 80077bc:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 80077be:	689a      	ldr	r2, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 80077c0:	4b40      	ldr	r3, [pc, #256]	; (80078c4 <rt_test_004_002_execute+0x1e4>)
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	4633      	mov	r3, r6
 80077c6:	3a03      	subs	r2, #3
 80077c8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80077cc:	f505 7024 	add.w	r0, r5, #656	; 0x290
 80077d0:	f7fe fc4e 	bl	8006070 <chThdCreateStatic>
 80077d4:	60a0      	str	r0, [r4, #8]
  return ch.rlist.current;
 80077d6:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 80077d8:	689a      	ldr	r2, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 80077da:	4b39      	ldr	r3, [pc, #228]	; (80078c0 <rt_test_004_002_execute+0x1e0>)
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	4633      	mov	r3, r6
 80077e0:	3a04      	subs	r2, #4
 80077e2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80077e6:	1868      	adds	r0, r5, r1
 80077e8:	f7fe fc42 	bl	8006070 <chThdCreateStatic>
 80077ec:	6060      	str	r0, [r4, #4]
  return ch.rlist.current;
 80077ee:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 80077f0:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 80077f2:	4b31      	ldr	r3, [pc, #196]	; (80078b8 <rt_test_004_002_execute+0x1d8>)
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4633      	mov	r3, r6
 80077f8:	3a05      	subs	r2, #5
 80077fa:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80077fe:	4628      	mov	r0, r5
 8007800:	f7fe fc36 	bl	8006070 <chThdCreateStatic>
 8007804:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 8007806:	f7fc fb2b 	bl	8003e60 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800780a:	4931      	ldr	r1, [pc, #196]	; (80078d0 <rt_test_004_002_execute+0x1f0>)
 800780c:	4831      	ldr	r0, [pc, #196]	; (80078d4 <rt_test_004_002_execute+0x1f4>)
 800780e:	f7f9 fd9f 	bl	8001350 <_test_assert_sequence>
 8007812:	2800      	cmp	r0, #0
 8007814:	d1b3      	bne.n	800777e <rt_test_004_002_execute+0x9e>
  test_set_step(3);
 8007816:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <rt_test_004_002_execute+0x1c8>)
 8007818:	2203      	movs	r2, #3
 800781a:	601a      	str	r2, [r3, #0]
  return ch.rlist.current;
 800781c:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 800781e:	689a      	ldr	r2, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8007820:	4b27      	ldr	r3, [pc, #156]	; (80078c0 <rt_test_004_002_execute+0x1e0>)
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	4633      	mov	r3, r6
 8007826:	3a04      	subs	r2, #4
 8007828:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800782c:	1868      	adds	r0, r5, r1
 800782e:	f7fe fc1f 	bl	8006070 <chThdCreateStatic>
 8007832:	6060      	str	r0, [r4, #4]
  return ch.rlist.current;
 8007834:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 8007836:	689a      	ldr	r2, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8007838:	4b1f      	ldr	r3, [pc, #124]	; (80078b8 <rt_test_004_002_execute+0x1d8>)
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	4633      	mov	r3, r6
 800783e:	3a05      	subs	r2, #5
 8007840:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007844:	4628      	mov	r0, r5
 8007846:	f7fe fc13 	bl	8006070 <chThdCreateStatic>
 800784a:	6020      	str	r0, [r4, #0]
  return ch.rlist.current;
 800784c:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 800784e:	689a      	ldr	r2, [r3, #8]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8007850:	4b1e      	ldr	r3, [pc, #120]	; (80078cc <rt_test_004_002_execute+0x1ec>)
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	4633      	mov	r3, r6
 8007856:	3a01      	subs	r2, #1
 8007858:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800785c:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8007860:	f7fe fc06 	bl	8006070 <chThdCreateStatic>
 8007864:	6120      	str	r0, [r4, #16]
  return ch.rlist.current;
 8007866:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 8007868:	689a      	ldr	r2, [r3, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 800786a:	4b17      	ldr	r3, [pc, #92]	; (80078c8 <rt_test_004_002_execute+0x1e8>)
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	4633      	mov	r3, r6
 8007870:	3a02      	subs	r2, #2
 8007872:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007876:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800787a:	f7fe fbf9 	bl	8006070 <chThdCreateStatic>
 800787e:	60e0      	str	r0, [r4, #12]
  return ch.rlist.current;
 8007880:	69bb      	ldr	r3, [r7, #24]
  return chThdGetSelfX()->prio;
 8007882:	689a      	ldr	r2, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8007884:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <rt_test_004_002_execute+0x1e4>)
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	4633      	mov	r3, r6
 800788a:	3a03      	subs	r2, #3
 800788c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007890:	f505 7024 	add.w	r0, r5, #656	; 0x290
 8007894:	f7fe fbec 	bl	8006070 <chThdCreateStatic>
 8007898:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 800789a:	f7fc fae1 	bl	8003e60 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 800789e:	490c      	ldr	r1, [pc, #48]	; (80078d0 <rt_test_004_002_execute+0x1f0>)
 80078a0:	480c      	ldr	r0, [pc, #48]	; (80078d4 <rt_test_004_002_execute+0x1f4>)
 80078a2:	f7f9 fd55 	bl	8001350 <_test_assert_sequence>
  test_end_step(3);
 80078a6:	e76a      	b.n	800777e <rt_test_004_002_execute+0x9e>
 80078a8:	20002454 	.word	0x20002454
 80078ac:	20001a18 	.word	0x20001a18
 80078b0:	08000941 	.word	0x08000941
 80078b4:	20001d40 	.word	0x20001d40
 80078b8:	0800ce2c 	.word	0x0800ce2c
 80078bc:	2000246c 	.word	0x2000246c
 80078c0:	0800da20 	.word	0x0800da20
 80078c4:	0800c990 	.word	0x0800c990
 80078c8:	0800c984 	.word	0x0800c984
 80078cc:	0800c978 	.word	0x0800c978
 80078d0:	0800c214 	.word	0x0800c214
 80078d4:	0800ce28 	.word	0x0800ce28
	...

080078e0 <main>:

/*
 * Entry to our code
 */
int main(void)
{
 80078e0:	b500      	push	{lr}
 80078e2:	b083      	sub	sp, #12
    halInit();
 80078e4:	f003 fc24 	bl	800b130 <halInit>
    chSysInit();
 80078e8:	f002 ff6a 	bl	800a7c0 <chSysInit>
    app_init();
 80078ec:	f7fa ffc8 	bl	8002880 <app_init>


    chThdSleepMilliseconds(500);
 80078f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80078f4:	f7fd ffec 	bl	80058d0 <chThdSleep>
    /*
   * Shell manager initialization.
   */
  shellInit();
 80078f8:	f7f9 fd62 	bl	80013c0 <shellInit>
  chThdCreateFromHeap(NULL, THD_WORKING_AREA_SIZE(2048),
 80078fc:	4b06      	ldr	r3, [pc, #24]	; (8007918 <main+0x38>)
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	4b06      	ldr	r3, [pc, #24]	; (800791c <main+0x3c>)
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	2381      	movs	r3, #129	; 0x81
 8007906:	4a06      	ldr	r2, [pc, #24]	; (8007920 <main+0x40>)
 8007908:	f640 01c8 	movw	r1, #2248	; 0x8c8
 800790c:	2000      	movs	r0, #0
 800790e:	f7fc ff9f 	bl	8004850 <chThdCreateFromHeap>
                                       "shell1", NORMALPRIO + 1,
                                       shellThread, (void *)&shell_cfg1);

    main_loop();
 8007912:	f7fd ffed 	bl	80058f0 <main_loop>
 8007916:	bf00      	nop
 8007918:	0800e1c0 	.word	0x0800e1c0
 800791c:	08007a61 	.word	0x08007a61
 8007920:	0800ceb8 	.word	0x0800ceb8
	...

08007930 <_port_irq_epilogue>:
 8007930:	2320      	movs	r3, #32
 8007932:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8007936:	4b0d      	ldr	r3, [pc, #52]	; (800796c <_port_irq_epilogue+0x3c>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800793e:	d103      	bne.n	8007948 <_port_irq_epilogue+0x18>
 8007940:	2300      	movs	r3, #0
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	4770      	bx	lr
void _port_irq_epilogue(void) {
 8007948:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800794a:	f3ef 8409 	mrs	r4, PSP
    s_psp = __get_PSP();
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 800794e:	3c20      	subs	r4, #32

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8007950:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007954:	61e3      	str	r3, [r4, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8007956:	f384 8809 	msr	PSP, r4
    /* Writing back the modified S-PSP value.*/
    __set_PSP(s_psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 800795a:	f002 fe09 	bl	800a570 <chSchIsPreemptionRequired>
 800795e:	b110      	cbz	r0, 8007966 <_port_irq_epilogue+0x36>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8007960:	4b03      	ldr	r3, [pc, #12]	; (8007970 <_port_irq_epilogue+0x40>)
 8007962:	61a3      	str	r3, [r4, #24]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8007964:	bd10      	pop	{r4, pc}
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8007966:	4b03      	ldr	r3, [pc, #12]	; (8007974 <_port_irq_epilogue+0x44>)
 8007968:	61a3      	str	r3, [r4, #24]
    return;
 800796a:	e7fb      	b.n	8007964 <_port_irq_epilogue+0x34>
 800796c:	e000ed00 	.word	0xe000ed00
 8007970:	080002e3 	.word	0x080002e3
 8007974:	080002e6 	.word	0x080002e6
	...

08007980 <port_init>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007980:	2300      	movs	r3, #0
 8007982:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8007986:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007988:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <port_init+0x3c>)
 800798a:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800798c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8007990:	0409      	lsls	r1, r1, #16
 8007992:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 8007994:	4a0a      	ldr	r2, [pc, #40]	; (80079c0 <port_init+0x40>)
 8007996:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8007998:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800799a:	490a      	ldr	r1, [pc, #40]	; (80079c4 <port_init+0x44>)
 800799c:	68ca      	ldr	r2, [r1, #12]
 800799e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80079a2:	60ca      	str	r2, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80079a4:	4908      	ldr	r1, [pc, #32]	; (80079c8 <port_init+0x48>)
 80079a6:	680a      	ldr	r2, [r1, #0]
 80079a8:	f042 0201 	orr.w	r2, r2, #1
 80079ac:	600a      	str	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ae:	2210      	movs	r2, #16
 80079b0:	77da      	strb	r2, [r3, #31]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	e000ed00 	.word	0xe000ed00
 80079c0:	05fa0300 	.word	0x05fa0300
 80079c4:	e000edf0 	.word	0xe000edf0
 80079c8:	e0001000 	.word	0xe0001000
 80079cc:	00000000 	.word	0x00000000

080079d0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80079d0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 80079d4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80079d6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80079da:	2300      	movs	r3, #0
 80079dc:	f383 8811 	msr	BASEPRI, r3
}
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
	...

080079f0 <_core_init>:
  ch_memcore.basemem = __heap_base__;
 80079f0:	4b02      	ldr	r3, [pc, #8]	; (80079fc <_core_init+0xc>)
 80079f2:	4a03      	ldr	r2, [pc, #12]	; (8007a00 <_core_init+0x10>)
 80079f4:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 80079f6:	4a03      	ldr	r2, [pc, #12]	; (8007a04 <_core_init+0x14>)
 80079f8:	605a      	str	r2, [r3, #4]
}
 80079fa:	4770      	bx	lr
 80079fc:	20001ad8 	.word	0x20001ad8
 8007a00:	20002be8 	.word	0x20002be8
 8007a04:	20020000 	.word	0x20020000
	...

08007a10 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	4606      	mov	r6, r0
 8007a14:	460d      	mov	r5, r1
  elp = esp->next;
 8007a16:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 8007a18:	e004      	b.n	8007a24 <chEvtBroadcastFlagsI+0x14>
      chEvtSignalI(elp->listener, elp->events);
 8007a1a:	68a1      	ldr	r1, [r4, #8]
 8007a1c:	6860      	ldr	r0, [r4, #4]
 8007a1e:	f7fb fad7 	bl	8002fd0 <chEvtSignalI>
    elp = elp->next;
 8007a22:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8007a24:	42b4      	cmp	r4, r6
 8007a26:	d008      	beq.n	8007a3a <chEvtBroadcastFlagsI+0x2a>
    elp->flags |= flags;
 8007a28:	68e3      	ldr	r3, [r4, #12]
 8007a2a:	432b      	orrs	r3, r5
 8007a2c:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8007a2e:	2d00      	cmp	r5, #0
 8007a30:	d0f3      	beq.n	8007a1a <chEvtBroadcastFlagsI+0xa>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8007a32:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8007a34:	422b      	tst	r3, r5
 8007a36:	d0f4      	beq.n	8007a22 <chEvtBroadcastFlagsI+0x12>
 8007a38:	e7ef      	b.n	8007a1a <chEvtBroadcastFlagsI+0xa>
}
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	0000      	movs	r0, r0
	...

08007a40 <shellExit>:
void shellExit(msg_t msg) {
 8007a40:	b510      	push	{r4, lr}
 8007a42:	4604      	mov	r4, r0
 8007a44:	2320      	movs	r3, #32
 8007a46:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4803      	ldr	r0, [pc, #12]	; (8007a5c <shellExit+0x1c>)
 8007a4e:	f7ff ffdf 	bl	8007a10 <chEvtBroadcastFlagsI>
  chThdExitS(msg);
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7fd fc0c 	bl	8005270 <chThdExitS>
}
 8007a58:	bd10      	pop	{r4, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20001d3c 	.word	0x20001d3c

08007a60 <shellThread>:
THD_FUNCTION(shellThread, p) {
 8007a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a64:	b09e      	sub	sp, #120	; 0x78
 8007a66:	4606      	mov	r6, r0
  BaseSequentialStream *chp = scfg->sc_channel;
 8007a68:	6805      	ldr	r5, [r0, #0]
  const ShellCommand *scp = scfg->sc_commands;
 8007a6a:	6847      	ldr	r7, [r0, #4]
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8007a6c:	4b4e      	ldr	r3, [pc, #312]	; (8007ba8 <shellThread+0x148>)
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	4a4e      	ldr	r2, [pc, #312]	; (8007bac <shellThread+0x14c>)
 8007a72:	619a      	str	r2, [r3, #24]
  *(scfg->sc_histbuf) = 0;
 8007a74:	6882      	ldr	r2, [r0, #8]
 8007a76:	2300      	movs	r3, #0
 8007a78:	7013      	strb	r3, [r2, #0]
                       scfg->sc_histbuf,
 8007a7a:	6882      	ldr	r2, [r0, #8]
  ShellHistory hist = {
 8007a7c:	9202      	str	r2, [sp, #8]
                       scfg->sc_histsize,
 8007a7e:	68c2      	ldr	r2, [r0, #12]
  ShellHistory hist = {
 8007a80:	9203      	str	r2, [sp, #12]
 8007a82:	9304      	str	r3, [sp, #16]
 8007a84:	9305      	str	r3, [sp, #20]
 8007a86:	9306      	str	r3, [sp, #24]
  chprintf(chp, SHELL_NEWLINE_STR);
 8007a88:	4949      	ldr	r1, [pc, #292]	; (8007bb0 <shellThread+0x150>)
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	f7fa fec8 	bl	8002820 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 8007a90:	4948      	ldr	r1, [pc, #288]	; (8007bb4 <shellThread+0x154>)
 8007a92:	4628      	mov	r0, r5
 8007a94:	f7fa fec4 	bl	8002820 <chprintf>
  while (!chThdShouldTerminateX()) {
 8007a98:	e017      	b.n	8007aca <shellThread+0x6a>
      chprintf(chp, SHELL_NEWLINE_STR);
 8007a9a:	4945      	ldr	r1, [pc, #276]	; (8007bb0 <shellThread+0x150>)
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f7fa febf 	bl	8002820 <chprintf>
      chprintf(chp, "logout");
 8007aa2:	4945      	ldr	r1, [pc, #276]	; (8007bb8 <shellThread+0x158>)
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f7fa febb 	bl	8002820 <chprintf>
  shellExit(MSG_OK);
 8007aaa:	2000      	movs	r0, #0
 8007aac:	f7ff ffc8 	bl	8007a40 <shellExit>
}
 8007ab0:	b01e      	add	sp, #120	; 0x78
 8007ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 8007ab6:	4941      	ldr	r1, [pc, #260]	; (8007bbc <shellThread+0x15c>)
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f7fa feb1 	bl	8002820 <chprintf>
    args[n] = NULL;
 8007abe:	ab1e      	add	r3, sp, #120	; 0x78
 8007ac0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f844 3c5c 	str.w	r3, [r4, #-92]
  return ch.rlist.current;
 8007aca:	4b37      	ldr	r3, [pc, #220]	; (8007ba8 <shellThread+0x148>)
 8007acc:	699b      	ldr	r3, [r3, #24]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8007ace:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  while (!chThdShouldTerminateX()) {
 8007ad2:	f013 0f04 	tst.w	r3, #4
 8007ad6:	d1e8      	bne.n	8007aaa <shellThread+0x4a>
    chprintf(chp, SHELL_PROMPT_STR);
 8007ad8:	4939      	ldr	r1, [pc, #228]	; (8007bc0 <shellThread+0x160>)
 8007ada:	4628      	mov	r0, r5
 8007adc:	f7fa fea0 	bl	8002820 <chprintf>
    if (shellGetLine(scfg, line, sizeof(line), shp)) {
 8007ae0:	ab02      	add	r3, sp, #8
 8007ae2:	2240      	movs	r2, #64	; 0x40
 8007ae4:	a90d      	add	r1, sp, #52	; 0x34
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f7fa ff8a 	bl	8002a00 <shellGetLine>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d1d4      	bne.n	8007a9a <shellThread+0x3a>
    lp = parse_arguments(line, &tokp);
 8007af0:	a91d      	add	r1, sp, #116	; 0x74
 8007af2:	a80d      	add	r0, sp, #52	; 0x34
 8007af4:	f7fa fe6c 	bl	80027d0 <parse_arguments>
 8007af8:	4680      	mov	r8, r0
    n = 0;
 8007afa:	2400      	movs	r4, #0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8007afc:	a91d      	add	r1, sp, #116	; 0x74
 8007afe:	2000      	movs	r0, #0
 8007b00:	f7fa fe66 	bl	80027d0 <parse_arguments>
 8007b04:	4603      	mov	r3, r0
 8007b06:	b140      	cbz	r0, 8007b1a <shellThread+0xba>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8007b08:	2c04      	cmp	r4, #4
 8007b0a:	dcd4      	bgt.n	8007ab6 <shellThread+0x56>
      args[n++] = lp;
 8007b0c:	aa1e      	add	r2, sp, #120	; 0x78
 8007b0e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007b12:	f842 3c5c 	str.w	r3, [r2, #-92]
 8007b16:	3401      	adds	r4, #1
 8007b18:	e7f0      	b.n	8007afc <shellThread+0x9c>
    args[n] = NULL;
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	ab1e      	add	r3, sp, #120	; 0x78
 8007b1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007b22:	f843 2c5c 	str.w	r2, [r3, #-92]
    if (cmd != NULL) {
 8007b26:	f1b8 0f00 	cmp.w	r8, #0
 8007b2a:	d0ce      	beq.n	8007aca <shellThread+0x6a>
      if (strcmp(cmd, "help") == 0) {
 8007b2c:	4925      	ldr	r1, [pc, #148]	; (8007bc4 <shellThread+0x164>)
 8007b2e:	4640      	mov	r0, r8
 8007b30:	f7f8 fc7a 	bl	8000428 <strcmp>
 8007b34:	b9c8      	cbnz	r0, 8007b6a <shellThread+0x10a>
        if (n > 0) {
 8007b36:	2c00      	cmp	r4, #0
 8007b38:	dc11      	bgt.n	8007b5e <shellThread+0xfe>
        chprintf(chp, "Commands: help ");
 8007b3a:	4923      	ldr	r1, [pc, #140]	; (8007bc8 <shellThread+0x168>)
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f7fa fe6f 	bl	8002820 <chprintf>
        list_commands(chp, shell_local_commands);
 8007b42:	4922      	ldr	r1, [pc, #136]	; (8007bcc <shellThread+0x16c>)
 8007b44:	4628      	mov	r0, r5
 8007b46:	f7fb f853 	bl	8002bf0 <list_commands>
        if (scp != NULL)
 8007b4a:	b11f      	cbz	r7, 8007b54 <shellThread+0xf4>
          list_commands(chp, scp);
 8007b4c:	4639      	mov	r1, r7
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f7fb f84e 	bl	8002bf0 <list_commands>
        chprintf(chp, SHELL_NEWLINE_STR);
 8007b54:	4916      	ldr	r1, [pc, #88]	; (8007bb0 <shellThread+0x150>)
 8007b56:	4628      	mov	r0, r5
 8007b58:	f7fa fe62 	bl	8002820 <chprintf>
 8007b5c:	e7b5      	b.n	8007aca <shellThread+0x6a>
          shellUsage(chp, "help");
 8007b5e:	4a19      	ldr	r2, [pc, #100]	; (8007bc4 <shellThread+0x164>)
 8007b60:	491b      	ldr	r1, [pc, #108]	; (8007bd0 <shellThread+0x170>)
 8007b62:	4628      	mov	r0, r5
 8007b64:	f7fa fe5c 	bl	8002820 <chprintf>
          continue;
 8007b68:	e7af      	b.n	8007aca <shellThread+0x6a>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 8007b6a:	ab07      	add	r3, sp, #28
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	4623      	mov	r3, r4
 8007b70:	4642      	mov	r2, r8
 8007b72:	4629      	mov	r1, r5
 8007b74:	4815      	ldr	r0, [pc, #84]	; (8007bcc <shellThread+0x16c>)
 8007b76:	f7fa f9e3 	bl	8001f40 <cmdexec>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d0a5      	beq.n	8007aca <shellThread+0x6a>
 8007b7e:	b14f      	cbz	r7, 8007b94 <shellThread+0x134>
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
 8007b80:	ab07      	add	r3, sp, #28
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	4623      	mov	r3, r4
 8007b86:	4642      	mov	r2, r8
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	f7fa f9d8 	bl	8001f40 <cmdexec>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d09a      	beq.n	8007aca <shellThread+0x6a>
        chprintf(chp, "%s", cmd);
 8007b94:	4642      	mov	r2, r8
 8007b96:	490f      	ldr	r1, [pc, #60]	; (8007bd4 <shellThread+0x174>)
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f7fa fe41 	bl	8002820 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 8007b9e:	490e      	ldr	r1, [pc, #56]	; (8007bd8 <shellThread+0x178>)
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f7fa fe3d 	bl	8002820 <chprintf>
 8007ba6:	e790      	b.n	8007aca <shellThread+0x6a>
 8007ba8:	20001a18 	.word	0x20001a18
 8007bac:	0800cec0 	.word	0x0800cec0
 8007bb0:	0800c40c 	.word	0x0800c40c
 8007bb4:	0800cec8 	.word	0x0800cec8
 8007bb8:	0800cee4 	.word	0x0800cee4
 8007bbc:	0800ceec 	.word	0x0800ceec
 8007bc0:	0800cedc 	.word	0x0800cedc
 8007bc4:	0800cf04 	.word	0x0800cf04
 8007bc8:	0800cf0c 	.word	0x0800cf0c
 8007bcc:	0800e1d0 	.word	0x0800e1d0
 8007bd0:	0800c434 	.word	0x0800c434
 8007bd4:	0800c590 	.word	0x0800c590
 8007bd8:	0800cf1c 	.word	0x0800cf1c
 8007bdc:	00000000 	.word	0x00000000

08007be0 <cmd_exit>:
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 8007be0:	b508      	push	{r3, lr}
  if (argc > 0) {
 8007be2:	2900      	cmp	r1, #0
 8007be4:	dc03      	bgt.n	8007bee <cmd_exit+0xe>
  shellExit(MSG_OK);
 8007be6:	2000      	movs	r0, #0
 8007be8:	f7ff ff2a 	bl	8007a40 <shellExit>
}
 8007bec:	bd08      	pop	{r3, pc}
    shellUsage(chp, "exit");
 8007bee:	4a02      	ldr	r2, [pc, #8]	; (8007bf8 <cmd_exit+0x18>)
 8007bf0:	4902      	ldr	r1, [pc, #8]	; (8007bfc <cmd_exit+0x1c>)
 8007bf2:	f7fa fe15 	bl	8002820 <chprintf>
    return;
 8007bf6:	e7f9      	b.n	8007bec <cmd_exit+0xc>
 8007bf8:	0800cf24 	.word	0x0800cf24
 8007bfc:	0800c434 	.word	0x0800c434

08007c00 <chEvtBroadcastFlags>:
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 8007c00:	b508      	push	{r3, lr}
 8007c02:	2320      	movs	r3, #32
 8007c04:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8007c08:	f7ff ff02 	bl	8007a10 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 8007c0c:	f002 fcc0 	bl	800a590 <chSchRescheduleS>
 8007c10:	2300      	movs	r3, #0
 8007c12:	f383 8811 	msr	BASEPRI, r3
}
 8007c16:	bd08      	pop	{r3, pc}
	...

08007c20 <evt_thread7>:
static THD_FUNCTION(evt_thread7, p) {
 8007c20:	b508      	push	{r3, lr}
  chEvtBroadcastFlags(esp, (eventflags_t)0);
 8007c22:	2100      	movs	r1, #0
 8007c24:	4805      	ldr	r0, [pc, #20]	; (8007c3c <evt_thread7+0x1c>)
 8007c26:	f7ff ffeb 	bl	8007c00 <chEvtBroadcastFlags>
  chThdSleepMilliseconds(50);
 8007c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c2e:	f7fd fe4f 	bl	80058d0 <chThdSleep>
 8007c32:	2100      	movs	r1, #0
 8007c34:	4802      	ldr	r0, [pc, #8]	; (8007c40 <evt_thread7+0x20>)
 8007c36:	f7ff ffe3 	bl	8007c00 <chEvtBroadcastFlags>
}
 8007c3a:	bd08      	pop	{r3, pc}
 8007c3c:	20000808 	.word	0x20000808
 8007c40:	2000080c 	.word	0x2000080c
	...

08007c50 <chMtxObjectInit>:
  tqp->next = (thread_t *)tqp;
 8007c50:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 8007c52:	6040      	str	r0, [r0, #4]
  mp->owner = NULL;
 8007c54:	2300      	movs	r3, #0
 8007c56:	6083      	str	r3, [r0, #8]
}
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	0000      	movs	r0, r0
	...

08007c60 <rt_test_011_011_setup>:
static void rt_test_011_011_setup(void) {
 8007c60:	b508      	push	{r3, lr}
  chMtxObjectInit(&mtx1);
 8007c62:	4802      	ldr	r0, [pc, #8]	; (8007c6c <rt_test_011_011_setup+0xc>)
 8007c64:	f7ff fff4 	bl	8007c50 <chMtxObjectInit>
}
 8007c68:	bd08      	pop	{r3, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20001c10 	.word	0x20001c10

08007c70 <rt_test_007_009_setup>:
static void rt_test_007_009_setup(void) {
 8007c70:	b508      	push	{r3, lr}
  chCondObjectInit(&c1);
 8007c72:	4805      	ldr	r0, [pc, #20]	; (8007c88 <rt_test_007_009_setup+0x18>)
 8007c74:	f7fa f80c 	bl	8001c90 <chCondObjectInit>
  chMtxObjectInit(&m1);
 8007c78:	4804      	ldr	r0, [pc, #16]	; (8007c8c <rt_test_007_009_setup+0x1c>)
 8007c7a:	f7ff ffe9 	bl	8007c50 <chMtxObjectInit>
  chMtxObjectInit(&m2);
 8007c7e:	4804      	ldr	r0, [pc, #16]	; (8007c90 <rt_test_007_009_setup+0x20>)
 8007c80:	f7ff ffe6 	bl	8007c50 <chMtxObjectInit>
}
 8007c84:	bd08      	pop	{r3, pc}
 8007c86:	bf00      	nop
 8007c88:	20000800 	.word	0x20000800
 8007c8c:	2000082c 	.word	0x2000082c
 8007c90:	2000083c 	.word	0x2000083c
	...

08007ca0 <rt_test_007_008_setup>:
static void rt_test_007_008_setup(void) {
 8007ca0:	b508      	push	{r3, lr}
  chCondObjectInit(&c1);
 8007ca2:	4803      	ldr	r0, [pc, #12]	; (8007cb0 <rt_test_007_008_setup+0x10>)
 8007ca4:	f7f9 fff4 	bl	8001c90 <chCondObjectInit>
  chMtxObjectInit(&m1);
 8007ca8:	4802      	ldr	r0, [pc, #8]	; (8007cb4 <rt_test_007_008_setup+0x14>)
 8007caa:	f7ff ffd1 	bl	8007c50 <chMtxObjectInit>
}
 8007cae:	bd08      	pop	{r3, pc}
 8007cb0:	20000800 	.word	0x20000800
 8007cb4:	2000082c 	.word	0x2000082c
	...

08007cc0 <rt_test_007_007_setup>:
static void rt_test_007_007_setup(void) {
 8007cc0:	b508      	push	{r3, lr}
  chCondObjectInit(&c1);
 8007cc2:	4803      	ldr	r0, [pc, #12]	; (8007cd0 <rt_test_007_007_setup+0x10>)
 8007cc4:	f7f9 ffe4 	bl	8001c90 <chCondObjectInit>
  chMtxObjectInit(&m1);
 8007cc8:	4802      	ldr	r0, [pc, #8]	; (8007cd4 <rt_test_007_007_setup+0x14>)
 8007cca:	f7ff ffc1 	bl	8007c50 <chMtxObjectInit>
}
 8007cce:	bd08      	pop	{r3, pc}
 8007cd0:	20000800 	.word	0x20000800
 8007cd4:	2000082c 	.word	0x2000082c
	...

08007ce0 <rt_test_007_005_setup>:
static void rt_test_007_005_setup(void) {
 8007ce0:	b508      	push	{r3, lr}
  chMtxObjectInit(&m1);
 8007ce2:	4802      	ldr	r0, [pc, #8]	; (8007cec <rt_test_007_005_setup+0xc>)
 8007ce4:	f7ff ffb4 	bl	8007c50 <chMtxObjectInit>
}
 8007ce8:	bd08      	pop	{r3, pc}
 8007cea:	bf00      	nop
 8007cec:	2000082c 	.word	0x2000082c

08007cf0 <rt_test_007_004_setup>:
static void rt_test_007_004_setup(void) {
 8007cf0:	b508      	push	{r3, lr}
  chMtxObjectInit(&m1);
 8007cf2:	4803      	ldr	r0, [pc, #12]	; (8007d00 <rt_test_007_004_setup+0x10>)
 8007cf4:	f7ff ffac 	bl	8007c50 <chMtxObjectInit>
  chMtxObjectInit(&m2);
 8007cf8:	4802      	ldr	r0, [pc, #8]	; (8007d04 <rt_test_007_004_setup+0x14>)
 8007cfa:	f7ff ffa9 	bl	8007c50 <chMtxObjectInit>
}
 8007cfe:	bd08      	pop	{r3, pc}
 8007d00:	2000082c 	.word	0x2000082c
 8007d04:	2000083c 	.word	0x2000083c
	...

08007d10 <rt_test_007_001_setup>:
static void rt_test_007_001_setup(void) {
 8007d10:	b508      	push	{r3, lr}
  chMtxObjectInit(&m1);
 8007d12:	4802      	ldr	r0, [pc, #8]	; (8007d1c <rt_test_007_001_setup+0xc>)
 8007d14:	f7ff ff9c 	bl	8007c50 <chMtxObjectInit>
}
 8007d18:	bd08      	pop	{r3, pc}
 8007d1a:	bf00      	nop
 8007d1c:	2000082c 	.word	0x2000082c

08007d20 <_factory_init>:
void _factory_init(void) {
 8007d20:	b538      	push	{r3, r4, r5, lr}
  chMtxObjectInit(&ch_factory.mtx);
 8007d22:	4c12      	ldr	r4, [pc, #72]	; (8007d6c <_factory_init+0x4c>)
 8007d24:	4620      	mov	r0, r4
 8007d26:	f7ff ff93 	bl	8007c50 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 8007d2a:	f104 0310 	add.w	r3, r4, #16
 8007d2e:	6123      	str	r3, [r4, #16]
  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 8007d30:	4d0f      	ldr	r5, [pc, #60]	; (8007d70 <_factory_init+0x50>)
 8007d32:	462b      	mov	r3, r5
 8007d34:	2204      	movs	r2, #4
 8007d36:	2114      	movs	r1, #20
 8007d38:	1860      	adds	r0, r4, r1
 8007d3a:	f7f9 fd61 	bl	8001800 <chPoolObjectInitAligned>
 8007d3e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8007d42:	6263      	str	r3, [r4, #36]	; 0x24
 8007d44:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8007d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d4a:	462b      	mov	r3, r5
 8007d4c:	2204      	movs	r2, #4
 8007d4e:	211c      	movs	r1, #28
 8007d50:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8007d54:	f7f9 fd54 	bl	8001800 <chPoolObjectInitAligned>
 8007d58:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8007d5c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007d5e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007d62:	6423      	str	r3, [r4, #64]	; 0x40
 8007d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d68:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007d6a:	bd38      	pop	{r3, r4, r5, pc}
 8007d6c:	20001a90 	.word	0x20001a90
 8007d70:	08001981 	.word	0x08001981
	...

08007d80 <chPipeObjectInit>:
void chPipeObjectInit(pipe_t *pp, uint8_t *buf, size_t n) {
 8007d80:	b510      	push	{r4, lr}
 8007d82:	4604      	mov	r4, r0
  pp->buffer = buf;
 8007d84:	6001      	str	r1, [r0, #0]
  pp->rdptr  = buf;
 8007d86:	60c1      	str	r1, [r0, #12]
  pp->wrptr  = buf;
 8007d88:	6081      	str	r1, [r0, #8]
  pp->top    = &buf[n];
 8007d8a:	4411      	add	r1, r2
 8007d8c:	6041      	str	r1, [r0, #4]
  pp->cnt    = (size_t)0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	6103      	str	r3, [r0, #16]
  pp->reset  = false;
 8007d92:	7503      	strb	r3, [r0, #20]
  pp->wtr    = NULL;
 8007d94:	6183      	str	r3, [r0, #24]
  pp->rtr    = NULL;
 8007d96:	61c3      	str	r3, [r0, #28]
  PC_INIT(pp);
 8007d98:	3020      	adds	r0, #32
 8007d9a:	f7ff ff59 	bl	8007c50 <chMtxObjectInit>
  PW_INIT(pp);
 8007d9e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007da2:	f7ff ff55 	bl	8007c50 <chMtxObjectInit>
  PR_INIT(pp);
 8007da6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8007daa:	f7ff ff51 	bl	8007c50 <chMtxObjectInit>
}
 8007dae:	bd10      	pop	{r4, pc}

08007db0 <oslib_test_003_002_setup>:
static void oslib_test_003_002_setup(void) {
 8007db0:	b508      	push	{r3, lr}
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
 8007db2:	2208      	movs	r2, #8
 8007db4:	4902      	ldr	r1, [pc, #8]	; (8007dc0 <oslib_test_003_002_setup+0x10>)
 8007db6:	4803      	ldr	r0, [pc, #12]	; (8007dc4 <oslib_test_003_002_setup+0x14>)
 8007db8:	f7ff ffe2 	bl	8007d80 <chPipeObjectInit>
}
 8007dbc:	bd08      	pop	{r3, pc}
 8007dbe:	bf00      	nop
 8007dc0:	200019c4 	.word	0x200019c4
 8007dc4:	2000088c 	.word	0x2000088c
	...

08007dd0 <oslib_test_003_001_setup>:
static void oslib_test_003_001_setup(void) {
 8007dd0:	b508      	push	{r3, lr}
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE);
 8007dd2:	2210      	movs	r2, #16
 8007dd4:	4902      	ldr	r1, [pc, #8]	; (8007de0 <oslib_test_003_001_setup+0x10>)
 8007dd6:	4803      	ldr	r0, [pc, #12]	; (8007de4 <oslib_test_003_001_setup+0x14>)
 8007dd8:	f7ff ffd2 	bl	8007d80 <chPipeObjectInit>
}
 8007ddc:	bd08      	pop	{r3, pc}
 8007dde:	bf00      	nop
 8007de0:	200019c4 	.word	0x200019c4
 8007de4:	2000088c 	.word	0x2000088c
	...

08007df0 <chFactoryCreatePipe>:
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	4605      	mov	r5, r0
 8007df4:	460c      	mov	r4, r1
  F_LOCK();
 8007df6:	4e0c      	ldr	r6, [pc, #48]	; (8007e28 <chFactoryCreatePipe+0x38>)
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7fb fae9 	bl	80033d0 <chMtxLock>
  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 8007dfe:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8007e02:	f106 0144 	add.w	r1, r6, #68	; 0x44
 8007e06:	4628      	mov	r0, r5
 8007e08:	f7fc fb82 	bl	8004510 <dyn_create_object_heap>
  if (dpp != NULL) {
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	b128      	cbz	r0, 8007e1c <chFactoryCreatePipe+0x2c>
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 8007e10:	4622      	mov	r2, r4
 8007e12:	f100 0160 	add.w	r1, r0, #96	; 0x60
 8007e16:	3010      	adds	r0, #16
 8007e18:	f7ff ffb2 	bl	8007d80 <chPipeObjectInit>
  F_UNLOCK();
 8007e1c:	4802      	ldr	r0, [pc, #8]	; (8007e28 <chFactoryCreatePipe+0x38>)
 8007e1e:	f7fb f97f 	bl	8003120 <chMtxUnlock>
}
 8007e22:	4628      	mov	r0, r5
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
 8007e26:	bf00      	nop
 8007e28:	20001a90 	.word	0x20001a90
 8007e2c:	00000000 	.word	0x00000000

08007e30 <oslib_test_009_006_execute>:

static void oslib_test_009_006_execute(void) {
 8007e30:	b538      	push	{r3, r4, r5, lr}
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 8007e32:	4b47      	ldr	r3, [pc, #284]	; (8007f50 <oslib_test_009_006_execute+0x120>)
 8007e34:	2201      	movs	r2, #1
 8007e36:	601a      	str	r2, [r3, #0]
  {
    dpp = chFactoryFindPipe("mypipe");
 8007e38:	4846      	ldr	r0, [pc, #280]	; (8007f54 <oslib_test_009_006_execute+0x124>)
 8007e3a:	f7fb fb11 	bl	8003460 <chFactoryFindPipe>
    test_assert(dpp == NULL, "found");
 8007e3e:	4946      	ldr	r1, [pc, #280]	; (8007f58 <oslib_test_009_006_execute+0x128>)
 8007e40:	fab0 f080 	clz	r0, r0
 8007e44:	0940      	lsrs	r0, r0, #5
 8007e46:	f7f9 f9d3 	bl	80011f0 <_test_assert>
 8007e4a:	b100      	cbz	r0, 8007e4e <oslib_test_009_006_execute+0x1e>
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
  test_end_step(6);
}
 8007e4c:	bd38      	pop	{r3, r4, r5, pc}
  test_set_step(2);
 8007e4e:	4b40      	ldr	r3, [pc, #256]	; (8007f50 <oslib_test_009_006_execute+0x120>)
 8007e50:	2202      	movs	r2, #2
 8007e52:	601a      	str	r2, [r3, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 8007e54:	2110      	movs	r1, #16
 8007e56:	483f      	ldr	r0, [pc, #252]	; (8007f54 <oslib_test_009_006_execute+0x124>)
 8007e58:	f7ff ffca 	bl	8007df0 <chFactoryCreatePipe>
    test_assert(dpp != NULL, "cannot create");
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	493f      	ldr	r1, [pc, #252]	; (8007f5c <oslib_test_009_006_execute+0x12c>)
 8007e60:	3800      	subs	r0, #0
 8007e62:	bf18      	it	ne
 8007e64:	2001      	movne	r0, #1
 8007e66:	f7f9 f9c3 	bl	80011f0 <_test_assert>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d1ee      	bne.n	8007e4c <oslib_test_009_006_execute+0x1c>
  test_set_step(3);
 8007e6e:	4b38      	ldr	r3, [pc, #224]	; (8007f50 <oslib_test_009_006_execute+0x120>)
 8007e70:	2203      	movs	r2, #3
 8007e72:	601a      	str	r2, [r3, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 8007e74:	2110      	movs	r1, #16
 8007e76:	4837      	ldr	r0, [pc, #220]	; (8007f54 <oslib_test_009_006_execute+0x124>)
 8007e78:	f7ff ffba 	bl	8007df0 <chFactoryCreatePipe>
    test_assert(dpp1 == NULL, "can create");
 8007e7c:	4938      	ldr	r1, [pc, #224]	; (8007f60 <oslib_test_009_006_execute+0x130>)
 8007e7e:	fab0 f080 	clz	r0, r0
 8007e82:	0940      	lsrs	r0, r0, #5
 8007e84:	f7f9 f9b4 	bl	80011f0 <_test_assert>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d1df      	bne.n	8007e4c <oslib_test_009_006_execute+0x1c>
  test_set_step(4);
 8007e8c:	4b30      	ldr	r3, [pc, #192]	; (8007f50 <oslib_test_009_006_execute+0x120>)
 8007e8e:	2204      	movs	r2, #4
 8007e90:	601a      	str	r2, [r3, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 8007e92:	4830      	ldr	r0, [pc, #192]	; (8007f54 <oslib_test_009_006_execute+0x124>)
 8007e94:	f7fb fae4 	bl	8003460 <chFactoryFindPipe>
    test_assert(dpp1 != NULL, "not found");
 8007e98:	4605      	mov	r5, r0
 8007e9a:	4932      	ldr	r1, [pc, #200]	; (8007f64 <oslib_test_009_006_execute+0x134>)
 8007e9c:	3800      	subs	r0, #0
 8007e9e:	bf18      	it	ne
 8007ea0:	2001      	movne	r0, #1
 8007ea2:	f7f9 f9a5 	bl	80011f0 <_test_assert>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d1d0      	bne.n	8007e4c <oslib_test_009_006_execute+0x1c>
    test_assert(dpp == dpp1, "object reference mismatch");
 8007eaa:	492f      	ldr	r1, [pc, #188]	; (8007f68 <oslib_test_009_006_execute+0x138>)
 8007eac:	42ac      	cmp	r4, r5
 8007eae:	bf14      	ite	ne
 8007eb0:	2000      	movne	r0, #0
 8007eb2:	2001      	moveq	r0, #1
 8007eb4:	f7f9 f99c 	bl	80011f0 <_test_assert>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d1c7      	bne.n	8007e4c <oslib_test_009_006_execute+0x1c>
    test_assert(dpp1->element.refs == 2, "object reference mismatch");
 8007ebc:	6868      	ldr	r0, [r5, #4]
 8007ebe:	492a      	ldr	r1, [pc, #168]	; (8007f68 <oslib_test_009_006_execute+0x138>)
 8007ec0:	2802      	cmp	r0, #2
 8007ec2:	bf14      	ite	ne
 8007ec4:	2000      	movne	r0, #0
 8007ec6:	2001      	moveq	r0, #1
 8007ec8:	f7f9 f992 	bl	80011f0 <_test_assert>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d1bd      	bne.n	8007e4c <oslib_test_009_006_execute+0x1c>
 8007ed0:	686b      	ldr	r3, [r5, #4]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	606b      	str	r3, [r5, #4]
    test_assert(dpp1 == dpp2, "object reference mismatch");
 8007ed6:	4924      	ldr	r1, [pc, #144]	; (8007f68 <oslib_test_009_006_execute+0x138>)
 8007ed8:	2001      	movs	r0, #1
 8007eda:	f7f9 f989 	bl	80011f0 <_test_assert>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d1b4      	bne.n	8007e4c <oslib_test_009_006_execute+0x1c>
    test_assert(dpp2->element.refs == 3, "object reference mismatch");
 8007ee2:	6868      	ldr	r0, [r5, #4]
 8007ee4:	4920      	ldr	r1, [pc, #128]	; (8007f68 <oslib_test_009_006_execute+0x138>)
 8007ee6:	2803      	cmp	r0, #3
 8007ee8:	bf14      	ite	ne
 8007eea:	2000      	movne	r0, #0
 8007eec:	2001      	moveq	r0, #1
 8007eee:	f7f9 f97f 	bl	80011f0 <_test_assert>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d1aa      	bne.n	8007e4c <oslib_test_009_006_execute+0x1c>
    chFactoryReleasePipe(dpp2);
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f7fb fe6a 	bl	8003bd0 <chFactoryReleasePipe>
    test_assert(dpp1->element.refs == 2, "references mismatch");
 8007efc:	6868      	ldr	r0, [r5, #4]
 8007efe:	491b      	ldr	r1, [pc, #108]	; (8007f6c <oslib_test_009_006_execute+0x13c>)
 8007f00:	2802      	cmp	r0, #2
 8007f02:	bf14      	ite	ne
 8007f04:	2000      	movne	r0, #0
 8007f06:	2001      	moveq	r0, #1
 8007f08:	f7f9 f972 	bl	80011f0 <_test_assert>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d19d      	bne.n	8007e4c <oslib_test_009_006_execute+0x1c>
    chFactoryReleasePipe(dpp1);
 8007f10:	4628      	mov	r0, r5
 8007f12:	f7fb fe5d 	bl	8003bd0 <chFactoryReleasePipe>
    test_assert(dpp->element.refs == 1, "references mismatch");
 8007f16:	6860      	ldr	r0, [r4, #4]
 8007f18:	4914      	ldr	r1, [pc, #80]	; (8007f6c <oslib_test_009_006_execute+0x13c>)
 8007f1a:	2801      	cmp	r0, #1
 8007f1c:	bf14      	ite	ne
 8007f1e:	2000      	movne	r0, #0
 8007f20:	2001      	moveq	r0, #1
 8007f22:	f7f9 f965 	bl	80011f0 <_test_assert>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d190      	bne.n	8007e4c <oslib_test_009_006_execute+0x1c>
  test_set_step(5);
 8007f2a:	4d09      	ldr	r5, [pc, #36]	; (8007f50 <oslib_test_009_006_execute+0x120>)
 8007f2c:	2305      	movs	r3, #5
 8007f2e:	602b      	str	r3, [r5, #0]
    chFactoryReleasePipe(dpp);
 8007f30:	4620      	mov	r0, r4
 8007f32:	f7fb fe4d 	bl	8003bd0 <chFactoryReleasePipe>
  test_set_step(6);
 8007f36:	2306      	movs	r3, #6
 8007f38:	602b      	str	r3, [r5, #0]
    dpp = chFactoryFindPipe("mypipe");
 8007f3a:	4806      	ldr	r0, [pc, #24]	; (8007f54 <oslib_test_009_006_execute+0x124>)
 8007f3c:	f7fb fa90 	bl	8003460 <chFactoryFindPipe>
    test_assert(dpp == NULL, "found");
 8007f40:	4905      	ldr	r1, [pc, #20]	; (8007f58 <oslib_test_009_006_execute+0x128>)
 8007f42:	fab0 f080 	clz	r0, r0
 8007f46:	0940      	lsrs	r0, r0, #5
 8007f48:	f7f9 f952 	bl	80011f0 <_test_assert>
  test_end_step(6);
 8007f4c:	e77e      	b.n	8007e4c <oslib_test_009_006_execute+0x1c>
 8007f4e:	bf00      	nop
 8007f50:	20002454 	.word	0x20002454
 8007f54:	0800c8e8 	.word	0x0800c8e8
 8007f58:	0800c7fc 	.word	0x0800c7fc
 8007f5c:	0800c7dc 	.word	0x0800c7dc
 8007f60:	0800c7ec 	.word	0x0800c7ec
 8007f64:	0800c7f8 	.word	0x0800c7f8
 8007f68:	0800c804 	.word	0x0800c804
 8007f6c:	0800c820 	.word	0x0800c820

08007f70 <chHeapObjectInit>:
void chHeapObjectInit(memory_heap_t *heapp, void *buf, size_t size) {
 8007f70:	b508      	push	{r3, lr}
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8007f72:	1dcb      	adds	r3, r1, #7
 8007f74:	f023 0307 	bic.w	r3, r3, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 8007f78:	1a59      	subs	r1, r3, r1
 8007f7a:	1a52      	subs	r2, r2, r1
  heapp->provider = NULL;
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6001      	str	r1, [r0, #0]
  H_NEXT(&heapp->header) = hp;
 8007f80:	6043      	str	r3, [r0, #4]
  H_PAGES(&heapp->header) = 0;
 8007f82:	6081      	str	r1, [r0, #8]
  H_NEXT(hp) = NULL;
 8007f84:	6019      	str	r1, [r3, #0]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8007f86:	3a08      	subs	r2, #8
 8007f88:	08d2      	lsrs	r2, r2, #3
 8007f8a:	605a      	str	r2, [r3, #4]
  chMtxObjectInit(&heapp->mtx);
 8007f8c:	300c      	adds	r0, #12
 8007f8e:	f7ff fe5f 	bl	8007c50 <chMtxObjectInit>
}
 8007f92:	bd08      	pop	{r3, pc}
	...

08007fa0 <oslib_test_008_001_setup>:
static void oslib_test_008_001_setup(void) {
 8007fa0:	b508      	push	{r3, lr}
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
 8007fa2:	2280      	movs	r2, #128	; 0x80
 8007fa4:	4902      	ldr	r1, [pc, #8]	; (8007fb0 <oslib_test_008_001_setup+0x10>)
 8007fa6:	4803      	ldr	r0, [pc, #12]	; (8007fb4 <oslib_test_008_001_setup+0x14>)
 8007fa8:	f7ff ffe2 	bl	8007f70 <chHeapObjectInit>
}
 8007fac:	bd08      	pop	{r3, pc}
 8007fae:	bf00      	nop
 8007fb0:	200023d0 	.word	0x200023d0
 8007fb4:	200023b4 	.word	0x200023b4
	...

08007fc0 <rt_test_010_001_setup>:
static void rt_test_010_001_setup(void) {
 8007fc0:	b508      	push	{r3, lr}
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
 8007fc2:	f44f 62cd 	mov.w	r2, #1640	; 0x668
 8007fc6:	4902      	ldr	r1, [pc, #8]	; (8007fd0 <rt_test_010_001_setup+0x10>)
 8007fc8:	4802      	ldr	r0, [pc, #8]	; (8007fd4 <rt_test_010_001_setup+0x14>)
 8007fca:	f7ff ffd1 	bl	8007f70 <chHeapObjectInit>
}
 8007fce:	bd08      	pop	{r3, pc}
 8007fd0:	20001d40 	.word	0x20001d40
 8007fd4:	20001b40 	.word	0x20001b40
	...

08007fe0 <_heap_init>:
void _heap_init(void) {
 8007fe0:	b508      	push	{r3, lr}
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8007fe2:	4805      	ldr	r0, [pc, #20]	; (8007ff8 <_heap_init+0x18>)
 8007fe4:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <_heap_init+0x1c>)
 8007fe6:	6003      	str	r3, [r0, #0]
  H_NEXT(&default_heap.header) = NULL;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	6043      	str	r3, [r0, #4]
  H_PAGES(&default_heap.header) = 0;
 8007fec:	6083      	str	r3, [r0, #8]
  chMtxObjectInit(&default_heap.mtx);
 8007fee:	300c      	adds	r0, #12
 8007ff0:	f7ff fe2e 	bl	8007c50 <chMtxObjectInit>
}
 8007ff4:	bd08      	pop	{r3, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20001ae0 	.word	0x20001ae0
 8007ffc:	08001991 	.word	0x08001991

08008000 <_tm_init>:
void _tm_init(void) {
 8008000:	b510      	push	{r4, lr}
 8008002:	b086      	sub	sp, #24
  ch.tm.offset = (rtcnt_t)0;
 8008004:	4c07      	ldr	r4, [pc, #28]	; (8008024 <_tm_init+0x24>)
 8008006:	2300      	movs	r3, #0
 8008008:	6763      	str	r3, [r4, #116]	; 0x74
  chTMObjectInit(&tm);
 800800a:	4668      	mov	r0, sp
 800800c:	f7f9 ff60 	bl	8001ed0 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
 8008010:	4668      	mov	r0, sp
 8008012:	f7f9 ff55 	bl	8001ec0 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8008016:	4668      	mov	r0, sp
 8008018:	f7f9 ff2a 	bl	8001e70 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800801c:	9b02      	ldr	r3, [sp, #8]
 800801e:	6763      	str	r3, [r4, #116]	; 0x74
}
 8008020:	b006      	add	sp, #24
 8008022:	bd10      	pop	{r4, pc}
 8008024:	20001a18 	.word	0x20001a18
	...

08008030 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4604      	mov	r4, r0
 8008034:	460d      	mov	r5, r1
  return (bool)(tqp->next != (const thread_t *)tqp);
 8008036:	6820      	ldr	r0, [r4, #0]

  while (queue_notempty(tqp)) {
 8008038:	4284      	cmp	r4, r0
 800803a:	d006      	beq.n	800804a <chThdDequeueAllI+0x1a>
  tqp->next             = tp->queue.next;
 800803c:	6803      	ldr	r3, [r0, #0]
 800803e:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8008040:	605c      	str	r4, [r3, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8008042:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8008044:	f002 facc 	bl	800a5e0 <chSchReadyI>
 8008048:	e7f5      	b.n	8008036 <chThdDequeueAllI+0x6>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	0000      	movs	r0, r0
	...

08008050 <chMBResetI>:
 *
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 *
 * @api
 */
void chMBResetI(mailbox_t *mbp) {
 8008050:	b510      	push	{r4, lr}
 8008052:	4604      	mov	r4, r0

  chDbgCheckClassI();
  chDbgCheck(mbp != NULL);

  mbp->wrptr = mbp->buffer;
 8008054:	6803      	ldr	r3, [r0, #0]
 8008056:	6083      	str	r3, [r0, #8]
  mbp->rdptr = mbp->buffer;
 8008058:	60c3      	str	r3, [r0, #12]
  mbp->cnt   = (size_t)0;
 800805a:	2300      	movs	r3, #0
 800805c:	6103      	str	r3, [r0, #16]
  mbp->reset = true;
 800805e:	2301      	movs	r3, #1
 8008060:	7503      	strb	r3, [r0, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8008062:	f06f 0101 	mvn.w	r1, #1
 8008066:	3018      	adds	r0, #24
 8008068:	f7ff ffe2 	bl	8008030 <chThdDequeueAllI>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 800806c:	f06f 0101 	mvn.w	r1, #1
 8008070:	f104 0020 	add.w	r0, r4, #32
 8008074:	f7ff ffdc 	bl	8008030 <chThdDequeueAllI>
}
 8008078:	bd10      	pop	{r4, pc}
 800807a:	bf00      	nop
 800807c:	0000      	movs	r0, r0
	...

08008080 <chMBReset>:
void chMBReset(mailbox_t *mbp) {
 8008080:	b508      	push	{r3, lr}
 8008082:	2320      	movs	r3, #32
 8008084:	f383 8811 	msr	BASEPRI, r3
  chMBResetI(mbp);
 8008088:	f7ff ffe2 	bl	8008050 <chMBResetI>
  chSchRescheduleS();
 800808c:	f002 fa80 	bl	800a590 <chSchRescheduleS>
 8008090:	2300      	movs	r3, #0
 8008092:	f383 8811 	msr	BASEPRI, r3
}
 8008096:	bd08      	pop	{r3, pc}
	...

080080a0 <oslib_test_002_003_teardown>:

static void oslib_test_002_003_teardown(void) {
 80080a0:	b508      	push	{r3, lr}
  chMBReset(&mb1);
 80080a2:	4802      	ldr	r0, [pc, #8]	; (80080ac <oslib_test_002_003_teardown+0xc>)
 80080a4:	f7ff ffec 	bl	8008080 <chMBReset>
}
 80080a8:	bd08      	pop	{r3, pc}
 80080aa:	bf00      	nop
 80080ac:	2000084c 	.word	0x2000084c

080080b0 <oslib_test_002_002_teardown>:
static void oslib_test_002_002_teardown(void) {
 80080b0:	b508      	push	{r3, lr}
  chMBReset(&mb1);
 80080b2:	4802      	ldr	r0, [pc, #8]	; (80080bc <oslib_test_002_002_teardown+0xc>)
 80080b4:	f7ff ffe4 	bl	8008080 <chMBReset>
}
 80080b8:	bd08      	pop	{r3, pc}
 80080ba:	bf00      	nop
 80080bc:	2000084c 	.word	0x2000084c

080080c0 <oslib_test_002_001_teardown>:
static void oslib_test_002_001_teardown(void) {
 80080c0:	b508      	push	{r3, lr}
  chMBReset(&mb1);
 80080c2:	4802      	ldr	r0, [pc, #8]	; (80080cc <oslib_test_002_001_teardown+0xc>)
 80080c4:	f7ff ffdc 	bl	8008080 <chMBReset>
}
 80080c8:	bd08      	pop	{r3, pc}
 80080ca:	bf00      	nop
 80080cc:	2000084c 	.word	0x2000084c

080080d0 <chThdDequeueNextI>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80080d0:	b508      	push	{r3, lr}
 80080d2:	4603      	mov	r3, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 80080d4:	6800      	ldr	r0, [r0, #0]
  if (queue_notempty(tqp)) {
 80080d6:	4283      	cmp	r3, r0
 80080d8:	d005      	beq.n	80080e6 <chThdDequeueNextI+0x16>
  tqp->next             = tp->queue.next;
 80080da:	6802      	ldr	r2, [r0, #0]
 80080dc:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80080de:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = msg;
 80080e0:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80080e2:	f002 fa7d 	bl	800a5e0 <chSchReadyI>
}
 80080e6:	bd08      	pop	{r3, pc}
	...

080080f0 <chMBFetchI>:
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 80080f0:	b508      	push	{r3, lr}

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 80080f2:	7d03      	ldrb	r3, [r0, #20]
 80080f4:	b9ab      	cbnz	r3, 8008122 <chMBFetchI+0x32>
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();

  return mbp->cnt;
 80080f6:	6903      	ldr	r3, [r0, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 80080f8:	b1b3      	cbz	r3, 8008128 <chMBFetchI+0x38>
    *msgp = *mbp->rdptr++;
 80080fa:	68c3      	ldr	r3, [r0, #12]
 80080fc:	1d1a      	adds	r2, r3, #4
 80080fe:	60c2      	str	r2, [r0, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	600b      	str	r3, [r1, #0]
    if (mbp->rdptr >= mbp->top) {
 8008104:	68c2      	ldr	r2, [r0, #12]
 8008106:	6843      	ldr	r3, [r0, #4]
 8008108:	429a      	cmp	r2, r3
 800810a:	d301      	bcc.n	8008110 <chMBFetchI+0x20>
      mbp->rdptr = mbp->buffer;
 800810c:	6803      	ldr	r3, [r0, #0]
 800810e:	60c3      	str	r3, [r0, #12]
    }
    mbp->cnt--;
 8008110:	6903      	ldr	r3, [r0, #16]
 8008112:	3b01      	subs	r3, #1
 8008114:	6103      	str	r3, [r0, #16]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 8008116:	2100      	movs	r1, #0
 8008118:	3018      	adds	r0, #24
 800811a:	f7ff ffd9 	bl	80080d0 <chThdDequeueNextI>

    return MSG_OK;
 800811e:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 8008120:	bd08      	pop	{r3, pc}
    return MSG_RESET;
 8008122:	f06f 0001 	mvn.w	r0, #1
 8008126:	e7fb      	b.n	8008120 <chMBFetchI+0x30>
  return MSG_TIMEOUT;
 8008128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800812c:	e7f8      	b.n	8008120 <chMBFetchI+0x30>
 800812e:	bf00      	nop

08008130 <chMBPostAheadI>:
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 8008130:	b538      	push	{r3, r4, r5, lr}
  if (mbp->reset) {
 8008132:	7d03      	ldrb	r3, [r0, #20]
 8008134:	b9c3      	cbnz	r3, 8008168 <chMBPostAheadI+0x38>
  return (size_t)(mbp->top - mbp->buffer);
 8008136:	6842      	ldr	r2, [r0, #4]
 8008138:	6804      	ldr	r4, [r0, #0]
 800813a:	1b15      	subs	r5, r2, r4
  return mbp->cnt;
 800813c:	6903      	ldr	r3, [r0, #16]
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800813e:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
 8008142:	d014      	beq.n	800816e <chMBPostAheadI+0x3e>
    if (--mbp->rdptr < mbp->buffer) {
 8008144:	68c3      	ldr	r3, [r0, #12]
 8008146:	3b04      	subs	r3, #4
 8008148:	60c3      	str	r3, [r0, #12]
 800814a:	42a3      	cmp	r3, r4
 800814c:	d201      	bcs.n	8008152 <chMBPostAheadI+0x22>
      mbp->rdptr = mbp->top - 1;
 800814e:	3a04      	subs	r2, #4
 8008150:	60c2      	str	r2, [r0, #12]
    *mbp->rdptr = msg;
 8008152:	68c3      	ldr	r3, [r0, #12]
 8008154:	6019      	str	r1, [r3, #0]
    mbp->cnt++;
 8008156:	6903      	ldr	r3, [r0, #16]
 8008158:	3301      	adds	r3, #1
 800815a:	6103      	str	r3, [r0, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800815c:	2100      	movs	r1, #0
 800815e:	3020      	adds	r0, #32
 8008160:	f7ff ffb6 	bl	80080d0 <chThdDequeueNextI>
    return MSG_OK;
 8008164:	2000      	movs	r0, #0
}
 8008166:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 8008168:	f06f 0001 	mvn.w	r0, #1
 800816c:	e7fb      	b.n	8008166 <chMBPostAheadI+0x36>
  return MSG_TIMEOUT;
 800816e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008172:	e7f8      	b.n	8008166 <chMBPostAheadI+0x36>
	...

08008180 <chMBPostI>:
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 8008180:	b508      	push	{r3, lr}
  if (mbp->reset) {
 8008182:	7d03      	ldrb	r3, [r0, #20]
 8008184:	b9cb      	cbnz	r3, 80081ba <chMBPostI+0x3a>
  return (size_t)(mbp->top - mbp->buffer);
 8008186:	6843      	ldr	r3, [r0, #4]
 8008188:	6802      	ldr	r2, [r0, #0]
 800818a:	1a9b      	subs	r3, r3, r2
  return mbp->cnt;
 800818c:	6902      	ldr	r2, [r0, #16]
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800818e:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8008192:	d015      	beq.n	80081c0 <chMBPostI+0x40>
    *mbp->wrptr++ = msg;
 8008194:	6883      	ldr	r3, [r0, #8]
 8008196:	1d1a      	adds	r2, r3, #4
 8008198:	6082      	str	r2, [r0, #8]
 800819a:	6019      	str	r1, [r3, #0]
    if (mbp->wrptr >= mbp->top) {
 800819c:	6882      	ldr	r2, [r0, #8]
 800819e:	6843      	ldr	r3, [r0, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d301      	bcc.n	80081a8 <chMBPostI+0x28>
      mbp->wrptr = mbp->buffer;
 80081a4:	6803      	ldr	r3, [r0, #0]
 80081a6:	6083      	str	r3, [r0, #8]
    mbp->cnt++;
 80081a8:	6903      	ldr	r3, [r0, #16]
 80081aa:	3301      	adds	r3, #1
 80081ac:	6103      	str	r3, [r0, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 80081ae:	2100      	movs	r1, #0
 80081b0:	3020      	adds	r0, #32
 80081b2:	f7ff ff8d 	bl	80080d0 <chThdDequeueNextI>
    return MSG_OK;
 80081b6:	2000      	movs	r0, #0
}
 80081b8:	bd08      	pop	{r3, pc}
    return MSG_RESET;
 80081ba:	f06f 0001 	mvn.w	r0, #1
 80081be:	e7fb      	b.n	80081b8 <chMBPostI+0x38>
  return MSG_TIMEOUT;
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081c4:	e7f8      	b.n	80081b8 <chMBPostI+0x38>
 80081c6:	bf00      	nop
	...

080081d0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 80081d0:	b159      	cbz	r1, 80081ea <chThdEnqueueTimeoutS+0x1a>
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80081d2:	b510      	push	{r4, lr}
  queue_insert(currp, tqp);
 80081d4:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <chThdEnqueueTimeoutS+0x20>)
 80081d6:	699b      	ldr	r3, [r3, #24]
  tp->queue.next             = (thread_t *)tqp;
 80081d8:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = tqp->prev;
 80081da:	6842      	ldr	r2, [r0, #4]
 80081dc:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80081de:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 80081e0:	6043      	str	r3, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80081e2:	2004      	movs	r0, #4
 80081e4:	f002 ff1c 	bl	800b020 <chSchGoSleepTimeoutS>
}
 80081e8:	bd10      	pop	{r4, pc}
    return MSG_TIMEOUT;
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80081ee:	4770      	bx	lr
 80081f0:	20001a18 	.word	0x20001a18
	...

08008200 <chMBFetchTimeoutS>:
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	4604      	mov	r4, r0
 8008204:	460e      	mov	r6, r1
 8008206:	4615      	mov	r5, r2
    if (mbp->reset) {
 8008208:	7d23      	ldrb	r3, [r4, #20]
 800820a:	bb0b      	cbnz	r3, 8008250 <chMBFetchTimeoutS+0x50>
 800820c:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800820e:	b943      	cbnz	r3, 8008222 <chMBFetchTimeoutS+0x22>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8008210:	4629      	mov	r1, r5
 8008212:	f104 0020 	add.w	r0, r4, #32
 8008216:	f7ff ffdb 	bl	80081d0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 800821a:	4603      	mov	r3, r0
 800821c:	2800      	cmp	r0, #0
 800821e:	d0f3      	beq.n	8008208 <chMBFetchTimeoutS+0x8>
 8008220:	e018      	b.n	8008254 <chMBFetchTimeoutS+0x54>
      *msgp = *mbp->rdptr++;
 8008222:	68e3      	ldr	r3, [r4, #12]
 8008224:	1d1a      	adds	r2, r3, #4
 8008226:	60e2      	str	r2, [r4, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6033      	str	r3, [r6, #0]
      if (mbp->rdptr >= mbp->top) {
 800822c:	68e2      	ldr	r2, [r4, #12]
 800822e:	6863      	ldr	r3, [r4, #4]
 8008230:	429a      	cmp	r2, r3
 8008232:	d301      	bcc.n	8008238 <chMBFetchTimeoutS+0x38>
        mbp->rdptr = mbp->buffer;
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	60e3      	str	r3, [r4, #12]
      mbp->cnt--;
 8008238:	6923      	ldr	r3, [r4, #16]
 800823a:	3b01      	subs	r3, #1
 800823c:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 800823e:	2100      	movs	r1, #0
 8008240:	f104 0018 	add.w	r0, r4, #24
 8008244:	f7ff ff44 	bl	80080d0 <chThdDequeueNextI>
      chSchRescheduleS();
 8008248:	f002 f9a2 	bl	800a590 <chSchRescheduleS>
      return MSG_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	e001      	b.n	8008254 <chMBFetchTimeoutS+0x54>
      return MSG_RESET;
 8008250:	f06f 0301 	mvn.w	r3, #1
}
 8008254:	4618      	mov	r0, r3
 8008256:	bd70      	pop	{r4, r5, r6, pc}
	...

08008260 <chMBFetchTimeout>:
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8008260:	b508      	push	{r3, lr}
 8008262:	2320      	movs	r3, #32
 8008264:	f383 8811 	msr	BASEPRI, r3
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 8008268:	f7ff ffca 	bl	8008200 <chMBFetchTimeoutS>
 800826c:	2300      	movs	r3, #0
 800826e:	f383 8811 	msr	BASEPRI, r3
}
 8008272:	bd08      	pop	{r3, pc}
	...

08008280 <Thread1.lto_priv.0>:

static THD_WORKING_AREA(wa1Thread1, 256);
static THD_WORKING_AREA(wa2Thread1, 256);
static THD_FUNCTION(Thread1, arg) {
 8008280:	b530      	push	{r4, r5, lr}
 8008282:	b083      	sub	sp, #12
 8008284:	e002      	b.n	800828c <Thread1.lto_priv.0+0xc>

      /* Returning the job descriptor object.*/
      chGuardedPoolFree(&jqp->free, (void *)jp);
    }
    else {
      msg = MSG_JOB_NULL;
 8008286:	f06f 0401 	mvn.w	r4, #1

  (void)arg;

  do {
    msg = chJobDispatch(&jq);
  } while (msg == MSG_OK);
 800828a:	b99c      	cbnz	r4, 80082b4 <Thread1.lto_priv.0+0x34>
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
 800828c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008290:	a901      	add	r1, sp, #4
 8008292:	4809      	ldr	r0, [pc, #36]	; (80082b8 <Thread1.lto_priv.0+0x38>)
 8008294:	f7ff ffe4 	bl	8008260 <chMBFetchTimeout>
  if (msg == MSG_OK) {
 8008298:	4604      	mov	r4, r0
 800829a:	2800      	cmp	r0, #0
 800829c:	d1f5      	bne.n	800828a <Thread1.lto_priv.0+0xa>
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 800829e:	9d01      	ldr	r5, [sp, #4]
    if (jp->jobfunc != NULL) {
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0ef      	beq.n	8008286 <Thread1.lto_priv.0+0x6>
      jp->jobfunc(jp->jobarg);
 80082a6:	6868      	ldr	r0, [r5, #4]
 80082a8:	4798      	blx	r3
      chGuardedPoolFree(&jqp->free, (void *)jp);
 80082aa:	4629      	mov	r1, r5
 80082ac:	4803      	ldr	r0, [pc, #12]	; (80082bc <Thread1.lto_priv.0+0x3c>)
 80082ae:	f7fc fe37 	bl	8004f20 <chGuardedPoolFree>
 80082b2:	e7ea      	b.n	800828a <Thread1.lto_priv.0+0xa>
}
 80082b4:	b003      	add	sp, #12
 80082b6:	bd30      	pop	{r4, r5, pc}
 80082b8:	20001bb8 	.word	0x20001bb8
 80082bc:	20001b9c 	.word	0x20001b9c

080082c0 <chMBPostAheadTimeoutS>:
msg_t chMBPostAheadTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	4604      	mov	r4, r0
 80082c4:	460e      	mov	r6, r1
 80082c6:	4617      	mov	r7, r2
    if (mbp->reset) {
 80082c8:	7d23      	ldrb	r3, [r4, #20]
 80082ca:	bb23      	cbnz	r3, 8008316 <chMBPostAheadTimeoutS+0x56>
  return (size_t)(mbp->top - mbp->buffer);
 80082cc:	6863      	ldr	r3, [r4, #4]
 80082ce:	6820      	ldr	r0, [r4, #0]
 80082d0:	1a1a      	subs	r2, r3, r0
  return mbp->cnt;
 80082d2:	6925      	ldr	r5, [r4, #16]
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80082d4:	ebb5 0fa2 	cmp.w	r5, r2, asr #2
 80082d8:	d108      	bne.n	80082ec <chMBPostAheadTimeoutS+0x2c>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 80082da:	4639      	mov	r1, r7
 80082dc:	f104 0018 	add.w	r0, r4, #24
 80082e0:	f7ff ff76 	bl	80081d0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 80082e4:	4603      	mov	r3, r0
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d0ee      	beq.n	80082c8 <chMBPostAheadTimeoutS+0x8>
 80082ea:	e016      	b.n	800831a <chMBPostAheadTimeoutS+0x5a>
      if (--mbp->rdptr < mbp->buffer) {
 80082ec:	68e2      	ldr	r2, [r4, #12]
 80082ee:	3a04      	subs	r2, #4
 80082f0:	60e2      	str	r2, [r4, #12]
 80082f2:	4282      	cmp	r2, r0
 80082f4:	d201      	bcs.n	80082fa <chMBPostAheadTimeoutS+0x3a>
        mbp->rdptr = mbp->top - 1;
 80082f6:	3b04      	subs	r3, #4
 80082f8:	60e3      	str	r3, [r4, #12]
      *mbp->rdptr = msg;
 80082fa:	68e3      	ldr	r3, [r4, #12]
 80082fc:	601e      	str	r6, [r3, #0]
      mbp->cnt++;
 80082fe:	6923      	ldr	r3, [r4, #16]
 8008300:	3301      	adds	r3, #1
 8008302:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8008304:	2100      	movs	r1, #0
 8008306:	f104 0020 	add.w	r0, r4, #32
 800830a:	f7ff fee1 	bl	80080d0 <chThdDequeueNextI>
      chSchRescheduleS();
 800830e:	f002 f93f 	bl	800a590 <chSchRescheduleS>
      return MSG_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	e001      	b.n	800831a <chMBPostAheadTimeoutS+0x5a>
      return MSG_RESET;
 8008316:	f06f 0301 	mvn.w	r3, #1
}
 800831a:	4618      	mov	r0, r3
 800831c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831e:	bf00      	nop

08008320 <chMBPostAheadTimeout>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8008320:	b508      	push	{r3, lr}
 8008322:	2320      	movs	r3, #32
 8008324:	f383 8811 	msr	BASEPRI, r3
  rdymsg = chMBPostAheadTimeoutS(mbp, msg, timeout);
 8008328:	f7ff ffca 	bl	80082c0 <chMBPostAheadTimeoutS>
 800832c:	2300      	movs	r3, #0
 800832e:	f383 8811 	msr	BASEPRI, r3
}
 8008332:	bd08      	pop	{r3, pc}
	...

08008340 <chMBPostTimeoutS>:
msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	4604      	mov	r4, r0
 8008344:	460e      	mov	r6, r1
 8008346:	4615      	mov	r5, r2
    if (mbp->reset) {
 8008348:	7d23      	ldrb	r3, [r4, #20]
 800834a:	bb2b      	cbnz	r3, 8008398 <chMBPostTimeoutS+0x58>
  return (size_t)(mbp->top - mbp->buffer);
 800834c:	6863      	ldr	r3, [r4, #4]
 800834e:	6822      	ldr	r2, [r4, #0]
 8008350:	1a9b      	subs	r3, r3, r2
  return mbp->cnt;
 8008352:	6920      	ldr	r0, [r4, #16]
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8008354:	ebb0 0fa3 	cmp.w	r0, r3, asr #2
 8008358:	d108      	bne.n	800836c <chMBPostTimeoutS+0x2c>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800835a:	4629      	mov	r1, r5
 800835c:	f104 0018 	add.w	r0, r4, #24
 8008360:	f7ff ff36 	bl	80081d0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8008364:	4603      	mov	r3, r0
 8008366:	2800      	cmp	r0, #0
 8008368:	d0ee      	beq.n	8008348 <chMBPostTimeoutS+0x8>
 800836a:	e017      	b.n	800839c <chMBPostTimeoutS+0x5c>
      *mbp->wrptr++ = msg;
 800836c:	68a3      	ldr	r3, [r4, #8]
 800836e:	1d1a      	adds	r2, r3, #4
 8008370:	60a2      	str	r2, [r4, #8]
 8008372:	601e      	str	r6, [r3, #0]
      if (mbp->wrptr >= mbp->top) {
 8008374:	68a2      	ldr	r2, [r4, #8]
 8008376:	6863      	ldr	r3, [r4, #4]
 8008378:	429a      	cmp	r2, r3
 800837a:	d301      	bcc.n	8008380 <chMBPostTimeoutS+0x40>
        mbp->wrptr = mbp->buffer;
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	60a3      	str	r3, [r4, #8]
      mbp->cnt++;
 8008380:	6923      	ldr	r3, [r4, #16]
 8008382:	3301      	adds	r3, #1
 8008384:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8008386:	2100      	movs	r1, #0
 8008388:	f104 0020 	add.w	r0, r4, #32
 800838c:	f7ff fea0 	bl	80080d0 <chThdDequeueNextI>
      chSchRescheduleS();
 8008390:	f002 f8fe 	bl	800a590 <chSchRescheduleS>
      return MSG_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	e001      	b.n	800839c <chMBPostTimeoutS+0x5c>
      return MSG_RESET;
 8008398:	f06f 0301 	mvn.w	r3, #1
}
 800839c:	4618      	mov	r0, r3
 800839e:	bd70      	pop	{r4, r5, r6, pc}

080083a0 <chMBPostTimeout>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 80083a0:	b508      	push	{r3, lr}
 80083a2:	2320      	movs	r3, #32
 80083a4:	f383 8811 	msr	BASEPRI, r3
  rdymsg = chMBPostTimeoutS(mbp, msg, timeout);
 80083a8:	f7ff ffca 	bl	8008340 <chMBPostTimeoutS>
 80083ac:	2300      	movs	r3, #0
 80083ae:	f383 8811 	msr	BASEPRI, r3
}
 80083b2:	bd08      	pop	{r3, pc}
	...

080083c0 <oslib_test_002_003_execute>:

static void oslib_test_002_003_execute(void) {
 80083c0:	b530      	push	{r4, r5, lr}
 80083c2:	b083      	sub	sp, #12
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 80083c4:	4b46      	ldr	r3, [pc, #280]	; (80084e0 <oslib_test_002_003_execute+0x120>)
 80083c6:	2201      	movs	r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
  {
    for (i = 0; i < MB_SIZE; i++) {
 80083ca:	2400      	movs	r4, #0
 80083cc:	2c03      	cmp	r4, #3
 80083ce:	d80f      	bhi.n	80083f0 <oslib_test_002_003_execute+0x30>
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 80083d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083d4:	f104 0142 	add.w	r1, r4, #66	; 0x42
 80083d8:	4842      	ldr	r0, [pc, #264]	; (80084e4 <oslib_test_002_003_execute+0x124>)
 80083da:	f7ff ffe1 	bl	80083a0 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80083de:	4942      	ldr	r1, [pc, #264]	; (80084e8 <oslib_test_002_003_execute+0x128>)
 80083e0:	fab0 f080 	clz	r0, r0
 80083e4:	0940      	lsrs	r0, r0, #5
 80083e6:	f7f8 ff03 	bl	80011f0 <_test_assert>
 80083ea:	b990      	cbnz	r0, 8008412 <oslib_test_002_003_execute+0x52>
    for (i = 0; i < MB_SIZE; i++) {
 80083ec:	3401      	adds	r4, #1
 80083ee:	e7ed      	b.n	80083cc <oslib_test_002_003_execute+0xc>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 80083f0:	4b3b      	ldr	r3, [pc, #236]	; (80084e0 <oslib_test_002_003_execute+0x120>)
 80083f2:	2202      	movs	r2, #2
 80083f4:	601a      	str	r2, [r3, #0]
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 80083f6:	2201      	movs	r2, #1
 80083f8:	2158      	movs	r1, #88	; 0x58
 80083fa:	483a      	ldr	r0, [pc, #232]	; (80084e4 <oslib_test_002_003_execute+0x124>)
 80083fc:	f7ff ffd0 	bl	80083a0 <chMBPostTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8008400:	4939      	ldr	r1, [pc, #228]	; (80084e8 <oslib_test_002_003_execute+0x128>)
 8008402:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008406:	bf14      	ite	ne
 8008408:	2000      	movne	r0, #0
 800840a:	2001      	moveq	r0, #1
 800840c:	f7f8 fef0 	bl	80011f0 <_test_assert>
 8008410:	b108      	cbz	r0, 8008416 <oslib_test_002_003_execute+0x56>
    msg1 = chMBFetchI(&mb1, &msg2);
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
  }
  test_end_step(4);
}
 8008412:	b003      	add	sp, #12
 8008414:	bd30      	pop	{r4, r5, pc}
 8008416:	2320      	movs	r3, #32
 8008418:	f383 8811 	msr	BASEPRI, r3
    msg1 = chMBPostI(&mb1, 'X');
 800841c:	2158      	movs	r1, #88	; 0x58
 800841e:	4831      	ldr	r0, [pc, #196]	; (80084e4 <oslib_test_002_003_execute+0x124>)
 8008420:	f7ff feae 	bl	8008180 <chMBPostI>
 8008424:	2300      	movs	r3, #0
 8008426:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800842a:	492f      	ldr	r1, [pc, #188]	; (80084e8 <oslib_test_002_003_execute+0x128>)
 800842c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008430:	bf14      	ite	ne
 8008432:	2000      	movne	r0, #0
 8008434:	2001      	moveq	r0, #1
 8008436:	f7f8 fedb 	bl	80011f0 <_test_assert>
 800843a:	2800      	cmp	r0, #0
 800843c:	d1e9      	bne.n	8008412 <oslib_test_002_003_execute+0x52>
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 800843e:	2201      	movs	r2, #1
 8008440:	2158      	movs	r1, #88	; 0x58
 8008442:	4828      	ldr	r0, [pc, #160]	; (80084e4 <oslib_test_002_003_execute+0x124>)
 8008444:	f7ff ff6c 	bl	8008320 <chMBPostAheadTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8008448:	4927      	ldr	r1, [pc, #156]	; (80084e8 <oslib_test_002_003_execute+0x128>)
 800844a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800844e:	bf14      	ite	ne
 8008450:	2000      	movne	r0, #0
 8008452:	2001      	moveq	r0, #1
 8008454:	f7f8 fecc 	bl	80011f0 <_test_assert>
 8008458:	2800      	cmp	r0, #0
 800845a:	d1da      	bne.n	8008412 <oslib_test_002_003_execute+0x52>
 800845c:	2320      	movs	r3, #32
 800845e:	f383 8811 	msr	BASEPRI, r3
    msg1 = chMBPostAheadI(&mb1, 'X');
 8008462:	2158      	movs	r1, #88	; 0x58
 8008464:	481f      	ldr	r0, [pc, #124]	; (80084e4 <oslib_test_002_003_execute+0x124>)
 8008466:	f7ff fe63 	bl	8008130 <chMBPostAheadI>
 800846a:	2300      	movs	r3, #0
 800846c:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 8008470:	491d      	ldr	r1, [pc, #116]	; (80084e8 <oslib_test_002_003_execute+0x128>)
 8008472:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008476:	bf14      	ite	ne
 8008478:	2000      	movne	r0, #0
 800847a:	2001      	moveq	r0, #1
 800847c:	f7f8 feb8 	bl	80011f0 <_test_assert>
 8008480:	2800      	cmp	r0, #0
 8008482:	d1c6      	bne.n	8008412 <oslib_test_002_003_execute+0x52>
  test_set_step(3);
 8008484:	4d16      	ldr	r5, [pc, #88]	; (80084e0 <oslib_test_002_003_execute+0x120>)
 8008486:	2303      	movs	r3, #3
 8008488:	602b      	str	r3, [r5, #0]
    chMBReset(&mb1);
 800848a:	4c16      	ldr	r4, [pc, #88]	; (80084e4 <oslib_test_002_003_execute+0x124>)
 800848c:	4620      	mov	r0, r4
 800848e:	f7ff fdf7 	bl	8008080 <chMBReset>
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 8008492:	2300      	movs	r3, #0
 8008494:	7523      	strb	r3, [r4, #20]
  test_set_step(4);
 8008496:	2304      	movs	r3, #4
 8008498:	602b      	str	r3, [r5, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800849a:	2201      	movs	r2, #1
 800849c:	eb0d 0103 	add.w	r1, sp, r3
 80084a0:	4620      	mov	r0, r4
 80084a2:	f7ff fedd 	bl	8008260 <chMBFetchTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80084a6:	4910      	ldr	r1, [pc, #64]	; (80084e8 <oslib_test_002_003_execute+0x128>)
 80084a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80084ac:	bf14      	ite	ne
 80084ae:	2000      	movne	r0, #0
 80084b0:	2001      	moveq	r0, #1
 80084b2:	f7f8 fe9d 	bl	80011f0 <_test_assert>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d1ab      	bne.n	8008412 <oslib_test_002_003_execute+0x52>
 80084ba:	2320      	movs	r3, #32
 80084bc:	f383 8811 	msr	BASEPRI, r3
    msg1 = chMBFetchI(&mb1, &msg2);
 80084c0:	a901      	add	r1, sp, #4
 80084c2:	4620      	mov	r0, r4
 80084c4:	f7ff fe14 	bl	80080f0 <chMBFetchI>
 80084c8:	2300      	movs	r3, #0
 80084ca:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 80084ce:	4906      	ldr	r1, [pc, #24]	; (80084e8 <oslib_test_002_003_execute+0x128>)
 80084d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80084d4:	bf14      	ite	ne
 80084d6:	2000      	movne	r0, #0
 80084d8:	2001      	moveq	r0, #1
 80084da:	f7f8 fe89 	bl	80011f0 <_test_assert>
 80084de:	e798      	b.n	8008412 <oslib_test_002_003_execute+0x52>
 80084e0:	20002454 	.word	0x20002454
 80084e4:	2000084c 	.word	0x2000084c
 80084e8:	0800ce94 	.word	0x0800ce94
 80084ec:	00000000 	.word	0x00000000

080084f0 <oslib_test_002_002_execute>:
static void oslib_test_002_002_execute(void) {
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	b082      	sub	sp, #8
  test_set_step(1);
 80084f4:	4bb0      	ldr	r3, [pc, #704]	; (80087b8 <oslib_test_002_002_execute+0x2c8>)
 80084f6:	2201      	movs	r2, #1
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	2320      	movs	r3, #32
 80084fc:	f383 8811 	msr	BASEPRI, r3
  return (size_t)(mbp->top - mbp->buffer);
 8008500:	4aae      	ldr	r2, [pc, #696]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 8008502:	6850      	ldr	r0, [r2, #4]
 8008504:	6813      	ldr	r3, [r2, #0]
 8008506:	1ac3      	subs	r3, r0, r3
  return mbp->cnt;
 8008508:	6910      	ldr	r0, [r2, #16]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800850a:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 800850e:	49ac      	ldr	r1, [pc, #688]	; (80087c0 <oslib_test_002_002_execute+0x2d0>)
 8008510:	2804      	cmp	r0, #4
 8008512:	bf14      	ite	ne
 8008514:	2000      	movne	r0, #0
 8008516:	2001      	moveq	r0, #1
 8008518:	f7f8 fe6a 	bl	80011f0 <_test_assert>
 800851c:	b120      	cbz	r0, 8008528 <oslib_test_002_002_execute+0x38>
 800851e:	2300      	movs	r3, #0
 8008520:	f383 8811 	msr	BASEPRI, r3
}
 8008524:	b002      	add	sp, #8
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	2600      	movs	r6, #0
 800852a:	f386 8811 	msr	BASEPRI, r6
  test_set_step(2);
 800852e:	4ba2      	ldr	r3, [pc, #648]	; (80087b8 <oslib_test_002_002_execute+0x2c8>)
 8008530:	2202      	movs	r2, #2
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	2520      	movs	r5, #32
 8008536:	f385 8811 	msr	BASEPRI, r5
    chMBResetI(&mb1);
 800853a:	4ca0      	ldr	r4, [pc, #640]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 800853c:	4620      	mov	r0, r4
 800853e:	f7ff fd87 	bl	8008050 <chMBResetI>
 8008542:	f386 8811 	msr	BASEPRI, r6
 8008546:	f385 8811 	msr	BASEPRI, r5
  return (size_t)(mbp->top - mbp->buffer);
 800854a:	6860      	ldr	r0, [r4, #4]
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	1ac3      	subs	r3, r0, r3
  return mbp->cnt;
 8008550:	6920      	ldr	r0, [r4, #16]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8008552:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8008556:	499b      	ldr	r1, [pc, #620]	; (80087c4 <oslib_test_002_002_execute+0x2d4>)
 8008558:	2804      	cmp	r0, #4
 800855a:	bf14      	ite	ne
 800855c:	2000      	movne	r0, #0
 800855e:	2001      	moveq	r0, #1
 8008560:	f7f8 fe46 	bl	80011f0 <_test_assert>
 8008564:	b110      	cbz	r0, 800856c <oslib_test_002_002_execute+0x7c>
 8008566:	f386 8811 	msr	BASEPRI, r6
 800856a:	e7db      	b.n	8008524 <oslib_test_002_002_execute+0x34>
 800856c:	2300      	movs	r3, #0
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	2320      	movs	r3, #32
 8008574:	f383 8811 	msr	BASEPRI, r3
  return mbp->cnt;
 8008578:	4b90      	ldr	r3, [pc, #576]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 800857a:	6918      	ldr	r0, [r3, #16]
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800857c:	4992      	ldr	r1, [pc, #584]	; (80087c8 <oslib_test_002_002_execute+0x2d8>)
 800857e:	fab0 f080 	clz	r0, r0
 8008582:	0940      	lsrs	r0, r0, #5
 8008584:	f7f8 fe34 	bl	80011f0 <_test_assert>
 8008588:	b118      	cbz	r0, 8008592 <oslib_test_002_002_execute+0xa2>
 800858a:	2300      	movs	r3, #0
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	e7c8      	b.n	8008524 <oslib_test_002_002_execute+0x34>
 8008592:	2300      	movs	r3, #0
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	2320      	movs	r3, #32
 800859a:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800859e:	4b87      	ldr	r3, [pc, #540]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	4989      	ldr	r1, [pc, #548]	; (80087cc <oslib_test_002_002_execute+0x2dc>)
 80085a6:	4298      	cmp	r0, r3
 80085a8:	bf14      	ite	ne
 80085aa:	2000      	movne	r0, #0
 80085ac:	2001      	moveq	r0, #1
 80085ae:	f7f8 fe1f 	bl	80011f0 <_test_assert>
 80085b2:	b118      	cbz	r0, 80085bc <oslib_test_002_002_execute+0xcc>
 80085b4:	2300      	movs	r3, #0
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	e7b3      	b.n	8008524 <oslib_test_002_002_execute+0x34>
 80085bc:	2300      	movs	r3, #0
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	2320      	movs	r3, #32
 80085c4:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 80085c8:	4b7c      	ldr	r3, [pc, #496]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	4980      	ldr	r1, [pc, #512]	; (80087d0 <oslib_test_002_002_execute+0x2e0>)
 80085d0:	4298      	cmp	r0, r3
 80085d2:	bf14      	ite	ne
 80085d4:	2000      	movne	r0, #0
 80085d6:	2001      	moveq	r0, #1
 80085d8:	f7f8 fe0a 	bl	80011f0 <_test_assert>
 80085dc:	b9f0      	cbnz	r0, 800861c <oslib_test_002_002_execute+0x12c>
 80085de:	2400      	movs	r4, #0
 80085e0:	f384 8811 	msr	BASEPRI, r4
  mbp->reset = false;
 80085e4:	4b75      	ldr	r3, [pc, #468]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 80085e6:	751c      	strb	r4, [r3, #20]
  test_set_step(3);
 80085e8:	4b73      	ldr	r3, [pc, #460]	; (80087b8 <oslib_test_002_002_execute+0x2c8>)
 80085ea:	2203      	movs	r2, #3
 80085ec:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MB_SIZE - 1; i++) {
 80085ee:	2c02      	cmp	r4, #2
 80085f0:	d818      	bhi.n	8008624 <oslib_test_002_002_execute+0x134>
 80085f2:	2320      	movs	r3, #32
 80085f4:	f383 8811 	msr	BASEPRI, r3
      msg1 = chMBPostI(&mb1, 'B' + i);
 80085f8:	f104 0142 	add.w	r1, r4, #66	; 0x42
 80085fc:	486f      	ldr	r0, [pc, #444]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 80085fe:	f7ff fdbf 	bl	8008180 <chMBPostI>
 8008602:	2300      	movs	r3, #0
 8008604:	f383 8811 	msr	BASEPRI, r3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8008608:	4972      	ldr	r1, [pc, #456]	; (80087d4 <oslib_test_002_002_execute+0x2e4>)
 800860a:	fab0 f080 	clz	r0, r0
 800860e:	0940      	lsrs	r0, r0, #5
 8008610:	f7f8 fdee 	bl	80011f0 <_test_assert>
 8008614:	2800      	cmp	r0, #0
 8008616:	d185      	bne.n	8008524 <oslib_test_002_002_execute+0x34>
    for (i = 0; i < MB_SIZE - 1; i++) {
 8008618:	3401      	adds	r4, #1
 800861a:	e7e8      	b.n	80085ee <oslib_test_002_002_execute+0xfe>
 800861c:	2300      	movs	r3, #0
 800861e:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8008622:	e77f      	b.n	8008524 <oslib_test_002_002_execute+0x34>
 8008624:	2320      	movs	r3, #32
 8008626:	f383 8811 	msr	BASEPRI, r3
    msg1 = chMBPostAheadI(&mb1, 'A');
 800862a:	2141      	movs	r1, #65	; 0x41
 800862c:	4863      	ldr	r0, [pc, #396]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 800862e:	f7ff fd7f 	bl	8008130 <chMBPostAheadI>
 8008632:	2300      	movs	r3, #0
 8008634:	f383 8811 	msr	BASEPRI, r3
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8008638:	4966      	ldr	r1, [pc, #408]	; (80087d4 <oslib_test_002_002_execute+0x2e4>)
 800863a:	fab0 f080 	clz	r0, r0
 800863e:	0940      	lsrs	r0, r0, #5
 8008640:	f7f8 fdd6 	bl	80011f0 <_test_assert>
 8008644:	2800      	cmp	r0, #0
 8008646:	f47f af6d 	bne.w	8008524 <oslib_test_002_002_execute+0x34>
  test_set_step(4);
 800864a:	4b5b      	ldr	r3, [pc, #364]	; (80087b8 <oslib_test_002_002_execute+0x2c8>)
 800864c:	2204      	movs	r2, #4
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	2320      	movs	r3, #32
 8008652:	f383 8811 	msr	BASEPRI, r3
  return (size_t)(mbp->top - mbp->buffer);
 8008656:	4a59      	ldr	r2, [pc, #356]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 8008658:	6853      	ldr	r3, [r2, #4]
 800865a:	6811      	ldr	r1, [r2, #0]
 800865c:	1a5b      	subs	r3, r3, r1
  return mbp->cnt;
 800865e:	6912      	ldr	r2, [r2, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 8008660:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8008664:	495c      	ldr	r1, [pc, #368]	; (80087d8 <oslib_test_002_002_execute+0x2e8>)
 8008666:	bf0c      	ite	eq
 8008668:	2001      	moveq	r0, #1
 800866a:	2000      	movne	r0, #0
 800866c:	f7f8 fdc0 	bl	80011f0 <_test_assert>
 8008670:	b118      	cbz	r0, 800867a <oslib_test_002_002_execute+0x18a>
 8008672:	2300      	movs	r3, #0
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	e754      	b.n	8008524 <oslib_test_002_002_execute+0x34>
 800867a:	2300      	movs	r3, #0
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	2320      	movs	r3, #32
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	4b4d      	ldr	r3, [pc, #308]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 8008688:	6918      	ldr	r0, [r3, #16]
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800868a:	4954      	ldr	r1, [pc, #336]	; (80087dc <oslib_test_002_002_execute+0x2ec>)
 800868c:	2804      	cmp	r0, #4
 800868e:	bf14      	ite	ne
 8008690:	2000      	movne	r0, #0
 8008692:	2001      	moveq	r0, #1
 8008694:	f7f8 fdac 	bl	80011f0 <_test_assert>
 8008698:	b118      	cbz	r0, 80086a2 <oslib_test_002_002_execute+0x1b2>
 800869a:	2300      	movs	r3, #0
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	e740      	b.n	8008524 <oslib_test_002_002_execute+0x34>
 80086a2:	2300      	movs	r3, #0
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	2320      	movs	r3, #32
 80086aa:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 80086ae:	4b43      	ldr	r3, [pc, #268]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 80086b0:	68d8      	ldr	r0, [r3, #12]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	494a      	ldr	r1, [pc, #296]	; (80087e0 <oslib_test_002_002_execute+0x2f0>)
 80086b6:	4298      	cmp	r0, r3
 80086b8:	bf14      	ite	ne
 80086ba:	2000      	movne	r0, #0
 80086bc:	2001      	moveq	r0, #1
 80086be:	f7f8 fd97 	bl	80011f0 <_test_assert>
 80086c2:	b930      	cbnz	r0, 80086d2 <oslib_test_002_002_execute+0x1e2>
 80086c4:	2400      	movs	r4, #0
 80086c6:	f384 8811 	msr	BASEPRI, r4
  test_set_step(5);
 80086ca:	4b3b      	ldr	r3, [pc, #236]	; (80087b8 <oslib_test_002_002_execute+0x2c8>)
 80086cc:	2205      	movs	r2, #5
 80086ce:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MB_SIZE; i++) {
 80086d0:	e008      	b.n	80086e4 <oslib_test_002_002_execute+0x1f4>
 80086d2:	2300      	movs	r3, #0
 80086d4:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 80086d8:	e724      	b.n	8008524 <oslib_test_002_002_execute+0x34>
      test_emit_token(msg2);
 80086da:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80086de:	f7f8 f897 	bl	8000810 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 80086e2:	3401      	adds	r4, #1
 80086e4:	2c03      	cmp	r4, #3
 80086e6:	d812      	bhi.n	800870e <oslib_test_002_002_execute+0x21e>
 80086e8:	2320      	movs	r3, #32
 80086ea:	f383 8811 	msr	BASEPRI, r3
      msg1 = chMBFetchI(&mb1, &msg2);
 80086ee:	a901      	add	r1, sp, #4
 80086f0:	4832      	ldr	r0, [pc, #200]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 80086f2:	f7ff fcfd 	bl	80080f0 <chMBFetchI>
 80086f6:	2300      	movs	r3, #0
 80086f8:	f383 8811 	msr	BASEPRI, r3
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80086fc:	4935      	ldr	r1, [pc, #212]	; (80087d4 <oslib_test_002_002_execute+0x2e4>)
 80086fe:	fab0 f080 	clz	r0, r0
 8008702:	0940      	lsrs	r0, r0, #5
 8008704:	f7f8 fd74 	bl	80011f0 <_test_assert>
 8008708:	2800      	cmp	r0, #0
 800870a:	d0e6      	beq.n	80086da <oslib_test_002_002_execute+0x1ea>
 800870c:	e70a      	b.n	8008524 <oslib_test_002_002_execute+0x34>
    test_assert_sequence("ABCD", "wrong get sequence");
 800870e:	4935      	ldr	r1, [pc, #212]	; (80087e4 <oslib_test_002_002_execute+0x2f4>)
 8008710:	4835      	ldr	r0, [pc, #212]	; (80087e8 <oslib_test_002_002_execute+0x2f8>)
 8008712:	f7f8 fe1d 	bl	8001350 <_test_assert_sequence>
 8008716:	2800      	cmp	r0, #0
 8008718:	f47f af04 	bne.w	8008524 <oslib_test_002_002_execute+0x34>
  test_set_step(6);
 800871c:	4b26      	ldr	r3, [pc, #152]	; (80087b8 <oslib_test_002_002_execute+0x2c8>)
 800871e:	2206      	movs	r2, #6
 8008720:	601a      	str	r2, [r3, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8008722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008726:	f104 0142 	add.w	r1, r4, #66	; 0x42
 800872a:	4824      	ldr	r0, [pc, #144]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 800872c:	f7ff fe38 	bl	80083a0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8008730:	4928      	ldr	r1, [pc, #160]	; (80087d4 <oslib_test_002_002_execute+0x2e4>)
 8008732:	fab0 f080 	clz	r0, r0
 8008736:	0940      	lsrs	r0, r0, #5
 8008738:	f7f8 fd5a 	bl	80011f0 <_test_assert>
 800873c:	2800      	cmp	r0, #0
 800873e:	f47f aef1 	bne.w	8008524 <oslib_test_002_002_execute+0x34>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8008742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008746:	a901      	add	r1, sp, #4
 8008748:	481c      	ldr	r0, [pc, #112]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 800874a:	f7ff fd89 	bl	8008260 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800874e:	4921      	ldr	r1, [pc, #132]	; (80087d4 <oslib_test_002_002_execute+0x2e4>)
 8008750:	fab0 f080 	clz	r0, r0
 8008754:	0940      	lsrs	r0, r0, #5
 8008756:	f7f8 fd4b 	bl	80011f0 <_test_assert>
 800875a:	2800      	cmp	r0, #0
 800875c:	f47f aee2 	bne.w	8008524 <oslib_test_002_002_execute+0x34>
  test_set_step(7);
 8008760:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <oslib_test_002_002_execute+0x2c8>)
 8008762:	2207      	movs	r2, #7
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	2320      	movs	r3, #32
 8008768:	f383 8811 	msr	BASEPRI, r3
  return (size_t)(mbp->top - mbp->buffer);
 800876c:	4a13      	ldr	r2, [pc, #76]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 800876e:	6853      	ldr	r3, [r2, #4]
 8008770:	6810      	ldr	r0, [r2, #0]
 8008772:	1a1b      	subs	r3, r3, r0
  return mbp->cnt;
 8008774:	6910      	ldr	r0, [r2, #16]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8008776:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800877a:	4912      	ldr	r1, [pc, #72]	; (80087c4 <oslib_test_002_002_execute+0x2d4>)
 800877c:	2804      	cmp	r0, #4
 800877e:	bf14      	ite	ne
 8008780:	2000      	movne	r0, #0
 8008782:	2001      	moveq	r0, #1
 8008784:	f7f8 fd34 	bl	80011f0 <_test_assert>
 8008788:	b118      	cbz	r0, 8008792 <oslib_test_002_002_execute+0x2a2>
 800878a:	2300      	movs	r3, #0
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	e6c8      	b.n	8008524 <oslib_test_002_002_execute+0x34>
 8008792:	2300      	movs	r3, #0
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	2320      	movs	r3, #32
 800879a:	f383 8811 	msr	BASEPRI, r3
  return mbp->cnt;
 800879e:	4b07      	ldr	r3, [pc, #28]	; (80087bc <oslib_test_002_002_execute+0x2cc>)
 80087a0:	6918      	ldr	r0, [r3, #16]
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80087a2:	4909      	ldr	r1, [pc, #36]	; (80087c8 <oslib_test_002_002_execute+0x2d8>)
 80087a4:	fab0 f080 	clz	r0, r0
 80087a8:	0940      	lsrs	r0, r0, #5
 80087aa:	f7f8 fd21 	bl	80011f0 <_test_assert>
 80087ae:	b1e8      	cbz	r0, 80087ec <oslib_test_002_002_execute+0x2fc>
 80087b0:	2300      	movs	r3, #0
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	e6b5      	b.n	8008524 <oslib_test_002_002_execute+0x34>
 80087b8:	20002454 	.word	0x20002454
 80087bc:	2000084c 	.word	0x2000084c
 80087c0:	0800cbb0 	.word	0x0800cbb0
 80087c4:	0800ca7c 	.word	0x0800ca7c
 80087c8:	0800cf2c 	.word	0x0800cf2c
 80087cc:	0800cf38 	.word	0x0800cf38
 80087d0:	0800cf5c 	.word	0x0800cf5c
 80087d4:	0800ce94 	.word	0x0800ce94
 80087d8:	0800cf80 	.word	0x0800cf80
 80087dc:	0800cf8c 	.word	0x0800cf8c
 80087e0:	0800cf98 	.word	0x0800cf98
 80087e4:	0800cfb0 	.word	0x0800cfb0
 80087e8:	0800c9d8 	.word	0x0800c9d8
 80087ec:	2300      	movs	r3, #0
 80087ee:	f383 8811 	msr	BASEPRI, r3
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80087f2:	4b0c      	ldr	r3, [pc, #48]	; (8008824 <oslib_test_002_002_execute+0x334>)
 80087f4:	6818      	ldr	r0, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	490b      	ldr	r1, [pc, #44]	; (8008828 <oslib_test_002_002_execute+0x338>)
 80087fa:	4298      	cmp	r0, r3
 80087fc:	bf14      	ite	ne
 80087fe:	2000      	movne	r0, #0
 8008800:	2001      	moveq	r0, #1
 8008802:	f7f8 fcf5 	bl	80011f0 <_test_assert>
 8008806:	2800      	cmp	r0, #0
 8008808:	f47f ae8c 	bne.w	8008524 <oslib_test_002_002_execute+0x34>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800880c:	4b05      	ldr	r3, [pc, #20]	; (8008824 <oslib_test_002_002_execute+0x334>)
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	4906      	ldr	r1, [pc, #24]	; (800882c <oslib_test_002_002_execute+0x33c>)
 8008814:	4298      	cmp	r0, r3
 8008816:	bf14      	ite	ne
 8008818:	2000      	movne	r0, #0
 800881a:	2001      	moveq	r0, #1
 800881c:	f7f8 fce8 	bl	80011f0 <_test_assert>
 8008820:	e680      	b.n	8008524 <oslib_test_002_002_execute+0x34>
 8008822:	bf00      	nop
 8008824:	2000084c 	.word	0x2000084c
 8008828:	0800cf38 	.word	0x0800cf38
 800882c:	0800cf5c 	.word	0x0800cf5c

08008830 <oslib_test_002_001_execute>:
static void oslib_test_002_001_execute(void) {
 8008830:	b510      	push	{r4, lr}
 8008832:	b082      	sub	sp, #8
  test_set_step(1);
 8008834:	4b99      	ldr	r3, [pc, #612]	; (8008a9c <oslib_test_002_001_execute+0x26c>)
 8008836:	2201      	movs	r2, #1
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	2320      	movs	r3, #32
 800883c:	f383 8811 	msr	BASEPRI, r3
  return (size_t)(mbp->top - mbp->buffer);
 8008840:	4a97      	ldr	r2, [pc, #604]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 8008842:	6850      	ldr	r0, [r2, #4]
 8008844:	6813      	ldr	r3, [r2, #0]
 8008846:	1ac3      	subs	r3, r0, r3
  return mbp->cnt;
 8008848:	6910      	ldr	r0, [r2, #16]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800884a:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "wrong size");
 800884e:	4995      	ldr	r1, [pc, #596]	; (8008aa4 <oslib_test_002_001_execute+0x274>)
 8008850:	2804      	cmp	r0, #4
 8008852:	bf14      	ite	ne
 8008854:	2000      	movne	r0, #0
 8008856:	2001      	moveq	r0, #1
 8008858:	f7f8 fcca 	bl	80011f0 <_test_assert>
 800885c:	b120      	cbz	r0, 8008868 <oslib_test_002_001_execute+0x38>
 800885e:	2300      	movs	r3, #0
 8008860:	f383 8811 	msr	BASEPRI, r3
}
 8008864:	b002      	add	sp, #8
 8008866:	bd10      	pop	{r4, pc}
 8008868:	2300      	movs	r3, #0
 800886a:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 800886e:	4b8b      	ldr	r3, [pc, #556]	; (8008a9c <oslib_test_002_001_execute+0x26c>)
 8008870:	2202      	movs	r2, #2
 8008872:	601a      	str	r2, [r3, #0]
    chMBReset(&mb1);
 8008874:	4c8a      	ldr	r4, [pc, #552]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 8008876:	4620      	mov	r0, r4
 8008878:	f7ff fc02 	bl	8008080 <chMBReset>
 800887c:	2320      	movs	r3, #32
 800887e:	f383 8811 	msr	BASEPRI, r3
  return (size_t)(mbp->top - mbp->buffer);
 8008882:	6860      	ldr	r0, [r4, #4]
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	1ac3      	subs	r3, r0, r3
  return mbp->cnt;
 8008888:	6920      	ldr	r0, [r4, #16]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800888a:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800888e:	4986      	ldr	r1, [pc, #536]	; (8008aa8 <oslib_test_002_001_execute+0x278>)
 8008890:	2804      	cmp	r0, #4
 8008892:	bf14      	ite	ne
 8008894:	2000      	movne	r0, #0
 8008896:	2001      	moveq	r0, #1
 8008898:	f7f8 fcaa 	bl	80011f0 <_test_assert>
 800889c:	b118      	cbz	r0, 80088a6 <oslib_test_002_001_execute+0x76>
 800889e:	2300      	movs	r3, #0
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	e7de      	b.n	8008864 <oslib_test_002_001_execute+0x34>
 80088a6:	2300      	movs	r3, #0
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	2320      	movs	r3, #32
 80088ae:	f383 8811 	msr	BASEPRI, r3
  return mbp->cnt;
 80088b2:	4b7b      	ldr	r3, [pc, #492]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 80088b4:	6918      	ldr	r0, [r3, #16]
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 80088b6:	497d      	ldr	r1, [pc, #500]	; (8008aac <oslib_test_002_001_execute+0x27c>)
 80088b8:	fab0 f080 	clz	r0, r0
 80088bc:	0940      	lsrs	r0, r0, #5
 80088be:	f7f8 fc97 	bl	80011f0 <_test_assert>
 80088c2:	b118      	cbz	r0, 80088cc <oslib_test_002_001_execute+0x9c>
 80088c4:	2300      	movs	r3, #0
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	e7cb      	b.n	8008864 <oslib_test_002_001_execute+0x34>
 80088cc:	2300      	movs	r3, #0
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	2320      	movs	r3, #32
 80088d4:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 80088d8:	4b71      	ldr	r3, [pc, #452]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	4974      	ldr	r1, [pc, #464]	; (8008ab0 <oslib_test_002_001_execute+0x280>)
 80088e0:	4298      	cmp	r0, r3
 80088e2:	bf14      	ite	ne
 80088e4:	2000      	movne	r0, #0
 80088e6:	2001      	moveq	r0, #1
 80088e8:	f7f8 fc82 	bl	80011f0 <_test_assert>
 80088ec:	b118      	cbz	r0, 80088f6 <oslib_test_002_001_execute+0xc6>
 80088ee:	2300      	movs	r3, #0
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	e7b6      	b.n	8008864 <oslib_test_002_001_execute+0x34>
 80088f6:	2300      	movs	r3, #0
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	2320      	movs	r3, #32
 80088fe:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8008902:	4b67      	ldr	r3, [pc, #412]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 8008904:	6818      	ldr	r0, [r3, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	496a      	ldr	r1, [pc, #424]	; (8008ab4 <oslib_test_002_001_execute+0x284>)
 800890a:	4298      	cmp	r0, r3
 800890c:	bf14      	ite	ne
 800890e:	2000      	movne	r0, #0
 8008910:	2001      	moveq	r0, #1
 8008912:	f7f8 fc6d 	bl	80011f0 <_test_assert>
 8008916:	b118      	cbz	r0, 8008920 <oslib_test_002_001_execute+0xf0>
 8008918:	2300      	movs	r3, #0
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	e7a1      	b.n	8008864 <oslib_test_002_001_execute+0x34>
 8008920:	2100      	movs	r1, #0
 8008922:	f381 8811 	msr	BASEPRI, r1
  test_set_step(3);
 8008926:	4b5d      	ldr	r3, [pc, #372]	; (8008a9c <oslib_test_002_001_execute+0x26c>)
 8008928:	2203      	movs	r2, #3
 800892a:	601a      	str	r2, [r3, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800892c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008930:	485b      	ldr	r0, [pc, #364]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 8008932:	f7ff fd35 	bl	80083a0 <chMBPostTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8008936:	4960      	ldr	r1, [pc, #384]	; (8008ab8 <oslib_test_002_001_execute+0x288>)
 8008938:	f110 0f02 	cmn.w	r0, #2
 800893c:	bf14      	ite	ne
 800893e:	2000      	movne	r0, #0
 8008940:	2001      	moveq	r0, #1
 8008942:	f7f8 fc55 	bl	80011f0 <_test_assert>
 8008946:	2800      	cmp	r0, #0
 8008948:	d18c      	bne.n	8008864 <oslib_test_002_001_execute+0x34>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800894a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800894e:	2100      	movs	r1, #0
 8008950:	4853      	ldr	r0, [pc, #332]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 8008952:	f7ff fce5 	bl	8008320 <chMBPostAheadTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8008956:	4958      	ldr	r1, [pc, #352]	; (8008ab8 <oslib_test_002_001_execute+0x288>)
 8008958:	f110 0f02 	cmn.w	r0, #2
 800895c:	bf14      	ite	ne
 800895e:	2000      	movne	r0, #0
 8008960:	2001      	moveq	r0, #1
 8008962:	f7f8 fc45 	bl	80011f0 <_test_assert>
 8008966:	2800      	cmp	r0, #0
 8008968:	f47f af7c 	bne.w	8008864 <oslib_test_002_001_execute+0x34>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800896c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008970:	a901      	add	r1, sp, #4
 8008972:	484b      	ldr	r0, [pc, #300]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 8008974:	f7ff fc74 	bl	8008260 <chMBFetchTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 8008978:	494f      	ldr	r1, [pc, #316]	; (8008ab8 <oslib_test_002_001_execute+0x288>)
 800897a:	f110 0f02 	cmn.w	r0, #2
 800897e:	bf14      	ite	ne
 8008980:	2000      	movne	r0, #0
 8008982:	2001      	moveq	r0, #1
 8008984:	f7f8 fc34 	bl	80011f0 <_test_assert>
 8008988:	2800      	cmp	r0, #0
 800898a:	f47f af6b 	bne.w	8008864 <oslib_test_002_001_execute+0x34>
  mbp->reset = false;
 800898e:	2400      	movs	r4, #0
 8008990:	4b43      	ldr	r3, [pc, #268]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 8008992:	751c      	strb	r4, [r3, #20]
  test_set_step(4);
 8008994:	4b41      	ldr	r3, [pc, #260]	; (8008a9c <oslib_test_002_001_execute+0x26c>)
 8008996:	2204      	movs	r2, #4
 8008998:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MB_SIZE - 1; i++) {
 800899a:	2c02      	cmp	r4, #2
 800899c:	d811      	bhi.n	80089c2 <oslib_test_002_001_execute+0x192>
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800899e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089a2:	f104 0142 	add.w	r1, r4, #66	; 0x42
 80089a6:	483e      	ldr	r0, [pc, #248]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 80089a8:	f7ff fcfa 	bl	80083a0 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80089ac:	4943      	ldr	r1, [pc, #268]	; (8008abc <oslib_test_002_001_execute+0x28c>)
 80089ae:	fab0 f080 	clz	r0, r0
 80089b2:	0940      	lsrs	r0, r0, #5
 80089b4:	f7f8 fc1c 	bl	80011f0 <_test_assert>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	f47f af53 	bne.w	8008864 <oslib_test_002_001_execute+0x34>
    for (i = 0; i < MB_SIZE - 1; i++) {
 80089be:	3401      	adds	r4, #1
 80089c0:	e7eb      	b.n	800899a <oslib_test_002_001_execute+0x16a>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 80089c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089c6:	2141      	movs	r1, #65	; 0x41
 80089c8:	4835      	ldr	r0, [pc, #212]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 80089ca:	f7ff fca9 	bl	8008320 <chMBPostAheadTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 80089ce:	493b      	ldr	r1, [pc, #236]	; (8008abc <oslib_test_002_001_execute+0x28c>)
 80089d0:	fab0 f080 	clz	r0, r0
 80089d4:	0940      	lsrs	r0, r0, #5
 80089d6:	f7f8 fc0b 	bl	80011f0 <_test_assert>
 80089da:	2800      	cmp	r0, #0
 80089dc:	f47f af42 	bne.w	8008864 <oslib_test_002_001_execute+0x34>
  test_set_step(5);
 80089e0:	4b2e      	ldr	r3, [pc, #184]	; (8008a9c <oslib_test_002_001_execute+0x26c>)
 80089e2:	2205      	movs	r2, #5
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	2320      	movs	r3, #32
 80089e8:	f383 8811 	msr	BASEPRI, r3
  return (size_t)(mbp->top - mbp->buffer);
 80089ec:	4a2c      	ldr	r2, [pc, #176]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 80089ee:	6853      	ldr	r3, [r2, #4]
 80089f0:	6811      	ldr	r1, [r2, #0]
 80089f2:	1a5b      	subs	r3, r3, r1
  return mbp->cnt;
 80089f4:	6912      	ldr	r2, [r2, #16]
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 80089f6:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80089fa:	4931      	ldr	r1, [pc, #196]	; (8008ac0 <oslib_test_002_001_execute+0x290>)
 80089fc:	bf0c      	ite	eq
 80089fe:	2001      	moveq	r0, #1
 8008a00:	2000      	movne	r0, #0
 8008a02:	f7f8 fbf5 	bl	80011f0 <_test_assert>
 8008a06:	b118      	cbz	r0, 8008a10 <oslib_test_002_001_execute+0x1e0>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	e729      	b.n	8008864 <oslib_test_002_001_execute+0x34>
 8008a10:	2300      	movs	r3, #0
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	2320      	movs	r3, #32
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	4b20      	ldr	r3, [pc, #128]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 8008a1e:	6918      	ldr	r0, [r3, #16]
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 8008a20:	4928      	ldr	r1, [pc, #160]	; (8008ac4 <oslib_test_002_001_execute+0x294>)
 8008a22:	2804      	cmp	r0, #4
 8008a24:	bf14      	ite	ne
 8008a26:	2000      	movne	r0, #0
 8008a28:	2001      	moveq	r0, #1
 8008a2a:	f7f8 fbe1 	bl	80011f0 <_test_assert>
 8008a2e:	b118      	cbz	r0, 8008a38 <oslib_test_002_001_execute+0x208>
 8008a30:	2300      	movs	r3, #0
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	e715      	b.n	8008864 <oslib_test_002_001_execute+0x34>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	2320      	movs	r3, #32
 8008a40:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8008a44:	4b16      	ldr	r3, [pc, #88]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 8008a46:	68d8      	ldr	r0, [r3, #12]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	491f      	ldr	r1, [pc, #124]	; (8008ac8 <oslib_test_002_001_execute+0x298>)
 8008a4c:	4298      	cmp	r0, r3
 8008a4e:	bf14      	ite	ne
 8008a50:	2000      	movne	r0, #0
 8008a52:	2001      	moveq	r0, #1
 8008a54:	f7f8 fbcc 	bl	80011f0 <_test_assert>
 8008a58:	b930      	cbnz	r0, 8008a68 <oslib_test_002_001_execute+0x238>
 8008a5a:	2400      	movs	r4, #0
 8008a5c:	f384 8811 	msr	BASEPRI, r4
  test_set_step(6);
 8008a60:	4b0e      	ldr	r3, [pc, #56]	; (8008a9c <oslib_test_002_001_execute+0x26c>)
 8008a62:	2206      	movs	r2, #6
 8008a64:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MB_SIZE; i++) {
 8008a66:	e008      	b.n	8008a7a <oslib_test_002_001_execute+0x24a>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f383 8811 	msr	BASEPRI, r3
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 8008a6e:	e6f9      	b.n	8008864 <oslib_test_002_001_execute+0x34>
      test_emit_token(msg2);
 8008a70:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8008a74:	f7f7 fecc 	bl	8000810 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 8008a78:	3401      	adds	r4, #1
 8008a7a:	2c03      	cmp	r4, #3
 8008a7c:	d826      	bhi.n	8008acc <oslib_test_002_001_execute+0x29c>
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8008a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a82:	a901      	add	r1, sp, #4
 8008a84:	4806      	ldr	r0, [pc, #24]	; (8008aa0 <oslib_test_002_001_execute+0x270>)
 8008a86:	f7ff fbeb 	bl	8008260 <chMBFetchTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8008a8a:	490c      	ldr	r1, [pc, #48]	; (8008abc <oslib_test_002_001_execute+0x28c>)
 8008a8c:	fab0 f080 	clz	r0, r0
 8008a90:	0940      	lsrs	r0, r0, #5
 8008a92:	f7f8 fbad 	bl	80011f0 <_test_assert>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d0ea      	beq.n	8008a70 <oslib_test_002_001_execute+0x240>
 8008a9a:	e6e3      	b.n	8008864 <oslib_test_002_001_execute+0x34>
 8008a9c:	20002454 	.word	0x20002454
 8008aa0:	2000084c 	.word	0x2000084c
 8008aa4:	0800cbb0 	.word	0x0800cbb0
 8008aa8:	0800ca7c 	.word	0x0800ca7c
 8008aac:	0800cf2c 	.word	0x0800cf2c
 8008ab0:	0800cf38 	.word	0x0800cf38
 8008ab4:	0800cf5c 	.word	0x0800cf5c
 8008ab8:	0800cfc4 	.word	0x0800cfc4
 8008abc:	0800ce94 	.word	0x0800ce94
 8008ac0:	0800cf80 	.word	0x0800cf80
 8008ac4:	0800cf8c 	.word	0x0800cf8c
 8008ac8:	0800cf98 	.word	0x0800cf98
    test_assert_sequence("ABCD", "wrong get sequence");
 8008acc:	4937      	ldr	r1, [pc, #220]	; (8008bac <oslib_test_002_001_execute+0x37c>)
 8008ace:	4838      	ldr	r0, [pc, #224]	; (8008bb0 <oslib_test_002_001_execute+0x380>)
 8008ad0:	f7f8 fc3e 	bl	8001350 <_test_assert_sequence>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	f47f aec5 	bne.w	8008864 <oslib_test_002_001_execute+0x34>
  test_set_step(7);
 8008ada:	4b36      	ldr	r3, [pc, #216]	; (8008bb4 <oslib_test_002_001_execute+0x384>)
 8008adc:	2207      	movs	r2, #7
 8008ade:	601a      	str	r2, [r3, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 8008ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ae4:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8008ae8:	4833      	ldr	r0, [pc, #204]	; (8008bb8 <oslib_test_002_001_execute+0x388>)
 8008aea:	f7ff fc59 	bl	80083a0 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8008aee:	4933      	ldr	r1, [pc, #204]	; (8008bbc <oslib_test_002_001_execute+0x38c>)
 8008af0:	fab0 f080 	clz	r0, r0
 8008af4:	0940      	lsrs	r0, r0, #5
 8008af6:	f7f8 fb7b 	bl	80011f0 <_test_assert>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	f47f aeb2 	bne.w	8008864 <oslib_test_002_001_execute+0x34>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 8008b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b04:	a901      	add	r1, sp, #4
 8008b06:	482c      	ldr	r0, [pc, #176]	; (8008bb8 <oslib_test_002_001_execute+0x388>)
 8008b08:	f7ff fbaa 	bl	8008260 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 8008b0c:	492b      	ldr	r1, [pc, #172]	; (8008bbc <oslib_test_002_001_execute+0x38c>)
 8008b0e:	fab0 f080 	clz	r0, r0
 8008b12:	0940      	lsrs	r0, r0, #5
 8008b14:	f7f8 fb6c 	bl	80011f0 <_test_assert>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	f47f aea3 	bne.w	8008864 <oslib_test_002_001_execute+0x34>
  test_set_step(8);
 8008b1e:	4b25      	ldr	r3, [pc, #148]	; (8008bb4 <oslib_test_002_001_execute+0x384>)
 8008b20:	2208      	movs	r2, #8
 8008b22:	601a      	str	r2, [r3, #0]
 8008b24:	2320      	movs	r3, #32
 8008b26:	f383 8811 	msr	BASEPRI, r3
  return (size_t)(mbp->top - mbp->buffer);
 8008b2a:	4a23      	ldr	r2, [pc, #140]	; (8008bb8 <oslib_test_002_001_execute+0x388>)
 8008b2c:	6853      	ldr	r3, [r2, #4]
 8008b2e:	6810      	ldr	r0, [r2, #0]
 8008b30:	1a1b      	subs	r3, r3, r0
  return mbp->cnt;
 8008b32:	6910      	ldr	r0, [r2, #16]
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8008b34:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 8008b38:	4921      	ldr	r1, [pc, #132]	; (8008bc0 <oslib_test_002_001_execute+0x390>)
 8008b3a:	2804      	cmp	r0, #4
 8008b3c:	bf14      	ite	ne
 8008b3e:	2000      	movne	r0, #0
 8008b40:	2001      	moveq	r0, #1
 8008b42:	f7f8 fb55 	bl	80011f0 <_test_assert>
 8008b46:	b118      	cbz	r0, 8008b50 <oslib_test_002_001_execute+0x320>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	e689      	b.n	8008864 <oslib_test_002_001_execute+0x34>
 8008b50:	2300      	movs	r3, #0
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	2320      	movs	r3, #32
 8008b58:	f383 8811 	msr	BASEPRI, r3
  return mbp->cnt;
 8008b5c:	4b16      	ldr	r3, [pc, #88]	; (8008bb8 <oslib_test_002_001_execute+0x388>)
 8008b5e:	6918      	ldr	r0, [r3, #16]
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 8008b60:	4918      	ldr	r1, [pc, #96]	; (8008bc4 <oslib_test_002_001_execute+0x394>)
 8008b62:	fab0 f080 	clz	r0, r0
 8008b66:	0940      	lsrs	r0, r0, #5
 8008b68:	f7f8 fb42 	bl	80011f0 <_test_assert>
 8008b6c:	b118      	cbz	r0, 8008b76 <oslib_test_002_001_execute+0x346>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	e676      	b.n	8008864 <oslib_test_002_001_execute+0x34>
 8008b76:	2300      	movs	r3, #0
 8008b78:	f383 8811 	msr	BASEPRI, r3
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 8008b7c:	4b0e      	ldr	r3, [pc, #56]	; (8008bb8 <oslib_test_002_001_execute+0x388>)
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	4911      	ldr	r1, [pc, #68]	; (8008bc8 <oslib_test_002_001_execute+0x398>)
 8008b84:	4298      	cmp	r0, r3
 8008b86:	bf14      	ite	ne
 8008b88:	2000      	movne	r0, #0
 8008b8a:	2001      	moveq	r0, #1
 8008b8c:	f7f8 fb30 	bl	80011f0 <_test_assert>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	f47f ae67 	bne.w	8008864 <oslib_test_002_001_execute+0x34>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 8008b96:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <oslib_test_002_001_execute+0x388>)
 8008b98:	6818      	ldr	r0, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	490b      	ldr	r1, [pc, #44]	; (8008bcc <oslib_test_002_001_execute+0x39c>)
 8008b9e:	4298      	cmp	r0, r3
 8008ba0:	bf14      	ite	ne
 8008ba2:	2000      	movne	r0, #0
 8008ba4:	2001      	moveq	r0, #1
 8008ba6:	f7f8 fb23 	bl	80011f0 <_test_assert>
 8008baa:	e65b      	b.n	8008864 <oslib_test_002_001_execute+0x34>
 8008bac:	0800cfb0 	.word	0x0800cfb0
 8008bb0:	0800c9d8 	.word	0x0800c9d8
 8008bb4:	20002454 	.word	0x20002454
 8008bb8:	2000084c 	.word	0x2000084c
 8008bbc:	0800ce94 	.word	0x0800ce94
 8008bc0:	0800ca7c 	.word	0x0800ca7c
 8008bc4:	0800cf2c 	.word	0x0800cf2c
 8008bc8:	0800cf38 	.word	0x0800cf38
 8008bcc:	0800cf5c 	.word	0x0800cf5c

08008bd0 <chThdResumeI>:
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8008bd0:	b508      	push	{r3, lr}
 8008bd2:	4603      	mov	r3, r0
  if (*trp != NULL) {
 8008bd4:	6800      	ldr	r0, [r0, #0]
 8008bd6:	b120      	cbz	r0, 8008be2 <chThdResumeI+0x12>
    *trp = NULL;
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 8008bdc:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8008bde:	f001 fcff 	bl	800a5e0 <chSchReadyI>
}
 8008be2:	bd08      	pop	{r3, pc}
	...

08008bf0 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	2320      	movs	r3, #32
 8008bf6:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(&tr1, MSG_OK);
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	4805      	ldr	r0, [pc, #20]	; (8008c14 <thread1.lto_priv.0+0x24>)
 8008bfe:	f7ff ffe7 	bl	8008bd0 <chThdResumeI>
  chSchRescheduleS();
 8008c02:	f001 fcc5 	bl	800a590 <chSchRescheduleS>
 8008c06:	2300      	movs	r3, #0
 8008c08:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8008c0c:	7820      	ldrb	r0, [r4, #0]
 8008c0e:	f7f7 fdff 	bl	8000810 <test_emit_token>
}
 8008c12:	bd10      	pop	{r4, pc}
 8008c14:	20002480 	.word	0x20002480
	...

08008c20 <chPipeReset>:
void chPipeReset(pipe_t *pp) {
 8008c20:	b570      	push	{r4, r5, r6, lr}
 8008c22:	4604      	mov	r4, r0
  PC_LOCK(pp);
 8008c24:	f100 0520 	add.w	r5, r0, #32
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f7fa fbd1 	bl	80033d0 <chMtxLock>
  pp->wrptr = pp->buffer;
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	60a3      	str	r3, [r4, #8]
  pp->rdptr = pp->buffer;
 8008c32:	60e3      	str	r3, [r4, #12]
  pp->cnt   = (size_t)0;
 8008c34:	2600      	movs	r6, #0
 8008c36:	6126      	str	r6, [r4, #16]
  pp->reset = true;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	7523      	strb	r3, [r4, #20]
 8008c3c:	2320      	movs	r3, #32
 8008c3e:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(&pp->wtr, MSG_RESET);
 8008c42:	f06f 0101 	mvn.w	r1, #1
 8008c46:	f104 0018 	add.w	r0, r4, #24
 8008c4a:	f7ff ffc1 	bl	8008bd0 <chThdResumeI>
  chThdResumeI(&pp->rtr, MSG_RESET);
 8008c4e:	f06f 0101 	mvn.w	r1, #1
 8008c52:	f104 001c 	add.w	r0, r4, #28
 8008c56:	f7ff ffbb 	bl	8008bd0 <chThdResumeI>
  chSchRescheduleS();
 8008c5a:	f001 fc99 	bl	800a590 <chSchRescheduleS>
 8008c5e:	f386 8811 	msr	BASEPRI, r6
  PC_UNLOCK(pp);
 8008c62:	4628      	mov	r0, r5
 8008c64:	f7fa fa5c 	bl	8003120 <chMtxUnlock>
}
 8008c68:	bd70      	pop	{r4, r5, r6, pc}
 8008c6a:	bf00      	nop
 8008c6c:	0000      	movs	r0, r0
	...

08008c70 <oslib_test_003_001_execute>:
static void oslib_test_003_001_execute(void) {
 8008c70:	b510      	push	{r4, lr}
 8008c72:	b084      	sub	sp, #16
  test_set_step(1);
 8008c74:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <oslib_test_003_001_execute+0x40>)
 8008c76:	2201      	movs	r2, #1
 8008c78:	601a      	str	r2, [r3, #0]
    chPipeReset(&pipe1);
 8008c7a:	4c0e      	ldr	r4, [pc, #56]	; (8008cb4 <oslib_test_003_001_execute+0x44>)
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7ff ffcf 	bl	8008c20 <chPipeReset>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	68e2      	ldr	r2, [r4, #12]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d006      	beq.n	8008c98 <oslib_test_003_001_execute+0x28>
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	490a      	ldr	r1, [pc, #40]	; (8008cb8 <oslib_test_003_001_execute+0x48>)
 8008c8e:	f7f8 faaf 	bl	80011f0 <_test_assert>
 8008c92:	b198      	cbz	r0, 8008cbc <oslib_test_003_001_execute+0x4c>
}
 8008c94:	b004      	add	sp, #16
 8008c96:	bd10      	pop	{r4, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8008c98:	68a2      	ldr	r2, [r4, #8]
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d001      	beq.n	8008ca2 <oslib_test_003_001_execute+0x32>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e7f4      	b.n	8008c8c <oslib_test_003_001_execute+0x1c>
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	b10b      	cbz	r3, 8008caa <oslib_test_003_001_execute+0x3a>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	e7f0      	b.n	8008c8c <oslib_test_003_001_execute+0x1c>
 8008caa:	2001      	movs	r0, #1
 8008cac:	e7ee      	b.n	8008c8c <oslib_test_003_001_execute+0x1c>
 8008cae:	bf00      	nop
 8008cb0:	20002454 	.word	0x20002454
 8008cb4:	2000088c 	.word	0x2000088c
 8008cb8:	0800cbbc 	.word	0x0800cbbc
  test_set_step(2);
 8008cbc:	4bb3      	ldr	r3, [pc, #716]	; (8008f8c <oslib_test_003_001_execute+0x31c>)
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	601a      	str	r2, [r3, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	2210      	movs	r2, #16
 8008cc6:	49b2      	ldr	r1, [pc, #712]	; (8008f90 <oslib_test_003_001_execute+0x320>)
 8008cc8:	48b2      	ldr	r0, [pc, #712]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008cca:	f7fc fd51 	bl	8005770 <chPipeWriteTimeout>
    test_assert(n == 0, "not reset");
 8008cce:	49b2      	ldr	r1, [pc, #712]	; (8008f98 <oslib_test_003_001_execute+0x328>)
 8008cd0:	fab0 f080 	clz	r0, r0
 8008cd4:	0940      	lsrs	r0, r0, #5
 8008cd6:	f7f8 fa8b 	bl	80011f0 <_test_assert>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d1da      	bne.n	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8008cde:	4bad      	ldr	r3, [pc, #692]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	f000 81d3 	beq.w	8009090 <oslib_test_003_001_execute+0x420>
 8008cea:	2000      	movs	r0, #0
 8008cec:	49ab      	ldr	r1, [pc, #684]	; (8008f9c <oslib_test_003_001_execute+0x32c>)
 8008cee:	f7f8 fa7f 	bl	80011f0 <_test_assert>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d1ce      	bne.n	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(3);
 8008cf6:	4ba5      	ldr	r3, [pc, #660]	; (8008f8c <oslib_test_003_001_execute+0x31c>)
 8008cf8:	2203      	movs	r2, #3
 8008cfa:	601a      	str	r2, [r3, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	2210      	movs	r2, #16
 8008d00:	4669      	mov	r1, sp
 8008d02:	48a4      	ldr	r0, [pc, #656]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008d04:	f7fc fcfc 	bl	8005700 <chPipeReadTimeout>
    test_assert(n == 0, "not reset");
 8008d08:	49a3      	ldr	r1, [pc, #652]	; (8008f98 <oslib_test_003_001_execute+0x328>)
 8008d0a:	fab0 f080 	clz	r0, r0
 8008d0e:	0940      	lsrs	r0, r0, #5
 8008d10:	f7f8 fa6e 	bl	80011f0 <_test_assert>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d1bd      	bne.n	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8008d18:	4b9e      	ldr	r3, [pc, #632]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	f000 81c3 	beq.w	80090aa <oslib_test_003_001_execute+0x43a>
 8008d24:	2000      	movs	r0, #0
 8008d26:	499d      	ldr	r1, [pc, #628]	; (8008f9c <oslib_test_003_001_execute+0x32c>)
 8008d28:	f7f8 fa62 	bl	80011f0 <_test_assert>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d1b1      	bne.n	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(4);
 8008d30:	4b96      	ldr	r3, [pc, #600]	; (8008f8c <oslib_test_003_001_execute+0x31c>)
 8008d32:	2204      	movs	r2, #4
 8008d34:	601a      	str	r2, [r3, #0]
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 8008d36:	4b97      	ldr	r3, [pc, #604]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	751a      	strb	r2, [r3, #20]
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	4293      	cmp	r3, r2
 8008d42:	f000 81bf 	beq.w	80090c4 <oslib_test_003_001_execute+0x454>
 8008d46:	4995      	ldr	r1, [pc, #596]	; (8008f9c <oslib_test_003_001_execute+0x32c>)
 8008d48:	f7f8 fa52 	bl	80011f0 <_test_assert>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d1a1      	bne.n	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(5);
 8008d50:	4b8e      	ldr	r3, [pc, #568]	; (8008f8c <oslib_test_003_001_execute+0x31c>)
 8008d52:	2205      	movs	r2, #5
 8008d54:	601a      	str	r2, [r3, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8008d56:	2300      	movs	r3, #0
 8008d58:	2210      	movs	r2, #16
 8008d5a:	498d      	ldr	r1, [pc, #564]	; (8008f90 <oslib_test_003_001_execute+0x320>)
 8008d5c:	488d      	ldr	r0, [pc, #564]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008d5e:	f7fc fd07 	bl	8005770 <chPipeWriteTimeout>
    test_assert(n == PIPE_SIZE, "wrong size");
 8008d62:	498f      	ldr	r1, [pc, #572]	; (8008fa0 <oslib_test_003_001_execute+0x330>)
 8008d64:	2810      	cmp	r0, #16
 8008d66:	bf14      	ite	ne
 8008d68:	2000      	movne	r0, #0
 8008d6a:	2001      	moveq	r0, #1
 8008d6c:	f7f8 fa40 	bl	80011f0 <_test_assert>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d18f      	bne.n	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8008d74:	4b87      	ldr	r3, [pc, #540]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	f000 81af 	beq.w	80090de <oslib_test_003_001_execute+0x46e>
 8008d80:	2000      	movs	r0, #0
 8008d82:	4986      	ldr	r1, [pc, #536]	; (8008f9c <oslib_test_003_001_execute+0x32c>)
 8008d84:	f7f8 fa34 	bl	80011f0 <_test_assert>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d183      	bne.n	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(6);
 8008d8c:	4b7f      	ldr	r3, [pc, #508]	; (8008f8c <oslib_test_003_001_execute+0x31c>)
 8008d8e:	2206      	movs	r2, #6
 8008d90:	601a      	str	r2, [r3, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 8008d92:	2300      	movs	r3, #0
 8008d94:	2210      	movs	r2, #16
 8008d96:	4669      	mov	r1, sp
 8008d98:	487e      	ldr	r0, [pc, #504]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008d9a:	f7fc fcb1 	bl	8005700 <chPipeReadTimeout>
    test_assert(n == PIPE_SIZE, "wrong size");
 8008d9e:	4980      	ldr	r1, [pc, #512]	; (8008fa0 <oslib_test_003_001_execute+0x330>)
 8008da0:	2810      	cmp	r0, #16
 8008da2:	bf14      	ite	ne
 8008da4:	2000      	movne	r0, #0
 8008da6:	2001      	moveq	r0, #1
 8008da8:	f7f8 fa22 	bl	80011f0 <_test_assert>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	f47f af71 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8008db2:	4b78      	ldr	r3, [pc, #480]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	4293      	cmp	r3, r2
 8008dba:	f000 819d 	beq.w	80090f8 <oslib_test_003_001_execute+0x488>
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	4976      	ldr	r1, [pc, #472]	; (8008f9c <oslib_test_003_001_execute+0x32c>)
 8008dc2:	f7f8 fa15 	bl	80011f0 <_test_assert>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f47f af64 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8008dcc:	2210      	movs	r2, #16
 8008dce:	4669      	mov	r1, sp
 8008dd0:	486f      	ldr	r0, [pc, #444]	; (8008f90 <oslib_test_003_001_execute+0x320>)
 8008dd2:	f002 fa99 	bl	800b308 <memcmp>
 8008dd6:	4973      	ldr	r1, [pc, #460]	; (8008fa4 <oslib_test_003_001_execute+0x334>)
 8008dd8:	fab0 f080 	clz	r0, r0
 8008ddc:	0940      	lsrs	r0, r0, #5
 8008dde:	f7f8 fa07 	bl	80011f0 <_test_assert>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	f47f af56 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(7);
 8008de8:	4b68      	ldr	r3, [pc, #416]	; (8008f8c <oslib_test_003_001_execute+0x31c>)
 8008dea:	2207      	movs	r2, #7
 8008dec:	601a      	str	r2, [r3, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 4, TIME_IMMEDIATE);
 8008dee:	2300      	movs	r3, #0
 8008df0:	2204      	movs	r2, #4
 8008df2:	4967      	ldr	r1, [pc, #412]	; (8008f90 <oslib_test_003_001_execute+0x320>)
 8008df4:	4867      	ldr	r0, [pc, #412]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008df6:	f7fc fcbb 	bl	8005770 <chPipeWriteTimeout>
    test_assert(n == 4, "wrong size");
 8008dfa:	4969      	ldr	r1, [pc, #420]	; (8008fa0 <oslib_test_003_001_execute+0x330>)
 8008dfc:	2804      	cmp	r0, #4
 8008dfe:	bf14      	ite	ne
 8008e00:	2000      	movne	r0, #0
 8008e02:	2001      	moveq	r0, #1
 8008e04:	f7f8 f9f4 	bl	80011f0 <_test_assert>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	f47f af43 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8008e0e:	4a61      	ldr	r2, [pc, #388]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008e10:	68d3      	ldr	r3, [r2, #12]
 8008e12:	6892      	ldr	r2, [r2, #8]
 8008e14:	4293      	cmp	r3, r2
 8008e16:	f000 8183 	beq.w	8009120 <oslib_test_003_001_execute+0x4b0>
 8008e1a:	4a5e      	ldr	r2, [pc, #376]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008e1c:	6812      	ldr	r2, [r2, #0]
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	f000 8177 	beq.w	8009112 <oslib_test_003_001_execute+0x4a2>
 8008e24:	2000      	movs	r0, #0
 8008e26:	495d      	ldr	r1, [pc, #372]	; (8008f9c <oslib_test_003_001_execute+0x32c>)
 8008e28:	f7f8 f9e2 	bl	80011f0 <_test_assert>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	f47f af31 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(8);
 8008e32:	4b56      	ldr	r3, [pc, #344]	; (8008f8c <oslib_test_003_001_execute+0x31c>)
 8008e34:	2208      	movs	r2, #8
 8008e36:	601a      	str	r2, [r3, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8008e38:	2300      	movs	r3, #0
 8008e3a:	220c      	movs	r2, #12
 8008e3c:	4954      	ldr	r1, [pc, #336]	; (8008f90 <oslib_test_003_001_execute+0x320>)
 8008e3e:	4855      	ldr	r0, [pc, #340]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008e40:	f7fc fc96 	bl	8005770 <chPipeWriteTimeout>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 8008e44:	4956      	ldr	r1, [pc, #344]	; (8008fa0 <oslib_test_003_001_execute+0x330>)
 8008e46:	280c      	cmp	r0, #12
 8008e48:	bf14      	ite	ne
 8008e4a:	2000      	movne	r0, #0
 8008e4c:	2001      	moveq	r0, #1
 8008e4e:	f7f8 f9cf 	bl	80011f0 <_test_assert>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	f47f af1e 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8008e58:	4a4e      	ldr	r2, [pc, #312]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008e5a:	6813      	ldr	r3, [r2, #0]
 8008e5c:	68d2      	ldr	r2, [r2, #12]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	f000 8160 	beq.w	8009124 <oslib_test_003_001_execute+0x4b4>
 8008e64:	2000      	movs	r0, #0
 8008e66:	494d      	ldr	r1, [pc, #308]	; (8008f9c <oslib_test_003_001_execute+0x32c>)
 8008e68:	f7f8 f9c2 	bl	80011f0 <_test_assert>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	f47f af11 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(9);
 8008e72:	4b46      	ldr	r3, [pc, #280]	; (8008f8c <oslib_test_003_001_execute+0x31c>)
 8008e74:	2209      	movs	r2, #9
 8008e76:	601a      	str	r2, [r3, #0]
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 8008e78:	2300      	movs	r3, #0
 8008e7a:	2204      	movs	r2, #4
 8008e7c:	4669      	mov	r1, sp
 8008e7e:	4845      	ldr	r0, [pc, #276]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008e80:	f7fc fc3e 	bl	8005700 <chPipeReadTimeout>
    test_assert(n == 4, "wrong size");
 8008e84:	4946      	ldr	r1, [pc, #280]	; (8008fa0 <oslib_test_003_001_execute+0x330>)
 8008e86:	2804      	cmp	r0, #4
 8008e88:	bf14      	ite	ne
 8008e8a:	2000      	movne	r0, #0
 8008e8c:	2001      	moveq	r0, #1
 8008e8e:	f7f8 f9af 	bl	80011f0 <_test_assert>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f47f aefe 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 8008e98:	4a3e      	ldr	r2, [pc, #248]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008e9a:	6813      	ldr	r3, [r2, #0]
 8008e9c:	68d2      	ldr	r2, [r2, #12]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	f000 8154 	beq.w	800914c <oslib_test_003_001_execute+0x4dc>
 8008ea4:	4a3b      	ldr	r2, [pc, #236]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008ea6:	6892      	ldr	r2, [r2, #8]
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	f000 8148 	beq.w	800913e <oslib_test_003_001_execute+0x4ce>
 8008eae:	2000      	movs	r0, #0
 8008eb0:	493a      	ldr	r1, [pc, #232]	; (8008f9c <oslib_test_003_001_execute+0x32c>)
 8008eb2:	f7f8 f99d 	bl	80011f0 <_test_assert>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f47f aeec 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 8008ebc:	2204      	movs	r2, #4
 8008ebe:	4669      	mov	r1, sp
 8008ec0:	4833      	ldr	r0, [pc, #204]	; (8008f90 <oslib_test_003_001_execute+0x320>)
 8008ec2:	f002 fa21 	bl	800b308 <memcmp>
 8008ec6:	4937      	ldr	r1, [pc, #220]	; (8008fa4 <oslib_test_003_001_execute+0x334>)
 8008ec8:	fab0 f080 	clz	r0, r0
 8008ecc:	0940      	lsrs	r0, r0, #5
 8008ece:	f7f8 f98f 	bl	80011f0 <_test_assert>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	f47f aede 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(10);
 8008ed8:	4b2c      	ldr	r3, [pc, #176]	; (8008f8c <oslib_test_003_001_execute+0x31c>)
 8008eda:	220a      	movs	r2, #10
 8008edc:	601a      	str	r2, [r3, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 8008ede:	2300      	movs	r3, #0
 8008ee0:	220c      	movs	r2, #12
 8008ee2:	4669      	mov	r1, sp
 8008ee4:	482b      	ldr	r0, [pc, #172]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008ee6:	f7fc fc0b 	bl	8005700 <chPipeReadTimeout>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 8008eea:	492d      	ldr	r1, [pc, #180]	; (8008fa0 <oslib_test_003_001_execute+0x330>)
 8008eec:	280c      	cmp	r0, #12
 8008eee:	bf14      	ite	ne
 8008ef0:	2000      	movne	r0, #0
 8008ef2:	2001      	moveq	r0, #1
 8008ef4:	f7f8 f97c 	bl	80011f0 <_test_assert>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	f47f aecb 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8008efe:	4a25      	ldr	r2, [pc, #148]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008f00:	6813      	ldr	r3, [r2, #0]
 8008f02:	68d2      	ldr	r2, [r2, #12]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	f000 8123 	beq.w	8009150 <oslib_test_003_001_execute+0x4e0>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	4923      	ldr	r1, [pc, #140]	; (8008f9c <oslib_test_003_001_execute+0x32c>)
 8008f0e:	f7f8 f96f 	bl	80011f0 <_test_assert>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	f47f aebe 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 8008f18:	220c      	movs	r2, #12
 8008f1a:	4669      	mov	r1, sp
 8008f1c:	481c      	ldr	r0, [pc, #112]	; (8008f90 <oslib_test_003_001_execute+0x320>)
 8008f1e:	f002 f9f3 	bl	800b308 <memcmp>
 8008f22:	4920      	ldr	r1, [pc, #128]	; (8008fa4 <oslib_test_003_001_execute+0x334>)
 8008f24:	fab0 f080 	clz	r0, r0
 8008f28:	0940      	lsrs	r0, r0, #5
 8008f2a:	f7f8 f961 	bl	80011f0 <_test_assert>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f47f aeb0 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(11);
 8008f34:	4b15      	ldr	r3, [pc, #84]	; (8008f8c <oslib_test_003_001_execute+0x31c>)
 8008f36:	220b      	movs	r2, #11
 8008f38:	601a      	str	r2, [r3, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, 5, TIME_IMMEDIATE);
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	2205      	movs	r2, #5
 8008f3e:	4914      	ldr	r1, [pc, #80]	; (8008f90 <oslib_test_003_001_execute+0x320>)
 8008f40:	4814      	ldr	r0, [pc, #80]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008f42:	f7fc fc15 	bl	8005770 <chPipeWriteTimeout>
    test_assert(n == 5, "wrong size");
 8008f46:	4916      	ldr	r1, [pc, #88]	; (8008fa0 <oslib_test_003_001_execute+0x330>)
 8008f48:	2805      	cmp	r0, #5
 8008f4a:	bf14      	ite	ne
 8008f4c:	2000      	movne	r0, #0
 8008f4e:	2001      	moveq	r0, #1
 8008f50:	f7f8 f94e 	bl	80011f0 <_test_assert>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	f47f ae9d 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8008f5a:	4a0e      	ldr	r2, [pc, #56]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008f5c:	68d3      	ldr	r3, [r2, #12]
 8008f5e:	6892      	ldr	r2, [r2, #8]
 8008f60:	4293      	cmp	r3, r2
 8008f62:	f000 8109 	beq.w	8009178 <oslib_test_003_001_execute+0x508>
 8008f66:	4a0b      	ldr	r2, [pc, #44]	; (8008f94 <oslib_test_003_001_execute+0x324>)
 8008f68:	6812      	ldr	r2, [r2, #0]
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	f000 80fd 	beq.w	800916a <oslib_test_003_001_execute+0x4fa>
 8008f70:	2000      	movs	r0, #0
 8008f72:	490a      	ldr	r1, [pc, #40]	; (8008f9c <oslib_test_003_001_execute+0x32c>)
 8008f74:	f7f8 f93c 	bl	80011f0 <_test_assert>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	f47f ae8b 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(12);
 8008f7e:	4b03      	ldr	r3, [pc, #12]	; (8008f8c <oslib_test_003_001_execute+0x31c>)
 8008f80:	220c      	movs	r2, #12
 8008f82:	601a      	str	r2, [r3, #0]
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 8008f84:	2300      	movs	r3, #0
 8008f86:	2205      	movs	r2, #5
 8008f88:	4669      	mov	r1, sp
 8008f8a:	e00d      	b.n	8008fa8 <oslib_test_003_001_execute+0x338>
 8008f8c:	20002454 	.word	0x20002454
 8008f90:	0800dd44 	.word	0x0800dd44
 8008f94:	2000088c 	.word	0x2000088c
 8008f98:	0800cfd8 	.word	0x0800cfd8
 8008f9c:	0800cbbc 	.word	0x0800cbbc
 8008fa0:	0800cbb0 	.word	0x0800cbb0
 8008fa4:	0800cfe4 	.word	0x0800cfe4
 8008fa8:	4888      	ldr	r0, [pc, #544]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8008faa:	f7fc fba9 	bl	8005700 <chPipeReadTimeout>
    test_assert(n == 5, "wrong size");
 8008fae:	4988      	ldr	r1, [pc, #544]	; (80091d0 <oslib_test_003_001_execute+0x560>)
 8008fb0:	2805      	cmp	r0, #5
 8008fb2:	bf14      	ite	ne
 8008fb4:	2000      	movne	r0, #0
 8008fb6:	2001      	moveq	r0, #1
 8008fb8:	f7f8 f91a 	bl	80011f0 <_test_assert>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f47f ae69 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8008fc2:	4a82      	ldr	r2, [pc, #520]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8008fc4:	6893      	ldr	r3, [r2, #8]
 8008fc6:	68d2      	ldr	r2, [r2, #12]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	f000 80d7 	beq.w	800917c <oslib_test_003_001_execute+0x50c>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	4980      	ldr	r1, [pc, #512]	; (80091d4 <oslib_test_003_001_execute+0x564>)
 8008fd2:	f7f8 f90d 	bl	80011f0 <_test_assert>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f47f ae5c 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 8008fdc:	2205      	movs	r2, #5
 8008fde:	4669      	mov	r1, sp
 8008fe0:	487d      	ldr	r0, [pc, #500]	; (80091d8 <oslib_test_003_001_execute+0x568>)
 8008fe2:	f002 f991 	bl	800b308 <memcmp>
 8008fe6:	497d      	ldr	r1, [pc, #500]	; (80091dc <oslib_test_003_001_execute+0x56c>)
 8008fe8:	fab0 f080 	clz	r0, r0
 8008fec:	0940      	lsrs	r0, r0, #5
 8008fee:	f7f8 f8ff 	bl	80011f0 <_test_assert>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	f47f ae4e 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(13);
 8008ff8:	4b79      	ldr	r3, [pc, #484]	; (80091e0 <oslib_test_003_001_execute+0x570>)
 8008ffa:	220d      	movs	r2, #13
 8008ffc:	601a      	str	r2, [r3, #0]
    n = chPipeWriteTimeout(&pipe1, pipe_pattern, PIPE_SIZE, TIME_IMMEDIATE);
 8008ffe:	2300      	movs	r3, #0
 8009000:	2210      	movs	r2, #16
 8009002:	4975      	ldr	r1, [pc, #468]	; (80091d8 <oslib_test_003_001_execute+0x568>)
 8009004:	4871      	ldr	r0, [pc, #452]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009006:	f7fc fbb3 	bl	8005770 <chPipeWriteTimeout>
    test_assert(n == PIPE_SIZE, "wrong size");
 800900a:	4971      	ldr	r1, [pc, #452]	; (80091d0 <oslib_test_003_001_execute+0x560>)
 800900c:	2810      	cmp	r0, #16
 800900e:	bf14      	ite	ne
 8009010:	2000      	movne	r0, #0
 8009012:	2001      	moveq	r0, #1
 8009014:	f7f8 f8ec 	bl	80011f0 <_test_assert>
 8009018:	2800      	cmp	r0, #0
 800901a:	f47f ae3b 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800901e:	4a6b      	ldr	r2, [pc, #428]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009020:	6893      	ldr	r3, [r2, #8]
 8009022:	68d2      	ldr	r2, [r2, #12]
 8009024:	429a      	cmp	r2, r3
 8009026:	f000 80b6 	beq.w	8009196 <oslib_test_003_001_execute+0x526>
 800902a:	2000      	movs	r0, #0
 800902c:	4969      	ldr	r1, [pc, #420]	; (80091d4 <oslib_test_003_001_execute+0x564>)
 800902e:	f7f8 f8df 	bl	80011f0 <_test_assert>
 8009032:	2800      	cmp	r0, #0
 8009034:	f47f ae2e 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
  test_set_step(14);
 8009038:	4b69      	ldr	r3, [pc, #420]	; (80091e0 <oslib_test_003_001_execute+0x570>)
 800903a:	220e      	movs	r2, #14
 800903c:	601a      	str	r2, [r3, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800903e:	2300      	movs	r3, #0
 8009040:	2210      	movs	r2, #16
 8009042:	4669      	mov	r1, sp
 8009044:	4861      	ldr	r0, [pc, #388]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009046:	f7fc fb5b 	bl	8005700 <chPipeReadTimeout>
    test_assert(n == PIPE_SIZE, "wrong size");
 800904a:	4961      	ldr	r1, [pc, #388]	; (80091d0 <oslib_test_003_001_execute+0x560>)
 800904c:	2810      	cmp	r0, #16
 800904e:	bf14      	ite	ne
 8009050:	2000      	movne	r0, #0
 8009052:	2001      	moveq	r0, #1
 8009054:	f7f8 f8cc 	bl	80011f0 <_test_assert>
 8009058:	2800      	cmp	r0, #0
 800905a:	f47f ae1b 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800905e:	4a5b      	ldr	r2, [pc, #364]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009060:	6893      	ldr	r3, [r2, #8]
 8009062:	68d2      	ldr	r2, [r2, #12]
 8009064:	429a      	cmp	r2, r3
 8009066:	f000 80a3 	beq.w	80091b0 <oslib_test_003_001_execute+0x540>
 800906a:	2000      	movs	r0, #0
 800906c:	4959      	ldr	r1, [pc, #356]	; (80091d4 <oslib_test_003_001_execute+0x564>)
 800906e:	f7f8 f8bf 	bl	80011f0 <_test_assert>
 8009072:	2800      	cmp	r0, #0
 8009074:	f47f ae0e 	bne.w	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 8009078:	2210      	movs	r2, #16
 800907a:	4669      	mov	r1, sp
 800907c:	4856      	ldr	r0, [pc, #344]	; (80091d8 <oslib_test_003_001_execute+0x568>)
 800907e:	f002 f943 	bl	800b308 <memcmp>
 8009082:	4956      	ldr	r1, [pc, #344]	; (80091dc <oslib_test_003_001_execute+0x56c>)
 8009084:	fab0 f080 	clz	r0, r0
 8009088:	0940      	lsrs	r0, r0, #5
 800908a:	f7f8 f8b1 	bl	80011f0 <_test_assert>
 800908e:	e601      	b.n	8008c94 <oslib_test_003_001_execute+0x24>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8009090:	4b4e      	ldr	r3, [pc, #312]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	429a      	cmp	r2, r3
 8009096:	d001      	beq.n	800909c <oslib_test_003_001_execute+0x42c>
 8009098:	2000      	movs	r0, #0
 800909a:	e627      	b.n	8008cec <oslib_test_003_001_execute+0x7c>
 800909c:	4b4b      	ldr	r3, [pc, #300]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f47f ae23 	bne.w	8008cec <oslib_test_003_001_execute+0x7c>
 80090a6:	2001      	movs	r0, #1
 80090a8:	e620      	b.n	8008cec <oslib_test_003_001_execute+0x7c>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80090aa:	4b48      	ldr	r3, [pc, #288]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d001      	beq.n	80090b6 <oslib_test_003_001_execute+0x446>
 80090b2:	2000      	movs	r0, #0
 80090b4:	e637      	b.n	8008d26 <oslib_test_003_001_execute+0xb6>
 80090b6:	4b45      	ldr	r3, [pc, #276]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f47f ae33 	bne.w	8008d26 <oslib_test_003_001_execute+0xb6>
 80090c0:	2001      	movs	r0, #1
 80090c2:	e630      	b.n	8008d26 <oslib_test_003_001_execute+0xb6>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80090c4:	4b41      	ldr	r3, [pc, #260]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d001      	beq.n	80090d0 <oslib_test_003_001_execute+0x460>
 80090cc:	2000      	movs	r0, #0
 80090ce:	e63a      	b.n	8008d46 <oslib_test_003_001_execute+0xd6>
 80090d0:	4b3e      	ldr	r3, [pc, #248]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	b10b      	cbz	r3, 80090da <oslib_test_003_001_execute+0x46a>
 80090d6:	2000      	movs	r0, #0
 80090d8:	e635      	b.n	8008d46 <oslib_test_003_001_execute+0xd6>
 80090da:	2001      	movs	r0, #1
 80090dc:	e633      	b.n	8008d46 <oslib_test_003_001_execute+0xd6>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80090de:	4b3b      	ldr	r3, [pc, #236]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d001      	beq.n	80090ea <oslib_test_003_001_execute+0x47a>
 80090e6:	2000      	movs	r0, #0
 80090e8:	e64b      	b.n	8008d82 <oslib_test_003_001_execute+0x112>
 80090ea:	4b38      	ldr	r3, [pc, #224]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	2b10      	cmp	r3, #16
 80090f0:	f47f ae47 	bne.w	8008d82 <oslib_test_003_001_execute+0x112>
 80090f4:	2001      	movs	r0, #1
 80090f6:	e644      	b.n	8008d82 <oslib_test_003_001_execute+0x112>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 80090f8:	4b34      	ldr	r3, [pc, #208]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d001      	beq.n	8009104 <oslib_test_003_001_execute+0x494>
 8009100:	2000      	movs	r0, #0
 8009102:	e65d      	b.n	8008dc0 <oslib_test_003_001_execute+0x150>
 8009104:	4b31      	ldr	r3, [pc, #196]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f47f ae59 	bne.w	8008dc0 <oslib_test_003_001_execute+0x150>
 800910e:	2001      	movs	r0, #1
 8009110:	e656      	b.n	8008dc0 <oslib_test_003_001_execute+0x150>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 8009112:	4b2e      	ldr	r3, [pc, #184]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	2b04      	cmp	r3, #4
 8009118:	f47f ae85 	bne.w	8008e26 <oslib_test_003_001_execute+0x1b6>
 800911c:	2001      	movs	r0, #1
 800911e:	e682      	b.n	8008e26 <oslib_test_003_001_execute+0x1b6>
 8009120:	2000      	movs	r0, #0
 8009122:	e680      	b.n	8008e26 <oslib_test_003_001_execute+0x1b6>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8009124:	4a29      	ldr	r2, [pc, #164]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009126:	6892      	ldr	r2, [r2, #8]
 8009128:	4293      	cmp	r3, r2
 800912a:	d001      	beq.n	8009130 <oslib_test_003_001_execute+0x4c0>
 800912c:	2000      	movs	r0, #0
 800912e:	e69a      	b.n	8008e66 <oslib_test_003_001_execute+0x1f6>
 8009130:	4b26      	ldr	r3, [pc, #152]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b10      	cmp	r3, #16
 8009136:	f47f ae96 	bne.w	8008e66 <oslib_test_003_001_execute+0x1f6>
 800913a:	2001      	movs	r0, #1
 800913c:	e693      	b.n	8008e66 <oslib_test_003_001_execute+0x1f6>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800913e:	4b23      	ldr	r3, [pc, #140]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	2b0c      	cmp	r3, #12
 8009144:	f47f aeb4 	bne.w	8008eb0 <oslib_test_003_001_execute+0x240>
 8009148:	2001      	movs	r0, #1
 800914a:	e6b1      	b.n	8008eb0 <oslib_test_003_001_execute+0x240>
 800914c:	2000      	movs	r0, #0
 800914e:	e6af      	b.n	8008eb0 <oslib_test_003_001_execute+0x240>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 8009150:	4a1e      	ldr	r2, [pc, #120]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009152:	6892      	ldr	r2, [r2, #8]
 8009154:	4293      	cmp	r3, r2
 8009156:	d001      	beq.n	800915c <oslib_test_003_001_execute+0x4ec>
 8009158:	2000      	movs	r0, #0
 800915a:	e6d7      	b.n	8008f0c <oslib_test_003_001_execute+0x29c>
 800915c:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	f47f aed3 	bne.w	8008f0c <oslib_test_003_001_execute+0x29c>
 8009166:	2001      	movs	r0, #1
 8009168:	e6d0      	b.n	8008f0c <oslib_test_003_001_execute+0x29c>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800916a:	4b18      	ldr	r3, [pc, #96]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	2b05      	cmp	r3, #5
 8009170:	f47f aeff 	bne.w	8008f72 <oslib_test_003_001_execute+0x302>
 8009174:	2001      	movs	r0, #1
 8009176:	e6fc      	b.n	8008f72 <oslib_test_003_001_execute+0x302>
 8009178:	2000      	movs	r0, #0
 800917a:	e6fa      	b.n	8008f72 <oslib_test_003_001_execute+0x302>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800917c:	4a13      	ldr	r2, [pc, #76]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 800917e:	6812      	ldr	r2, [r2, #0]
 8009180:	4293      	cmp	r3, r2
 8009182:	d006      	beq.n	8009192 <oslib_test_003_001_execute+0x522>
 8009184:	4b11      	ldr	r3, [pc, #68]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	f47f af21 	bne.w	8008fd0 <oslib_test_003_001_execute+0x360>
 800918e:	2001      	movs	r0, #1
 8009190:	e71e      	b.n	8008fd0 <oslib_test_003_001_execute+0x360>
 8009192:	2000      	movs	r0, #0
 8009194:	e71c      	b.n	8008fd0 <oslib_test_003_001_execute+0x360>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 8009196:	4a0d      	ldr	r2, [pc, #52]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 8009198:	6812      	ldr	r2, [r2, #0]
 800919a:	4293      	cmp	r3, r2
 800919c:	d006      	beq.n	80091ac <oslib_test_003_001_execute+0x53c>
 800919e:	4b0b      	ldr	r3, [pc, #44]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b10      	cmp	r3, #16
 80091a4:	f47f af42 	bne.w	800902c <oslib_test_003_001_execute+0x3bc>
 80091a8:	2001      	movs	r0, #1
 80091aa:	e73f      	b.n	800902c <oslib_test_003_001_execute+0x3bc>
 80091ac:	2000      	movs	r0, #0
 80091ae:	e73d      	b.n	800902c <oslib_test_003_001_execute+0x3bc>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 80091b0:	4a06      	ldr	r2, [pc, #24]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 80091b2:	6812      	ldr	r2, [r2, #0]
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d006      	beq.n	80091c6 <oslib_test_003_001_execute+0x556>
 80091b8:	4b04      	ldr	r3, [pc, #16]	; (80091cc <oslib_test_003_001_execute+0x55c>)
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f47f af55 	bne.w	800906c <oslib_test_003_001_execute+0x3fc>
 80091c2:	2001      	movs	r0, #1
 80091c4:	e752      	b.n	800906c <oslib_test_003_001_execute+0x3fc>
 80091c6:	2000      	movs	r0, #0
 80091c8:	e750      	b.n	800906c <oslib_test_003_001_execute+0x3fc>
 80091ca:	bf00      	nop
 80091cc:	2000088c 	.word	0x2000088c
 80091d0:	0800cbb0 	.word	0x0800cbb0
 80091d4:	0800cbbc 	.word	0x0800cbbc
 80091d8:	0800dd44 	.word	0x0800dd44
 80091dc:	0800cfe4 	.word	0x0800cfe4
 80091e0:	20002454 	.word	0x20002454
	...

080091f0 <chThdExit>:
void chThdExit(msg_t msg) {
 80091f0:	b508      	push	{r3, lr}
 80091f2:	2320      	movs	r3, #32
 80091f4:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 80091f8:	f7fc f83a 	bl	8005270 <chThdExitS>
}
 80091fc:	bd08      	pop	{r3, pc}
 80091fe:	bf00      	nop

08009200 <Thread1.lto_priv.1>:

static THD_WORKING_AREA(waThread1, 256);
static THD_FUNCTION(Thread1, arg) {
 8009200:	b508      	push	{r3, lr}

  (void)arg;

  exit_flag = false;
 8009202:	4b07      	ldr	r3, [pc, #28]	; (8009220 <Thread1.lto_priv.1+0x20>)
 8009204:	2200      	movs	r2, #0
 8009206:	701a      	strb	r2, [r3, #0]
  do {
    chDelegateDispatch();
 8009208:	f7f9 f862 	bl	80022d0 <chDelegateDispatch>
  } while (!exit_flag);
 800920c:	4b04      	ldr	r3, [pc, #16]	; (8009220 <Thread1.lto_priv.1+0x20>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0f9      	beq.n	8009208 <Thread1.lto_priv.1+0x8>

  chThdExit(0x0FA5);
 8009214:	f640 70a5 	movw	r0, #4005	; 0xfa5
 8009218:	f7ff ffea 	bl	80091f0 <chThdExit>
}
 800921c:	bd08      	pop	{r3, pc}
 800921e:	bf00      	nop
 8009220:	20001afc 	.word	0x20001afc
	...

08009230 <bmk_thread3>:
static THD_FUNCTION(bmk_thread3, p) {
 8009230:	b508      	push	{r3, lr}
  chThdExit((msg_t)p);
 8009232:	f7ff ffdd 	bl	80091f0 <chThdExit>
}
 8009236:	bd08      	pop	{r3, pc}
	...

08009240 <chThdCreate>:
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8009240:	b510      	push	{r4, lr}
 8009242:	2320      	movs	r3, #32
 8009244:	f383 8811 	msr	BASEPRI, r3
  tp = chThdCreateSuspendedI(tdp);
 8009248:	f001 f95a 	bl	800a500 <chThdCreateSuspendedI>
 800924c:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800924e:	2100      	movs	r1, #0
 8009250:	f001 f9f6 	bl	800a640 <chSchWakeupS>
 8009254:	2300      	movs	r3, #0
 8009256:	f383 8811 	msr	BASEPRI, r3
}
 800925a:	4620      	mov	r0, r4
 800925c:	bd10      	pop	{r4, pc}
 800925e:	bf00      	nop

08009260 <oslib_test_005_001_execute>:
 *   emitted tokens.
 * - [5.1.3] Waiting for the thread to terminate-.
 * .
 */

static void oslib_test_005_001_execute(void) {
 8009260:	b530      	push	{r4, r5, lr}
 8009262:	b08b      	sub	sp, #44	; 0x2c
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
 8009264:	4d4a      	ldr	r5, [pc, #296]	; (8009390 <oslib_test_005_001_execute+0x130>)
 8009266:	2301      	movs	r3, #1
 8009268:	602b      	str	r3, [r5, #0]
  {
    thread_descriptor_t td = {
 800926a:	4b4a      	ldr	r3, [pc, #296]	; (8009394 <oslib_test_005_001_execute+0x134>)
 800926c:	9304      	str	r3, [sp, #16]
 800926e:	4b4a      	ldr	r3, [pc, #296]	; (8009398 <oslib_test_005_001_execute+0x138>)
 8009270:	9305      	str	r3, [sp, #20]
 8009272:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009276:	9306      	str	r3, [sp, #24]
  return ch.rlist.current;
 8009278:	4b48      	ldr	r3, [pc, #288]	; (800939c <oslib_test_005_001_execute+0x13c>)
 800927a:	699b      	ldr	r3, [r3, #24]
  return chThdGetSelfX()->prio;
 800927c:	689b      	ldr	r3, [r3, #8]
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
      .prio  = chThdGetPriorityX() + 1,
 800927e:	3301      	adds	r3, #1
    thread_descriptor_t td = {
 8009280:	9307      	str	r3, [sp, #28]
 8009282:	4b47      	ldr	r3, [pc, #284]	; (80093a0 <oslib_test_005_001_execute+0x140>)
 8009284:	9308      	str	r3, [sp, #32]
 8009286:	2300      	movs	r3, #0
 8009288:	9309      	str	r3, [sp, #36]	; 0x24
      .funcp = Thread1,
      .arg   = NULL
    };
    tp = chThdCreate(&td);
 800928a:	a804      	add	r0, sp, #16
 800928c:	f7ff ffd8 	bl	8009240 <chThdCreate>
 8009290:	4604      	mov	r4, r0
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 8009292:	2302      	movs	r3, #2
 8009294:	602b      	str	r3, [r5, #0]
 *          pointer type. If you need a portable function then use
 *          @p chDelegateCallVeneer() instead.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 8009296:	4a43      	ldr	r2, [pc, #268]	; (80093a4 <oslib_test_005_001_execute+0x144>)
 8009298:	4943      	ldr	r1, [pc, #268]	; (80093a8 <oslib_test_005_001_execute+0x148>)
 800929a:	f7f9 fe81 	bl	8002fa0 <chDelegateCallVeneer>
  {
    int retval;

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func0);
    test_assert(retval == 0x55AA, "invalid return value");
 800929e:	4943      	ldr	r1, [pc, #268]	; (80093ac <oslib_test_005_001_execute+0x14c>)
 80092a0:	f245 53aa 	movw	r3, #21930	; 0x55aa
 80092a4:	4298      	cmp	r0, r3
 80092a6:	bf14      	ite	ne
 80092a8:	2000      	movne	r0, #0
 80092aa:	2001      	moveq	r0, #1
 80092ac:	f7f7 ffa0 	bl	80011f0 <_test_assert>
 80092b0:	b108      	cbz	r0, 80092b6 <oslib_test_005_001_execute+0x56>
  {
    msg_t msg = chThdWait(tp);
    test_assert(msg == 0x0FA5, "invalid exit code");
  }
  test_end_step(3);
}
 80092b2:	b00b      	add	sp, #44	; 0x2c
 80092b4:	bd30      	pop	{r4, r5, pc}
 *          @p chDelegateCallVeneer() instead.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 80092b6:	2341      	movs	r3, #65	; 0x41
 80092b8:	4a3d      	ldr	r2, [pc, #244]	; (80093b0 <oslib_test_005_001_execute+0x150>)
 80092ba:	493e      	ldr	r1, [pc, #248]	; (80093b4 <oslib_test_005_001_execute+0x154>)
 80092bc:	4620      	mov	r0, r4
 80092be:	f7f9 fe6f 	bl	8002fa0 <chDelegateCallVeneer>
    test_assert(retval == (int)'A', "invalid return value");
 80092c2:	493a      	ldr	r1, [pc, #232]	; (80093ac <oslib_test_005_001_execute+0x14c>)
 80092c4:	2841      	cmp	r0, #65	; 0x41
 80092c6:	bf14      	ite	ne
 80092c8:	2000      	movne	r0, #0
 80092ca:	2001      	moveq	r0, #1
 80092cc:	f7f7 ff90 	bl	80011f0 <_test_assert>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d1ee      	bne.n	80092b2 <oslib_test_005_001_execute+0x52>
 *          @p chDelegateCallVeneer() instead.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 80092d4:	2343      	movs	r3, #67	; 0x43
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	2342      	movs	r3, #66	; 0x42
 80092da:	4a37      	ldr	r2, [pc, #220]	; (80093b8 <oslib_test_005_001_execute+0x158>)
 80092dc:	4937      	ldr	r1, [pc, #220]	; (80093bc <oslib_test_005_001_execute+0x15c>)
 80092de:	4620      	mov	r0, r4
 80092e0:	f7f9 fe5e 	bl	8002fa0 <chDelegateCallVeneer>
    test_assert(retval == (int)'B', "invalid return value");
 80092e4:	4931      	ldr	r1, [pc, #196]	; (80093ac <oslib_test_005_001_execute+0x14c>)
 80092e6:	2842      	cmp	r0, #66	; 0x42
 80092e8:	bf14      	ite	ne
 80092ea:	2000      	movne	r0, #0
 80092ec:	2001      	moveq	r0, #1
 80092ee:	f7f7 ff7f 	bl	80011f0 <_test_assert>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d1dd      	bne.n	80092b2 <oslib_test_005_001_execute+0x52>
 *          @p chDelegateCallVeneer() instead.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 80092f6:	2346      	movs	r3, #70	; 0x46
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	2345      	movs	r3, #69	; 0x45
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	2344      	movs	r3, #68	; 0x44
 8009300:	4a2f      	ldr	r2, [pc, #188]	; (80093c0 <oslib_test_005_001_execute+0x160>)
 8009302:	4930      	ldr	r1, [pc, #192]	; (80093c4 <oslib_test_005_001_execute+0x164>)
 8009304:	4620      	mov	r0, r4
 8009306:	f7f9 fe4b 	bl	8002fa0 <chDelegateCallVeneer>
    test_assert(retval == (int)'D', "invalid return value");
 800930a:	4928      	ldr	r1, [pc, #160]	; (80093ac <oslib_test_005_001_execute+0x14c>)
 800930c:	2844      	cmp	r0, #68	; 0x44
 800930e:	bf14      	ite	ne
 8009310:	2000      	movne	r0, #0
 8009312:	2001      	moveq	r0, #1
 8009314:	f7f7 ff6c 	bl	80011f0 <_test_assert>
 8009318:	2800      	cmp	r0, #0
 800931a:	d1ca      	bne.n	80092b2 <oslib_test_005_001_execute+0x52>
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 800931c:	234a      	movs	r3, #74	; 0x4a
 800931e:	9302      	str	r3, [sp, #8]
 8009320:	2349      	movs	r3, #73	; 0x49
 8009322:	9301      	str	r3, [sp, #4]
 8009324:	2348      	movs	r3, #72	; 0x48
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	2347      	movs	r3, #71	; 0x47
 800932a:	4a27      	ldr	r2, [pc, #156]	; (80093c8 <oslib_test_005_001_execute+0x168>)
 800932c:	4927      	ldr	r1, [pc, #156]	; (80093cc <oslib_test_005_001_execute+0x16c>)
 800932e:	4620      	mov	r0, r4
 8009330:	f7f9 fe36 	bl	8002fa0 <chDelegateCallVeneer>
    test_assert(retval == (int)'G', "invalid return value");
 8009334:	491d      	ldr	r1, [pc, #116]	; (80093ac <oslib_test_005_001_execute+0x14c>)
 8009336:	2847      	cmp	r0, #71	; 0x47
 8009338:	bf14      	ite	ne
 800933a:	2000      	movne	r0, #0
 800933c:	2001      	moveq	r0, #1
 800933e:	f7f7 ff57 	bl	80011f0 <_test_assert>
 8009342:	2800      	cmp	r0, #0
 8009344:	d1b5      	bne.n	80092b2 <oslib_test_005_001_execute+0x52>
  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 8009346:	4a22      	ldr	r2, [pc, #136]	; (80093d0 <oslib_test_005_001_execute+0x170>)
 8009348:	4917      	ldr	r1, [pc, #92]	; (80093a8 <oslib_test_005_001_execute+0x148>)
 800934a:	4620      	mov	r0, r4
 800934c:	f7f9 fe28 	bl	8002fa0 <chDelegateCallVeneer>
    test_assert(retval == 0xAA55, "invalid return value");
 8009350:	4916      	ldr	r1, [pc, #88]	; (80093ac <oslib_test_005_001_execute+0x14c>)
 8009352:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009356:	4298      	cmp	r0, r3
 8009358:	bf14      	ite	ne
 800935a:	2000      	movne	r0, #0
 800935c:	2001      	moveq	r0, #1
 800935e:	f7f7 ff47 	bl	80011f0 <_test_assert>
 8009362:	2800      	cmp	r0, #0
 8009364:	d1a5      	bne.n	80092b2 <oslib_test_005_001_execute+0x52>
    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 8009366:	491b      	ldr	r1, [pc, #108]	; (80093d4 <oslib_test_005_001_execute+0x174>)
 8009368:	481b      	ldr	r0, [pc, #108]	; (80093d8 <oslib_test_005_001_execute+0x178>)
 800936a:	f7f7 fff1 	bl	8001350 <_test_assert_sequence>
 800936e:	2800      	cmp	r0, #0
 8009370:	d19f      	bne.n	80092b2 <oslib_test_005_001_execute+0x52>
  test_set_step(3);
 8009372:	2203      	movs	r2, #3
 8009374:	602a      	str	r2, [r5, #0]
    msg_t msg = chThdWait(tp);
 8009376:	4620      	mov	r0, r4
 8009378:	f7fa fd52 	bl	8003e20 <chThdWait>
    test_assert(msg == 0x0FA5, "invalid exit code");
 800937c:	4917      	ldr	r1, [pc, #92]	; (80093dc <oslib_test_005_001_execute+0x17c>)
 800937e:	f640 73a5 	movw	r3, #4005	; 0xfa5
 8009382:	4298      	cmp	r0, r3
 8009384:	bf14      	ite	ne
 8009386:	2000      	movne	r0, #0
 8009388:	2001      	moveq	r0, #1
 800938a:	f7f7 ff31 	bl	80011f0 <_test_assert>
  test_end_step(3);
 800938e:	e790      	b.n	80092b2 <oslib_test_005_001_execute+0x52>
 8009390:	20002454 	.word	0x20002454
 8009394:	0800cff8 	.word	0x0800cff8
 8009398:	20002840 	.word	0x20002840
 800939c:	20001a18 	.word	0x20001a18
 80093a0:	08009201 	.word	0x08009201
 80093a4:	08000851 	.word	0x08000851
 80093a8:	08000711 	.word	0x08000711
 80093ac:	0800d004 	.word	0x0800d004
 80093b0:	08000861 	.word	0x08000861
 80093b4:	08000721 	.word	0x08000721
 80093b8:	08000871 	.word	0x08000871
 80093bc:	08000741 	.word	0x08000741
 80093c0:	08000891 	.word	0x08000891
 80093c4:	08000761 	.word	0x08000761
 80093c8:	080008b1 	.word	0x080008b1
 80093cc:	08000791 	.word	0x08000791
 80093d0:	080008e1 	.word	0x080008e1
 80093d4:	0800cb38 	.word	0x0800cb38
 80093d8:	0800d01c 	.word	0x0800d01c
 80093dc:	0800d02c 	.word	0x0800d02c

080093e0 <oslib_test_004_001_execute>:
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 80093e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e4:	b08c      	sub	sp, #48	; 0x30
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 80093e6:	4d40      	ldr	r5, [pc, #256]	; (80094e8 <oslib_test_004_001_execute+0x108>)
 80093e8:	2301      	movs	r3, #1
 80093ea:	602b      	str	r3, [r5, #0]
  chGuardedPoolObjectInitAligned(gmp, size, PORT_NATURAL_ALIGN);
 80093ec:	4c3f      	ldr	r4, [pc, #252]	; (80094ec <oslib_test_004_001_execute+0x10c>)
 80093ee:	2204      	movs	r2, #4
 80093f0:	2108      	movs	r1, #8
 80093f2:	4620      	mov	r0, r4
 80093f4:	f7f8 fcfc 	bl	8001df0 <chGuardedPoolObjectInitAligned>
  chGuardedPoolLoadArray(&jqp->free, (void *)jobsbuf, jobsn);
 80093f8:	2204      	movs	r2, #4
 80093fa:	493d      	ldr	r1, [pc, #244]	; (80094f0 <oslib_test_004_001_execute+0x110>)
 80093fc:	4620      	mov	r0, r4
 80093fe:	f7fb fda7 	bl	8004f50 <chGuardedPoolLoadArray>
  chMBObjectInit(&jqp->mbx, msgbuf, jobsn);
 8009402:	2204      	movs	r2, #4
 8009404:	493b      	ldr	r1, [pc, #236]	; (80094f4 <oslib_test_004_001_execute+0x114>)
 8009406:	f104 001c 	add.w	r0, r4, #28
 800940a:	f7f8 fad1 	bl	80019b0 <chMBObjectInit>
    chJobObjectInit(&jq, JOBS_QUEUE_SIZE, jobs, msg_queue);
  }
  test_end_step(1);

  /* [4.1.2] Starting the dispatcher threads.*/
  test_set_step(2);
 800940e:	2302      	movs	r3, #2
 8009410:	602b      	str	r3, [r5, #0]
  {
    thread_descriptor_t td1 = {
 8009412:	4b39      	ldr	r3, [pc, #228]	; (80094f8 <oslib_test_004_001_execute+0x118>)
 8009414:	9306      	str	r3, [sp, #24]
 8009416:	4b39      	ldr	r3, [pc, #228]	; (80094fc <oslib_test_004_001_execute+0x11c>)
 8009418:	9307      	str	r3, [sp, #28]
 800941a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800941e:	9308      	str	r3, [sp, #32]
  return ch.rlist.current;
 8009420:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8009518 <oslib_test_004_001_execute+0x138>
 8009424:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 8009428:	689b      	ldr	r3, [r3, #8]
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
      .prio  = chThdGetPriorityX() - 1,
 800942a:	3b01      	subs	r3, #1
    thread_descriptor_t td1 = {
 800942c:	9309      	str	r3, [sp, #36]	; 0x24
 800942e:	4e34      	ldr	r6, [pc, #208]	; (8009500 <oslib_test_004_001_execute+0x120>)
 8009430:	960a      	str	r6, [sp, #40]	; 0x28
 8009432:	2400      	movs	r4, #0
 8009434:	940b      	str	r4, [sp, #44]	; 0x2c
      .funcp = Thread1,
      .arg   = NULL
    };
    tp1 = chThdCreate(&td1);
 8009436:	a806      	add	r0, sp, #24
 8009438:	f7ff ff02 	bl	8009240 <chThdCreate>
 800943c:	4607      	mov	r7, r0

    thread_descriptor_t td2 = {
 800943e:	4b31      	ldr	r3, [pc, #196]	; (8009504 <oslib_test_004_001_execute+0x124>)
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	4b31      	ldr	r3, [pc, #196]	; (8009508 <oslib_test_004_001_execute+0x128>)
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800944a:	9302      	str	r3, [sp, #8]
  return ch.rlist.current;
 800944c:	f8d8 3018 	ldr.w	r3, [r8, #24]
  return chThdGetSelfX()->prio;
 8009450:	689b      	ldr	r3, [r3, #8]
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
      .prio  = chThdGetPriorityX() - 2,
 8009452:	3b02      	subs	r3, #2
    thread_descriptor_t td2 = {
 8009454:	9303      	str	r3, [sp, #12]
 8009456:	9604      	str	r6, [sp, #16]
 8009458:	9405      	str	r4, [sp, #20]
      .funcp = Thread1,
      .arg   = NULL
    };
    tp2 = chThdCreate(&td2);
 800945a:	4668      	mov	r0, sp
 800945c:	f7ff fef0 	bl	8009240 <chThdCreate>
 8009460:	4606      	mov	r6, r0
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 8009462:	2303      	movs	r3, #3
 8009464:	602b      	str	r3, [r5, #0]
  {
    unsigned i;
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
 8009466:	e011      	b.n	800948c <oslib_test_004_001_execute+0xac>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8009468:	4d20      	ldr	r5, [pc, #128]	; (80094ec <oslib_test_004_001_execute+0x10c>)
 800946a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800946e:	4628      	mov	r0, r5
 8009470:	f7fc f896 	bl	80055a0 <chGuardedPoolAllocTimeout>
 8009474:	4601      	mov	r1, r0
      jdp = chJobGet(&jq);
      jdp->jobfunc = job_slow;
 8009476:	4b25      	ldr	r3, [pc, #148]	; (800950c <oslib_test_004_001_execute+0x12c>)
 8009478:	6003      	str	r3, [r0, #0]
      jdp->jobarg  = (void *)('a' + i);
 800947a:	f104 0361 	add.w	r3, r4, #97	; 0x61
 800947e:	6043      	str	r3, [r0, #4]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 8009480:	2200      	movs	r2, #0
 8009482:	f105 001c 	add.w	r0, r5, #28
 8009486:	f7fe ff8b 	bl	80083a0 <chMBPostTimeout>
    for (i = 0; i < 8; i++) {
 800948a:	3401      	adds	r4, #1
 800948c:	2c07      	cmp	r4, #7
 800948e:	d9eb      	bls.n	8009468 <oslib_test_004_001_execute+0x88>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 8009490:	4b15      	ldr	r3, [pc, #84]	; (80094e8 <oslib_test_004_001_execute+0x108>)
 8009492:	2204      	movs	r2, #4
 8009494:	601a      	str	r2, [r3, #0]
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8009496:	4d15      	ldr	r5, [pc, #84]	; (80094ec <oslib_test_004_001_execute+0x10c>)
 8009498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800949c:	4628      	mov	r0, r5
 800949e:	f7fc f87f 	bl	80055a0 <chGuardedPoolAllocTimeout>
 80094a2:	4601      	mov	r1, r0
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
 80094a4:	2400      	movs	r4, #0
 80094a6:	6004      	str	r4, [r0, #0]
    jdp->jobarg  = NULL;
 80094a8:	6044      	str	r4, [r0, #4]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80094aa:	f105 081c 	add.w	r8, r5, #28
 80094ae:	4622      	mov	r2, r4
 80094b0:	4640      	mov	r0, r8
 80094b2:	f7fe ff75 	bl	80083a0 <chMBPostTimeout>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80094b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80094ba:	4628      	mov	r0, r5
 80094bc:	f7fc f870 	bl	80055a0 <chGuardedPoolAllocTimeout>
 80094c0:	4601      	mov	r1, r0
    chJobPost(&jq, jdp);
    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
 80094c2:	6004      	str	r4, [r0, #0]
    jdp->jobarg  = NULL;
 80094c4:	6044      	str	r4, [r0, #4]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80094c6:	4622      	mov	r2, r4
 80094c8:	4640      	mov	r0, r8
 80094ca:	f7fe ff69 	bl	80083a0 <chMBPostTimeout>
    chJobPost(&jq, jdp);
    (void) chThdWait(tp1);
 80094ce:	4638      	mov	r0, r7
 80094d0:	f7fa fca6 	bl	8003e20 <chThdWait>
    (void) chThdWait(tp2);
 80094d4:	4630      	mov	r0, r6
 80094d6:	f7fa fca3 	bl	8003e20 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 80094da:	490d      	ldr	r1, [pc, #52]	; (8009510 <oslib_test_004_001_execute+0x130>)
 80094dc:	480d      	ldr	r0, [pc, #52]	; (8009514 <oslib_test_004_001_execute+0x134>)
 80094de:	f7f7 ff37 	bl	8001350 <_test_assert_sequence>
  }
  test_end_step(4);
}
 80094e2:	b00c      	add	sp, #48	; 0x30
 80094e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e8:	20002454 	.word	0x20002454
 80094ec:	20001b9c 	.word	0x20001b9c
 80094f0:	20001b7c 	.word	0x20001b7c
 80094f4:	20001c00 	.word	0x20001c00
 80094f8:	0800d040 	.word	0x0800d040
 80094fc:	200024b0 	.word	0x200024b0
 8009500:	08008281 	.word	0x08008281
 8009504:	0800d04c 	.word	0x0800d04c
 8009508:	20002678 	.word	0x20002678
 800950c:	08005951 	.word	0x08005951
 8009510:	0800cb38 	.word	0x0800cb38
 8009514:	0800cb68 	.word	0x0800cb68
 8009518:	20001a18 	.word	0x20001a18
 800951c:	00000000 	.word	0x00000000

08009520 <chSchReadyAheadI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8009520:	2300      	movs	r3, #0
 8009522:	f880 3020 	strb.w	r3, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8009526:	4b06      	ldr	r3, [pc, #24]	; (8009540 <chSchReadyAheadI+0x20>)
  do {
    cp = cp->queue.next;
 8009528:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 800952a:	6899      	ldr	r1, [r3, #8]
 800952c:	6882      	ldr	r2, [r0, #8]
 800952e:	4291      	cmp	r1, r2
 8009530:	d8fa      	bhi.n	8009528 <chSchReadyAheadI+0x8>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8009532:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8009538:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800953a:	6058      	str	r0, [r3, #4]

  return tp;
}
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	20001a18 	.word	0x20001a18
	...

08009550 <_scheduler_init>:
  tqp->next = (thread_t *)tqp;
 8009550:	4b03      	ldr	r3, [pc, #12]	; (8009560 <_scheduler_init+0x10>)
 8009552:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8009554:	605b      	str	r3, [r3, #4]
  ch.rlist.prio = NOPRIO;
 8009556:	2200      	movs	r2, #0
 8009558:	609a      	str	r2, [r3, #8]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 800955a:	611b      	str	r3, [r3, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 800955c:	615b      	str	r3, [r3, #20]
}
 800955e:	4770      	bx	lr
 8009560:	20001a18 	.word	0x20001a18
	...

08009570 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8009570:	4b05      	ldr	r3, [pc, #20]	; (8009588 <_vt_init+0x18>)
 8009572:	f103 021c 	add.w	r2, r3, #28
 8009576:	61da      	str	r2, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8009578:	621a      	str	r2, [r3, #32]
  ch.vtlist.delta = (sysinterval_t)-1;
 800957a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800957e:	625a      	str	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8009580:	2200      	movs	r2, #0
 8009582:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	20001a18 	.word	0x20001a18
 800958c:	00000000 	.word	0x00000000

08009590 <chSysHalt>:
  __ASM volatile ("cpsid i" : : : "memory");
 8009590:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8009592:	4a01      	ldr	r2, [pc, #4]	; (8009598 <chSysHalt+0x8>)
 8009594:	62d0      	str	r0, [r2, #44]	; 0x2c

  /* Halt hook code, usually empty.*/
  CH_CFG_SYSTEM_HALT_HOOK(reason);

  /* Harmless infinite loop.*/
  while (true) {
 8009596:	e7fe      	b.n	8009596 <chSysHalt+0x6>
 8009598:	20001a18 	.word	0x20001a18
 800959c:	00000000 	.word	0x00000000

080095a0 <_idle_thread>:
}
 80095a0:	e7fe      	b.n	80095a0 <_idle_thread>
 80095a2:	bf00      	nop
	...

080095b0 <gpio_init>:
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80095b0:	684b      	ldr	r3, [r1, #4]
 80095b2:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80095b4:	688b      	ldr	r3, [r1, #8]
 80095b6:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80095b8:	68cb      	ldr	r3, [r1, #12]
 80095ba:	60c3      	str	r3, [r0, #12]
  gpiop->ODR     = config->odr;
 80095bc:	690b      	ldr	r3, [r1, #16]
 80095be:	6143      	str	r3, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80095c0:	694b      	ldr	r3, [r1, #20]
 80095c2:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80095c4:	698b      	ldr	r3, [r1, #24]
 80095c6:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80095c8:	680b      	ldr	r3, [r1, #0]
 80095ca:	6003      	str	r3, [r0, #0]
}
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop

080095d0 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 80095d0:	b510      	push	{r4, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80095d2:	4b1e      	ldr	r3, [pc, #120]	; (800964c <stm32_gpio_init+0x7c>)
 80095d4:	691a      	ldr	r2, [r3, #16]
 80095d6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80095da:	611a      	str	r2, [r3, #16]
 80095dc:	691a      	ldr	r2, [r3, #16]
 80095de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80095e2:	611a      	str	r2, [r3, #16]
 80095e4:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80095e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095e8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80095ec:	631a      	str	r2, [r3, #48]	; 0x30
 80095ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095f0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80095f4:	651a      	str	r2, [r3, #80]	; 0x50
 80095f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 80095f8:	4c15      	ldr	r4, [pc, #84]	; (8009650 <stm32_gpio_init+0x80>)
 80095fa:	4621      	mov	r1, r4
 80095fc:	4815      	ldr	r0, [pc, #84]	; (8009654 <stm32_gpio_init+0x84>)
 80095fe:	f7ff ffd7 	bl	80095b0 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 8009602:	f104 011c 	add.w	r1, r4, #28
 8009606:	4814      	ldr	r0, [pc, #80]	; (8009658 <stm32_gpio_init+0x88>)
 8009608:	f7ff ffd2 	bl	80095b0 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 800960c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8009610:	4812      	ldr	r0, [pc, #72]	; (800965c <stm32_gpio_init+0x8c>)
 8009612:	f7ff ffcd 	bl	80095b0 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 8009616:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800961a:	4811      	ldr	r0, [pc, #68]	; (8009660 <stm32_gpio_init+0x90>)
 800961c:	f7ff ffc8 	bl	80095b0 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 8009620:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8009624:	480f      	ldr	r0, [pc, #60]	; (8009664 <stm32_gpio_init+0x94>)
 8009626:	f7ff ffc3 	bl	80095b0 <gpio_init>
#endif
#if STM32_HAS_GPIOF
  gpio_init(GPIOF, &gpio_default_config.PFData);
 800962a:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 800962e:	480e      	ldr	r0, [pc, #56]	; (8009668 <stm32_gpio_init+0x98>)
 8009630:	f7ff ffbe 	bl	80095b0 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
 8009634:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
 8009638:	480c      	ldr	r0, [pc, #48]	; (800966c <stm32_gpio_init+0x9c>)
 800963a:	f7ff ffb9 	bl	80095b0 <gpio_init>
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 800963e:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 8009642:	480b      	ldr	r0, [pc, #44]	; (8009670 <stm32_gpio_init+0xa0>)
 8009644:	f7ff ffb4 	bl	80095b0 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 8009648:	bd10      	pop	{r4, pc}
 800964a:	bf00      	nop
 800964c:	40023800 	.word	0x40023800
 8009650:	0800e384 	.word	0x0800e384
 8009654:	40020000 	.word	0x40020000
 8009658:	40020400 	.word	0x40020400
 800965c:	40020800 	.word	0x40020800
 8009660:	40020c00 	.word	0x40020c00
 8009664:	40021000 	.word	0x40021000
 8009668:	40021400 	.word	0x40021400
 800966c:	40021800 	.word	0x40021800
 8009670:	40021c00 	.word	0x40021c00
	...

08009680 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8009680:	4a02      	ldr	r2, [pc, #8]	; (800968c <notify2+0xc>)
 8009682:	68d3      	ldr	r3, [r2, #12]
 8009684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009688:	60d3      	str	r3, [r2, #12]
}
 800968a:	4770      	bx	lr
 800968c:	40004400 	.word	0x40004400

08009690 <usart_init>:
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 8009690:	b410      	push	{r4}
  USART_TypeDef *u = sdp->usart;
 8009692:	6f43      	ldr	r3, [r0, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8009694:	4a1e      	ldr	r2, [pc, #120]	; (8009710 <usart_init+0x80>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d008      	beq.n	80096ac <usart_init+0x1c>
 800969a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800969e:	4293      	cmp	r3, r2
 80096a0:	d004      	beq.n	80096ac <usart_init+0x1c>
    fck = STM32_PCLK1 / config->speed;
 80096a2:	680c      	ldr	r4, [r1, #0]
 80096a4:	4a1b      	ldr	r2, [pc, #108]	; (8009714 <usart_init+0x84>)
 80096a6:	fbb2 f2f4 	udiv	r2, r2, r4
 80096aa:	e003      	b.n	80096b4 <usart_init+0x24>
    fck = STM32_PCLK2 / config->speed;
 80096ac:	680c      	ldr	r4, [r1, #0]
 80096ae:	4a1a      	ldr	r2, [pc, #104]	; (8009718 <usart_init+0x88>)
 80096b0:	fbb2 f2f4 	udiv	r2, r2, r4
  if (config->cr1 & USART_CR1_OVER8)
 80096b4:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80096b8:	2c00      	cmp	r4, #0
 80096ba:	db1d      	blt.n	80096f8 <usart_init+0x68>
  u->BRR = fck;
 80096bc:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80096be:	88ca      	ldrh	r2, [r1, #6]
 80096c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096c4:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80096c6:	890a      	ldrh	r2, [r1, #8]
 80096c8:	f042 0201 	orr.w	r2, r2, #1
 80096cc:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80096ce:	888a      	ldrh	r2, [r1, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 80096d0:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
 80096d4:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80096d8:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80096de:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80096e0:	685b      	ldr	r3, [r3, #4]
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 80096e2:	888b      	ldrh	r3, [r1, #4]
 80096e4:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 80096e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096ec:	d00b      	beq.n	8009706 <usart_init+0x76>
    sdp->rxmask = 0xFF;
 80096ee:	23ff      	movs	r3, #255	; 0xff
 80096f0:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
}
 80096f4:	bc10      	pop	{r4}
 80096f6:	4770      	bx	lr
    fck = ((fck & ~7) * 2) | (fck & 7);
 80096f8:	f022 0407 	bic.w	r4, r2, #7
 80096fc:	f002 0207 	and.w	r2, r2, #7
 8009700:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8009704:	e7da      	b.n	80096bc <usart_init+0x2c>
    sdp->rxmask = 0x7F;
 8009706:	237f      	movs	r3, #127	; 0x7f
 8009708:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
 800970c:	e7f2      	b.n	80096f4 <usart_init+0x64>
 800970e:	bf00      	nop
 8009710:	40011000 	.word	0x40011000
 8009714:	02aea540 	.word	0x02aea540
 8009718:	055d4a80 	.word	0x055d4a80
 800971c:	00000000 	.word	0x00000000

08009720 <spi_lld_send>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 8009720:	b410      	push	{r4}

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8009722:	6a03      	ldr	r3, [r0, #32]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4c11      	ldr	r4, [pc, #68]	; (800976c <spi_lld_send+0x4c>)
 8009728:	60dc      	str	r4, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800972a:	6a03      	ldr	r3, [r0, #32]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8009730:	6a03      	ldr	r3, [r0, #32]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8009736:	601c      	str	r4, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8009738:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800973e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8009744:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800974a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800974e:	6013      	str	r3, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 8009750:	6a03      	ldr	r3, [r0, #32]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	6813      	ldr	r3, [r2, #0]
 8009756:	f043 0301 	orr.w	r3, r3, #1
 800975a:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 800975c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	6813      	ldr	r3, [r2, #0]
 8009762:	f043 0301 	orr.w	r3, r3, #1
 8009766:	6013      	str	r3, [r2, #0]
}
 8009768:	bc10      	pop	{r4}
 800976a:	4770      	bx	lr
 800976c:	20002be4 	.word	0x20002be4

08009770 <spi_lld_serve_tx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8009770:	f011 0f0c 	tst.w	r1, #12
 8009774:	d100      	bne.n	8009778 <spi_lld_serve_tx_interrupt+0x8>
 8009776:	4770      	bx	lr
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 8009778:	b508      	push	{r3, lr}
  chSysHalt(reason);
 800977a:	4801      	ldr	r0, [pc, #4]	; (8009780 <spi_lld_serve_tx_interrupt+0x10>)
 800977c:	f7ff ff08 	bl	8009590 <chSysHalt>
 8009780:	0800e28c 	.word	0x0800e28c
	...

08009790 <_pal_lld_init>:
void _pal_lld_init(void) {

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
 8009790:	2300      	movs	r3, #0
 8009792:	2b0f      	cmp	r3, #15
 8009794:	d807      	bhi.n	80097a6 <_pal_lld_init+0x16>
    _pal_init_event(i);
 8009796:	4904      	ldr	r1, [pc, #16]	; (80097a8 <_pal_lld_init+0x18>)
 8009798:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
  tqp->next = (thread_t *)tqp;
 800979c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
  tqp->prev = (thread_t *)tqp;
 80097a0:	6052      	str	r2, [r2, #4]
  for (i = 0; i < 16; i++) {
 80097a2:	3301      	adds	r3, #1
 80097a4:	e7f5      	b.n	8009792 <_pal_lld_init+0x2>
  }
#endif
}
 80097a6:	4770      	bx	lr
 80097a8:	20002a08 	.word	0x20002a08
 80097ac:	00000000 	.word	0x00000000

080097b0 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	4a0d      	ldr	r2, [pc, #52]	; (80097e8 <dmaInit+0x38>)
 80097b4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80097b6:	2b0f      	cmp	r3, #15
 80097b8:	d80c      	bhi.n	80097d4 <dmaInit+0x24>
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 80097ba:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80097be:	008a      	lsls	r2, r1, #2
 80097c0:	490a      	ldr	r1, [pc, #40]	; (80097ec <dmaInit+0x3c>)
 80097c2:	588a      	ldr	r2, [r1, r2]
 80097c4:	2100      	movs	r1, #0
 80097c6:	6011      	str	r1, [r2, #0]
    dma.streams[i].func = NULL;
 80097c8:	4a07      	ldr	r2, [pc, #28]	; (80097e8 <dmaInit+0x38>)
 80097ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80097ce:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80097d0:	3301      	adds	r3, #1
 80097d2:	e7f0      	b.n	80097b6 <dmaInit+0x6>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 80097d4:	4a06      	ldr	r2, [pc, #24]	; (80097f0 <dmaInit+0x40>)
 80097d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097da:	6093      	str	r3, [r2, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 80097dc:	60d3      	str	r3, [r2, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 80097de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097e2:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 80097e4:	60d3      	str	r3, [r2, #12]
}
 80097e6:	4770      	bx	lr
 80097e8:	20002b60 	.word	0x20002b60
 80097ec:	0800e2a0 	.word	0x0800e2a0
 80097f0:	40026000 	.word	0x40026000
	...

08009800 <stm32_clock_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8009800:	4b56      	ldr	r3, [pc, #344]	; (800995c <stm32_clock_init+0x15c>)
 8009802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009806:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8009808:	4a55      	ldr	r2, [pc, #340]	; (8009960 <stm32_clock_init+0x160>)
 800980a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800980e:	6011      	str	r1, [r2, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	f042 0201 	orr.w	r2, r2, #1
 8009816:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8009818:	4b50      	ldr	r3, [pc, #320]	; (800995c <stm32_clock_init+0x15c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f013 0f02 	tst.w	r3, #2
 8009820:	d0fa      	beq.n	8009818 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8009822:	4a4e      	ldr	r2, [pc, #312]	; (800995c <stm32_clock_init+0x15c>)
 8009824:	6893      	ldr	r3, [r2, #8]
 8009826:	f023 0303 	bic.w	r3, r3, #3
 800982a:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800982c:	4b4b      	ldr	r3, [pc, #300]	; (800995c <stm32_clock_init+0x15c>)
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f013 0f0c 	tst.w	r3, #12
 8009834:	d1fa      	bne.n	800982c <stm32_clock_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8009836:	4b49      	ldr	r3, [pc, #292]	; (800995c <stm32_clock_init+0x15c>)
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 800983e:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8009840:	2200      	movs	r2, #0
 8009842:	609a      	str	r2, [r3, #8]

#if STM32_HSE_ENABLED
  /* HSE activation.*/
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800984a:	601a      	str	r2, [r3, #0]
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800984c:	4b43      	ldr	r3, [pc, #268]	; (800995c <stm32_clock_init+0x15c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009854:	d0fa      	beq.n	800984c <stm32_clock_init+0x4c>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8009856:	4a41      	ldr	r2, [pc, #260]	; (800995c <stm32_clock_init+0x15c>)
 8009858:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800985a:	f043 0301 	orr.w	r3, r3, #1
 800985e:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8009860:	4b3e      	ldr	r3, [pc, #248]	; (800995c <stm32_clock_init+0x15c>)
 8009862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009864:	f013 0f02 	tst.w	r3, #2
 8009868:	d0fa      	beq.n	8009860 <stm32_clock_init+0x60>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800986a:	4b3c      	ldr	r3, [pc, #240]	; (800995c <stm32_clock_init+0x15c>)
 800986c:	4a3d      	ldr	r2, [pc, #244]	; (8009964 <stm32_clock_init+0x164>)
 800986e:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8009876:	601a      	str	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8009878:	4b39      	ldr	r3, [pc, #228]	; (8009960 <stm32_clock_init+0x160>)
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009880:	d0fa      	beq.n	8009878 <stm32_clock_init+0x78>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR |= PWR_CR_ODEN;
 8009882:	4a37      	ldr	r2, [pc, #220]	; (8009960 <stm32_clock_init+0x160>)
 8009884:	6813      	ldr	r3, [r2, #0]
 8009886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800988a:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 800988c:	4b34      	ldr	r3, [pc, #208]	; (8009960 <stm32_clock_init+0x160>)
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009894:	d0fa      	beq.n	800988c <stm32_clock_init+0x8c>
      ;
  PWR->CR |= PWR_CR_ODSWEN;
 8009896:	4a32      	ldr	r2, [pc, #200]	; (8009960 <stm32_clock_init+0x160>)
 8009898:	6813      	ldr	r3, [r2, #0]
 800989a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800989e:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 80098a0:	4b2f      	ldr	r3, [pc, #188]	; (8009960 <stm32_clock_init+0x160>)
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80098a8:	d0fa      	beq.n	80098a0 <stm32_clock_init+0xa0>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80098aa:	4b2c      	ldr	r3, [pc, #176]	; (800995c <stm32_clock_init+0x15c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80098b2:	d0fa      	beq.n	80098aa <stm32_clock_init+0xaa>
    ;
#endif /* STM32_ACTIVATE_PLL */

#if STM32_ACTIVATE_PLLI2S
  /* PLLI2S activation.*/
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 80098b4:	4b29      	ldr	r3, [pc, #164]	; (800995c <stm32_clock_init+0x15c>)
 80098b6:	4a2c      	ldr	r2, [pc, #176]	; (8009968 <stm32_clock_init+0x168>)
 80098b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    STM32_PLLI2SSRC | STM32_PLLI2SQ | STM32_PLLI2SM;
  RCC->CR |= RCC_CR_PLLI2SON;
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80098c2:	601a      	str	r2, [r3, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 80098c4:	4b25      	ldr	r3, [pc, #148]	; (800995c <stm32_clock_init+0x15c>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80098cc:	d0fa      	beq.n	80098c4 <stm32_clock_init+0xc4>
    ;
#endif /* STM32_ACTIVATE_PLLI2S */

#if STM32_ACTIVATE_PLLSAI
  /* PLLSAI activation.*/
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 80098ce:	4b23      	ldr	r3, [pc, #140]	; (800995c <stm32_clock_init+0x15c>)
 80098d0:	4a26      	ldr	r2, [pc, #152]	; (800996c <stm32_clock_init+0x16c>)
 80098d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    STM32_PLLSAIQ | STM32_PLLSAIM;
  RCC->CR |= RCC_CR_PLLSAION;
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80098dc:	601a      	str	r2, [r3, #0]

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 80098de:	4b1f      	ldr	r3, [pc, #124]	; (800995c <stm32_clock_init+0x15c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80098e6:	d0fa      	beq.n	80098de <stm32_clock_init+0xde>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80098e8:	4b1c      	ldr	r3, [pc, #112]	; (800995c <stm32_clock_init+0x15c>)
 80098ea:	4a21      	ldr	r2, [pc, #132]	; (8009970 <stm32_clock_init+0x170>)
 80098ec:	609a      	str	r2, [r3, #8]
  /* Special case, in those devices STM32_CK48MSEL is located in the
     DCKCFGR register.*/
    dckcfgr |= STM32_CK48MSEL;
#endif
#if !defined(STM32F413xx)
    RCC->DCKCFGR = dckcfgr |
 80098ee:	4a21      	ldr	r2, [pc, #132]	; (8009974 <stm32_clock_init+0x174>)
 80098f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
#endif

#if STM32_HAS_RCC_DCKCFGR2
  /* DCKCFGR2 register initialization.*/
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 80098f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80098f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80098fc:	4b1e      	ldr	r3, [pc, #120]	; (8009978 <stm32_clock_init+0x178>)
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	4b1e      	ldr	r3, [pc, #120]	; (800997c <stm32_clock_init+0x17c>)
 8009902:	429a      	cmp	r2, r3
 8009904:	d01f      	beq.n	8009946 <stm32_clock_init+0x146>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8009906:	4b1e      	ldr	r3, [pc, #120]	; (8009980 <stm32_clock_init+0x180>)
 8009908:	f240 7205 	movw	r2, #1797	; 0x705
 800990c:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 800990e:	4b1c      	ldr	r3, [pc, #112]	; (8009980 <stm32_clock_init+0x180>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 030f 	and.w	r3, r3, #15
 8009916:	2b05      	cmp	r3, #5
 8009918:	d1f9      	bne.n	800990e <stm32_clock_init+0x10e>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800991a:	4a10      	ldr	r2, [pc, #64]	; (800995c <stm32_clock_init+0x15c>)
 800991c:	6893      	ldr	r3, [r2, #8]
 800991e:	f043 0302 	orr.w	r3, r3, #2
 8009922:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8009924:	4b0d      	ldr	r3, [pc, #52]	; (800995c <stm32_clock_init+0x15c>)
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f003 030c 	and.w	r3, r3, #12
 800992c:	2b08      	cmp	r3, #8
 800992e:	d1f9      	bne.n	8009924 <stm32_clock_init+0x124>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8009930:	4b0a      	ldr	r3, [pc, #40]	; (800995c <stm32_clock_init+0x15c>)
 8009932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009934:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009938:	645a      	str	r2, [r3, #68]	; 0x44
 800993a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800993c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009940:	665a      	str	r2, [r3, #100]	; 0x64
 8009942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8009944:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8009946:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <stm32_clock_init+0x184>)
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	4b0f      	ldr	r3, [pc, #60]	; (8009988 <stm32_clock_init+0x188>)
 800994c:	429a      	cmp	r2, r3
 800994e:	d1da      	bne.n	8009906 <stm32_clock_init+0x106>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8009950:	4b0b      	ldr	r3, [pc, #44]	; (8009980 <stm32_clock_init+0x180>)
 8009952:	f240 1205 	movw	r2, #261	; 0x105
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	e7d9      	b.n	800990e <stm32_clock_init+0x10e>
 800995a:	bf00      	nop
 800995c:	40023800 	.word	0x40023800
 8009960:	40007000 	.word	0x40007000
 8009964:	07405a08 	.word	0x07405a08
 8009968:	44413004 	.word	0x44413004
 800996c:	44033004 	.word	0x44033004
 8009970:	40089400 	.word	0x40089400
 8009974:	00800003 	.word	0x00800003
 8009978:	e0042000 	.word	0xe0042000
 800997c:	20006411 	.word	0x20006411
 8009980:	40023c00 	.word	0x40023c00
 8009984:	e000ed00 	.word	0xe000ed00
 8009988:	410fc241 	.word	0x410fc241
 800998c:	00000000 	.word	0x00000000

08009990 <hal_lld_backup_domain_init>:
  PWR->CR |= PWR_CR_DBP;
 8009990:	4a0b      	ldr	r2, [pc, #44]	; (80099c0 <hal_lld_backup_domain_init+0x30>)
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009998:	6013      	str	r3, [r2, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800999a:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <hal_lld_backup_domain_init+0x34>)
 800999c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099a6:	d005      	beq.n	80099b4 <hal_lld_backup_domain_init+0x24>
    RCC->BDCR = RCC_BDCR_BDRST;
 80099a8:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <hal_lld_backup_domain_init+0x34>)
 80099aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80099ae:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80099b0:	2200      	movs	r2, #0
 80099b2:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 80099b4:	4a02      	ldr	r2, [pc, #8]	; (80099c0 <hal_lld_backup_domain_init+0x30>)
 80099b6:	6853      	ldr	r3, [r2, #4]
 80099b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099bc:	6053      	str	r3, [r2, #4]
}
 80099be:	4770      	bx	lr
 80099c0:	40007000 	.word	0x40007000
 80099c4:	40023800 	.word	0x40023800
	...

080099d0 <nvicEnableVector>:

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80099d0:	0109      	lsls	r1, r1, #4
 80099d2:	b2c9      	uxtb	r1, r1
 80099d4:	4a07      	ldr	r2, [pc, #28]	; (80099f4 <nvicEnableVector+0x24>)
 80099d6:	1813      	adds	r3, r2, r0
 80099d8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80099dc:	f000 011f 	and.w	r1, r0, #31
 80099e0:	0940      	lsrs	r0, r0, #5
 80099e2:	2301      	movs	r3, #1
 80099e4:	408b      	lsls	r3, r1
 80099e6:	f100 0160 	add.w	r1, r0, #96	; 0x60
 80099ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80099ee:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 80099f2:	4770      	bx	lr
 80099f4:	e000e100 	.word	0xe000e100
	...

08009a00 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4604      	mov	r4, r0

  if (config == NULL)
 8009a04:	460d      	mov	r5, r1
 8009a06:	b139      	cbz	r1, 8009a18 <sd_lld_start+0x18>
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8009a08:	7a23      	ldrb	r3, [r4, #8]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d006      	beq.n	8009a1c <sd_lld_start+0x1c>
      rccEnableUART8(true);
      nvicEnableVector(STM32_UART8_NUMBER, STM32_SERIAL_UART8_PRIORITY);
    }
#endif
  }
  usart_init(sdp, config);
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4620      	mov	r0, r4
 8009a12:	f7ff fe3d 	bl	8009690 <usart_init>
}
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
    config = &default_config;
 8009a18:	4d09      	ldr	r5, [pc, #36]	; (8009a40 <sd_lld_start+0x40>)
 8009a1a:	e7f5      	b.n	8009a08 <sd_lld_start+0x8>
    if (&SD2 == sdp) {
 8009a1c:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <sd_lld_start+0x44>)
 8009a1e:	429c      	cmp	r4, r3
 8009a20:	d1f5      	bne.n	8009a0e <sd_lld_start+0xe>
      rccEnableUSART2(true);
 8009a22:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <sd_lld_start+0x48>)
 8009a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a26:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009a2a:	641a      	str	r2, [r3, #64]	; 0x40
 8009a2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009a32:	661a      	str	r2, [r3, #96]	; 0x60
 8009a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 8009a36:	210c      	movs	r1, #12
 8009a38:	2026      	movs	r0, #38	; 0x26
 8009a3a:	f7ff ffc9 	bl	80099d0 <nvicEnableVector>
 8009a3e:	e7e6      	b.n	8009a0e <sd_lld_start+0xe>
 8009a40:	0800e378 	.word	0x0800e378
 8009a44:	200018e8 	.word	0x200018e8
 8009a48:	40023800 	.word	0x40023800
 8009a4c:	00000000 	.word	0x00000000

08009a50 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 8009a50:	b508      	push	{r3, lr}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8009a52:	4b12      	ldr	r3, [pc, #72]	; (8009a9c <st_lld_init+0x4c>)
 8009a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a56:	f042 0201 	orr.w	r2, r2, #1
 8009a5a:	641a      	str	r2, [r3, #64]	; 0x40
 8009a5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a5e:	f042 0201 	orr.w	r2, r2, #1
 8009a62:	661a      	str	r2, [r3, #96]	; 0x60
 8009a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8009a66:	4a0e      	ldr	r2, [pc, #56]	; (8009aa0 <st_lld_init+0x50>)
 8009a68:	6893      	ldr	r3, [r2, #8]
 8009a6a:	f043 0301 	orr.w	r3, r3, #1
 8009a6e:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8009a70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a74:	f242 3227 	movw	r2, #8999	; 0x2327
 8009a78:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8009a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8009a80:	2200      	movs	r2, #0
 8009a82:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8009a84:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8009a86:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8009a88:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8009a8e:	601a      	str	r2, [r3, #0]

#if !defined(STM32_SYSTICK_SUPPRESS_ISR)
  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8009a90:	2108      	movs	r1, #8
 8009a92:	201c      	movs	r0, #28
 8009a94:	f7ff ff9c 	bl	80099d0 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8009a98:	bd08      	pop	{r3, pc}
 8009a9a:	bf00      	nop
 8009a9c:	40023800 	.word	0x40023800
 8009aa0:	e0042000 	.word	0xe0042000
	...

08009ab0 <dmaStreamAllocI>:
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
                                          uint32_t priority,
                                          stm32_dmaisr_t func,
                                          void *param) {
 8009ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t i, startid, endid;

  osalDbgCheckClassI();

  if (id < STM32_DMA_STREAMS) {
 8009ab2:	280f      	cmp	r0, #15
 8009ab4:	d805      	bhi.n	8009ac2 <dmaStreamAllocI+0x12>
  else {
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	42a0      	cmp	r0, r4
 8009aba:	d204      	bcs.n	8009ac6 <dmaStreamAllocI+0x16>

      return dmastp;
    }
  }

  return NULL;
 8009abc:	2700      	movs	r7, #0
}
 8009abe:	4638      	mov	r0, r7
 8009ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8009ac2:	2700      	movs	r7, #0
 8009ac4:	e7fb      	b.n	8009abe <dmaStreamAllocI+0xe>
    uint32_t mask = (1U << i);
 8009ac6:	2501      	movs	r5, #1
 8009ac8:	40a5      	lsls	r5, r4
    if ((dma.allocated_mask & mask) == 0U) {
 8009aca:	4e28      	ldr	r6, [pc, #160]	; (8009b6c <dmaStreamAllocI+0xbc>)
 8009acc:	6836      	ldr	r6, [r6, #0]
 8009ace:	422e      	tst	r6, r5
 8009ad0:	d001      	beq.n	8009ad6 <dmaStreamAllocI+0x26>
  for (i = startid; i <= endid; i++) {
 8009ad2:	3401      	adds	r4, #1
 8009ad4:	e7f0      	b.n	8009ab8 <dmaStreamAllocI+0x8>
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8009ad6:	4826      	ldr	r0, [pc, #152]	; (8009b70 <dmaStreamAllocI+0xc0>)
 8009ad8:	270c      	movs	r7, #12
 8009ada:	fb07 0704 	mla	r7, r7, r4, r0
      dma.streams[i].func  = func;
 8009ade:	4823      	ldr	r0, [pc, #140]	; (8009b6c <dmaStreamAllocI+0xbc>)
 8009ae0:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8009ae4:	f8cc 2004 	str.w	r2, [ip, #4]
      dma.streams[i].param = param;
 8009ae8:	f8cc 3008 	str.w	r3, [ip, #8]
      dma.allocated_mask  |= mask;
 8009aec:	432e      	orrs	r6, r5
 8009aee:	6006      	str	r6, [r0, #0]
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8009af0:	f015 0fff 	tst.w	r5, #255	; 0xff
 8009af4:	d009      	beq.n	8009b0a <dmaStreamAllocI+0x5a>
        rccEnableDMA1(true);
 8009af6:	4b1f      	ldr	r3, [pc, #124]	; (8009b74 <dmaStreamAllocI+0xc4>)
 8009af8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009afa:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8009afe:	6318      	str	r0, [r3, #48]	; 0x30
 8009b00:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009b02:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8009b06:	6518      	str	r0, [r3, #80]	; 0x50
 8009b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 8009b0a:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 8009b0e:	d009      	beq.n	8009b24 <dmaStreamAllocI+0x74>
        rccEnableDMA2(true);
 8009b10:	4b18      	ldr	r3, [pc, #96]	; (8009b74 <dmaStreamAllocI+0xc4>)
 8009b12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b14:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8009b18:	6318      	str	r0, [r3, #48]	; 0x30
 8009b1a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009b1c:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8009b20:	6518      	str	r0, [r3, #80]	; 0x50
 8009b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      dmaStreamDisable(dmastp);
 8009b24:	230c      	movs	r3, #12
 8009b26:	fb03 f304 	mul.w	r3, r3, r4
 8009b2a:	4811      	ldr	r0, [pc, #68]	; (8009b70 <dmaStreamAllocI+0xc0>)
 8009b2c:	58c0      	ldr	r0, [r0, r3]
 8009b2e:	6803      	ldr	r3, [r0, #0]
 8009b30:	f023 031f 	bic.w	r3, r3, #31
 8009b34:	6003      	str	r3, [r0, #0]
 8009b36:	6803      	ldr	r3, [r0, #0]
 8009b38:	f013 0f01 	tst.w	r3, #1
 8009b3c:	d1fb      	bne.n	8009b36 <dmaStreamAllocI+0x86>
 8009b3e:	4d0c      	ldr	r5, [pc, #48]	; (8009b70 <dmaStreamAllocI+0xc0>)
 8009b40:	230c      	movs	r3, #12
 8009b42:	fb03 5304 	mla	r3, r3, r4, r5
 8009b46:	7a5e      	ldrb	r6, [r3, #9]
 8009b48:	685d      	ldr	r5, [r3, #4]
 8009b4a:	233d      	movs	r3, #61	; 0x3d
 8009b4c:	40b3      	lsls	r3, r6
 8009b4e:	602b      	str	r3, [r5, #0]
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	6003      	str	r3, [r0, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8009b54:	2321      	movs	r3, #33	; 0x21
 8009b56:	6143      	str	r3, [r0, #20]
      if (func != NULL) {
 8009b58:	2a00      	cmp	r2, #0
 8009b5a:	d0b0      	beq.n	8009abe <dmaStreamAllocI+0xe>
        nvicEnableVector(dmastp->vector, priority);
 8009b5c:	4a04      	ldr	r2, [pc, #16]	; (8009b70 <dmaStreamAllocI+0xc0>)
 8009b5e:	230c      	movs	r3, #12
 8009b60:	fb03 2404 	mla	r4, r3, r4, r2
 8009b64:	7ae0      	ldrb	r0, [r4, #11]
 8009b66:	f7ff ff33 	bl	80099d0 <nvicEnableVector>
      return dmastp;
 8009b6a:	e7a8      	b.n	8009abe <dmaStreamAllocI+0xe>
 8009b6c:	20002b60 	.word	0x20002b60
 8009b70:	0800e2a0 	.word	0x0800e2a0
 8009b74:	40023800 	.word	0x40023800
	...

08009b80 <spi_lld_start>:
void spi_lld_start(SPIDriver *spip) {
 8009b80:	b510      	push	{r4, lr}
 8009b82:	4604      	mov	r4, r0
  if (spip->state == SPI_STOP) {
 8009b84:	7803      	ldrb	r3, [r0, #0]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d02e      	beq.n	8009be8 <spi_lld_start+0x68>
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8009b8a:	6863      	ldr	r3, [r4, #4]
 8009b8c:	8a1a      	ldrh	r2, [r3, #16]
 8009b8e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009b92:	d16c      	bne.n	8009c6e <spi_lld_start+0xee>
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009b94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8009b96:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009b9a:	62a2      	str	r2, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009b9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8009b9e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009ba2:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (spip->config->circular) {
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d06e      	beq.n	8009c88 <spi_lld_start+0x108>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8009baa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009bac:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 8009bb0:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8009bb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009bb4:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 8009bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8009bba:	69e2      	ldr	r2, [r4, #28]
 8009bbc:	6813      	ldr	r3, [r2, #0]
 8009bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc2:	6013      	str	r3, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8009bc4:	6863      	ldr	r3, [r4, #4]
 8009bc6:	8a1b      	ldrh	r3, [r3, #16]
 8009bc8:	69e2      	ldr	r2, [r4, #28]
 8009bca:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8009bce:	6013      	str	r3, [r2, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8009bd0:	6863      	ldr	r3, [r4, #4]
 8009bd2:	8a5b      	ldrh	r3, [r3, #18]
 8009bd4:	69e2      	ldr	r2, [r4, #28]
 8009bd6:	f043 0307 	orr.w	r3, r3, #7
 8009bda:	6053      	str	r3, [r2, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8009bdc:	69e2      	ldr	r2, [r4, #28]
 8009bde:	6813      	ldr	r3, [r2, #0]
 8009be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009be4:	6013      	str	r3, [r2, #0]
}
 8009be6:	bd10      	pop	{r4, pc}
    if (&SPID1 == spip) {
 8009be8:	4b2c      	ldr	r3, [pc, #176]	; (8009c9c <spi_lld_start+0x11c>)
 8009bea:	4298      	cmp	r0, r3
 8009bec:	d00d      	beq.n	8009c0a <spi_lld_start+0x8a>
    if (&SPID2 == spip) {
 8009bee:	4b2c      	ldr	r3, [pc, #176]	; (8009ca0 <spi_lld_start+0x120>)
 8009bf0:	429c      	cmp	r4, r3
 8009bf2:	d023      	beq.n	8009c3c <spi_lld_start+0xbc>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8009bf4:	6a23      	ldr	r3, [r4, #32]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	69e3      	ldr	r3, [r4, #28]
 8009bfa:	330c      	adds	r3, #12
 8009bfc:	6093      	str	r3, [r2, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8009bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	69e3      	ldr	r3, [r4, #28]
 8009c04:	330c      	adds	r3, #12
 8009c06:	6093      	str	r3, [r2, #8]
 8009c08:	e7bf      	b.n	8009b8a <spi_lld_start+0xa>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI1_RX_DMA_STREAM,
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	4a25      	ldr	r2, [pc, #148]	; (8009ca4 <spi_lld_start+0x124>)
 8009c0e:	210a      	movs	r1, #10
 8009c10:	2008      	movs	r0, #8
 8009c12:	f7ff ff4d 	bl	8009ab0 <dmaStreamAllocI>
 8009c16:	6220      	str	r0, [r4, #32]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 8009c18:	4623      	mov	r3, r4
 8009c1a:	4a23      	ldr	r2, [pc, #140]	; (8009ca8 <spi_lld_start+0x128>)
 8009c1c:	210a      	movs	r1, #10
 8009c1e:	200b      	movs	r0, #11
 8009c20:	f7ff ff46 	bl	8009ab0 <dmaStreamAllocI>
 8009c24:	6260      	str	r0, [r4, #36]	; 0x24
      rccEnableSPI1(true);
 8009c26:	4b21      	ldr	r3, [pc, #132]	; (8009cac <spi_lld_start+0x12c>)
 8009c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c2e:	645a      	str	r2, [r3, #68]	; 0x44
 8009c30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c36:	665a      	str	r2, [r3, #100]	; 0x64
 8009c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c3a:	e7d8      	b.n	8009bee <spi_lld_start+0x6e>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI2_RX_DMA_STREAM,
 8009c3c:	4623      	mov	r3, r4
 8009c3e:	4a19      	ldr	r2, [pc, #100]	; (8009ca4 <spi_lld_start+0x124>)
 8009c40:	210a      	movs	r1, #10
 8009c42:	2003      	movs	r0, #3
 8009c44:	f7ff ff34 	bl	8009ab0 <dmaStreamAllocI>
 8009c48:	6220      	str	r0, [r4, #32]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI2_TX_DMA_STREAM,
 8009c4a:	4623      	mov	r3, r4
 8009c4c:	4a16      	ldr	r2, [pc, #88]	; (8009ca8 <spi_lld_start+0x128>)
 8009c4e:	210a      	movs	r1, #10
 8009c50:	2004      	movs	r0, #4
 8009c52:	f7ff ff2d 	bl	8009ab0 <dmaStreamAllocI>
 8009c56:	6260      	str	r0, [r4, #36]	; 0x24
      rccEnableSPI2(true);
 8009c58:	4b14      	ldr	r3, [pc, #80]	; (8009cac <spi_lld_start+0x12c>)
 8009c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c60:	641a      	str	r2, [r3, #64]	; 0x40
 8009c62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c68:	661a      	str	r2, [r3, #96]	; 0x60
 8009c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c6c:	e7c2      	b.n	8009bf4 <spi_lld_start+0x74>
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009c6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009c70:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8009c74:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009c78:	62a2      	str	r2, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009c7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009c7c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8009c80:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8009c84:	62e2      	str	r2, [r4, #44]	; 0x2c
 8009c86:	e78d      	b.n	8009ba4 <spi_lld_start+0x24>
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8009c88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009c8a:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8009c8e:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8009c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c92:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8009c96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c98:	e78f      	b.n	8009bba <spi_lld_start+0x3a>
 8009c9a:	bf00      	nop
 8009c9c:	20001964 	.word	0x20001964
 8009ca0:	20001994 	.word	0x20001994
 8009ca4:	08009ed1 	.word	0x08009ed1
 8009ca8:	08009771 	.word	0x08009771
 8009cac:	40023800 	.word	0x40023800

08009cb0 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8009cb0:	b508      	push	{r3, lr}

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8009cb2:	2106      	movs	r1, #6
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	f7ff fe8b 	bl	80099d0 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 8009cba:	2106      	movs	r1, #6
 8009cbc:	2007      	movs	r0, #7
 8009cbe:	f7ff fe87 	bl	80099d0 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8009cc2:	2106      	movs	r1, #6
 8009cc4:	2008      	movs	r0, #8
 8009cc6:	f7ff fe83 	bl	80099d0 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 8009cca:	2106      	movs	r1, #6
 8009ccc:	2009      	movs	r0, #9
 8009cce:	f7ff fe7f 	bl	80099d0 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8009cd2:	2106      	movs	r1, #6
 8009cd4:	200a      	movs	r0, #10
 8009cd6:	f7ff fe7b 	bl	80099d0 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 8009cda:	2106      	movs	r1, #6
 8009cdc:	2017      	movs	r0, #23
 8009cde:	f7ff fe77 	bl	80099d0 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8009ce2:	2106      	movs	r1, #6
 8009ce4:	2028      	movs	r0, #40	; 0x28
 8009ce6:	f7ff fe73 	bl	80099d0 <nvicEnableVector>
#endif
}
 8009cea:	bd08      	pop	{r3, pc}
 8009cec:	0000      	movs	r0, r0
	...

08009cf0 <hal_lld_init>:
void hal_lld_init(void) {
 8009cf0:	b508      	push	{r3, lr}
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8009cf2:	4b17      	ldr	r3, [pc, #92]	; (8009d50 <hal_lld_init+0x60>)
 8009cf4:	691a      	ldr	r2, [r3, #16]
 8009cf6:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8009cfa:	611a      	str	r2, [r3, #16]
 8009cfc:	691a      	ldr	r2, [r3, #16]
 8009cfe:	b2d2      	uxtb	r2, r2
 8009d00:	611a      	str	r2, [r3, #16]
 8009d02:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8009d04:	695a      	ldr	r2, [r3, #20]
 8009d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d0a:	6158      	str	r0, [r3, #20]
 8009d0c:	695a      	ldr	r2, [r3, #20]
 8009d0e:	2100      	movs	r1, #0
 8009d10:	6159      	str	r1, [r3, #20]
 8009d12:	695a      	ldr	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8009d14:	6a1a      	ldr	r2, [r3, #32]
 8009d16:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8009d1a:	621a      	str	r2, [r3, #32]
 8009d1c:	6a1a      	ldr	r2, [r3, #32]
 8009d1e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8009d22:	621a      	str	r2, [r3, #32]
 8009d24:	6a1a      	ldr	r2, [r3, #32]
  rccResetAPB2(~0);
 8009d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d28:	6258      	str	r0, [r3, #36]	; 0x24
 8009d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d2c:	6259      	str	r1, [r3, #36]	; 0x24
 8009d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(true);
 8009d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009d36:	641a      	str	r2, [r3, #64]	; 0x40
 8009d38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009d3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009d3e:	661a      	str	r2, [r3, #96]	; 0x60
 8009d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hal_lld_backup_domain_init();
 8009d42:	f7ff fe25 	bl	8009990 <hal_lld_backup_domain_init>
  dmaInit();
 8009d46:	f7ff fd33 	bl	80097b0 <dmaInit>
  irqInit();
 8009d4a:	f7ff ffb1 	bl	8009cb0 <irqInit>
}
 8009d4e:	bd08      	pop	{r3, pc}
 8009d50:	40023800 	.word	0x40023800
	...

08009d60 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8009d60:	2000      	movs	r0, #0
 8009d62:	4770      	bx	lr
	...

08009d70 <oqObjectInit>:
  tqp->next = (thread_t *)tqp;
 8009d70:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 8009d72:	6040      	str	r0, [r0, #4]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8009d74:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
 8009d76:	60c1      	str	r1, [r0, #12]
  oqp->q_rdptr   = bp;
 8009d78:	6181      	str	r1, [r0, #24]
  oqp->q_wrptr   = bp;
 8009d7a:	6141      	str	r1, [r0, #20]
  oqp->q_top     = bp + size;
 8009d7c:	4411      	add	r1, r2
 8009d7e:	6101      	str	r1, [r0, #16]
  oqp->q_notify  = onfy;
 8009d80:	61c3      	str	r3, [r0, #28]
  oqp->q_link    = link;
 8009d82:	9b00      	ldr	r3, [sp, #0]
 8009d84:	6203      	str	r3, [r0, #32]
}
 8009d86:	4770      	bx	lr
	...

08009d90 <iqObjectInit>:
                  qnotify_t infy, void *link) {
 8009d90:	b410      	push	{r4}
  tqp->next = (thread_t *)tqp;
 8009d92:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 8009d94:	6040      	str	r0, [r0, #4]
  iqp->q_counter = 0;
 8009d96:	2400      	movs	r4, #0
 8009d98:	6084      	str	r4, [r0, #8]
  iqp->q_buffer  = bp;
 8009d9a:	60c1      	str	r1, [r0, #12]
  iqp->q_rdptr   = bp;
 8009d9c:	6181      	str	r1, [r0, #24]
  iqp->q_wrptr   = bp;
 8009d9e:	6141      	str	r1, [r0, #20]
  iqp->q_top     = bp + size;
 8009da0:	4411      	add	r1, r2
 8009da2:	6101      	str	r1, [r0, #16]
  iqp->q_notify  = infy;
 8009da4:	61c3      	str	r3, [r0, #28]
  iqp->q_link    = link;
 8009da6:	9b01      	ldr	r3, [sp, #4]
 8009da8:	6203      	str	r3, [r0, #32]
}
 8009daa:	bc10      	pop	{r4}
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop

08009db0 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8009db0:	b530      	push	{r4, r5, lr}
 8009db2:	b083      	sub	sp, #12
 8009db4:	4604      	mov	r4, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4615      	mov	r5, r2

  sdp->vmt = &vmt;
 8009dba:	4602      	mov	r2, r0
 8009dbc:	490b      	ldr	r1, [pc, #44]	; (8009dec <sdObjectInit+0x3c>)
 8009dbe:	f842 1b04 	str.w	r1, [r2], #4
  esp->next = (event_listener_t *)esp;
 8009dc2:	6042      	str	r2, [r0, #4]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	7202      	strb	r2, [r0, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8009dc8:	9000      	str	r0, [sp, #0]
 8009dca:	2210      	movs	r2, #16
 8009dcc:	f100 0154 	add.w	r1, r0, #84	; 0x54
 8009dd0:	300c      	adds	r0, #12
 8009dd2:	f7ff ffdd 	bl	8009d90 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8009dd6:	9400      	str	r4, [sp, #0]
 8009dd8:	462b      	mov	r3, r5
 8009dda:	2210      	movs	r2, #16
 8009ddc:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8009de0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8009de4:	f7ff ffc4 	bl	8009d70 <oqObjectInit>
}
 8009de8:	b003      	add	sp, #12
 8009dea:	bd30      	pop	{r4, r5, pc}
 8009dec:	0800e4fc 	.word	0x0800e4fc

08009df0 <sd_lld_init>:
void sd_lld_init(void) {
 8009df0:	b510      	push	{r4, lr}
  sdObjectInit(&SD2, NULL, notify2);
 8009df2:	4c04      	ldr	r4, [pc, #16]	; (8009e04 <sd_lld_init+0x14>)
 8009df4:	4a04      	ldr	r2, [pc, #16]	; (8009e08 <sd_lld_init+0x18>)
 8009df6:	2100      	movs	r1, #0
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f7ff ffd9 	bl	8009db0 <sdObjectInit>
  SD2.usart = USART2;
 8009dfe:	4b03      	ldr	r3, [pc, #12]	; (8009e0c <sd_lld_init+0x1c>)
 8009e00:	6763      	str	r3, [r4, #116]	; 0x74
}
 8009e02:	bd10      	pop	{r4, pc}
 8009e04:	200018e8 	.word	0x200018e8
 8009e08:	08009681 	.word	0x08009681
 8009e0c:	40004400 	.word	0x40004400

08009e10 <sdInit>:
void sdInit(void) {
 8009e10:	b508      	push	{r3, lr}
  sd_lld_init();
 8009e12:	f7ff ffed 	bl	8009df0 <sd_lld_init>
}
 8009e16:	bd08      	pop	{r3, pc}
	...

08009e20 <stSetAlarm>:
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8009e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e24:	6358      	str	r0, [r3, #52]	; 0x34
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
}
 8009e26:	4770      	bx	lr
	...

08009e30 <stStopAlarm>:
  STM32_ST_TIM->DIER = 0U;
 8009e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e34:	2200      	movs	r2, #0
 8009e36:	60da      	str	r2, [r3, #12]
}
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	0000      	movs	r0, r0
	...

08009e40 <stStartAlarm>:
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8009e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e44:	6358      	str	r0, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8009e46:	2200      	movs	r2, #0
 8009e48:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	60da      	str	r2, [r3, #12]
}
 8009e4e:	4770      	bx	lr

08009e50 <stInit>:
void stInit(void) {
 8009e50:	b508      	push	{r3, lr}
  st_lld_init();
 8009e52:	f7ff fdfd 	bl	8009a50 <st_lld_init>
}
 8009e56:	bd08      	pop	{r3, pc}
	...

08009e60 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8009e60:	b510      	push	{r4, lr}
  thread_t *otp = currp;
 8009e62:	4c08      	ldr	r4, [pc, #32]	; (8009e84 <chSchDoRescheduleAhead+0x24>)
 8009e64:	69a0      	ldr	r0, [r4, #24]
  thread_t *tp = tqp->next;
 8009e66:	6823      	ldr	r3, [r4, #0]
  tqp->next             = tp->queue.next;
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8009e6c:	6054      	str	r4, [r2, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8009e6e:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2020 	strb.w	r2, [r3, #32]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 8009e76:	f7ff fb53 	bl	8009520 <chSchReadyAheadI>
 8009e7a:	4601      	mov	r1, r0

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8009e7c:	69a0      	ldr	r0, [r4, #24]
 8009e7e:	f7f6 fa1f 	bl	80002c0 <_port_switch>
}
 8009e82:	bd10      	pop	{r4, pc}
 8009e84:	20001a18 	.word	0x20001a18
	...

08009e90 <set_error>:
static void set_error(SerialDriver *sdp, uint16_t sr) {
 8009e90:	b508      	push	{r3, lr}
 8009e92:	460b      	mov	r3, r1
  if (sr & USART_SR_ORE)
 8009e94:	f011 0f08 	tst.w	r1, #8
 8009e98:	d113      	bne.n	8009ec2 <set_error+0x32>
  eventflags_t sts = 0;
 8009e9a:	2100      	movs	r1, #0
  if (sr & USART_SR_PE)
 8009e9c:	f013 0f01 	tst.w	r3, #1
 8009ea0:	d001      	beq.n	8009ea6 <set_error+0x16>
    sts |= SD_PARITY_ERROR;
 8009ea2:	f041 0120 	orr.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8009ea6:	f013 0f02 	tst.w	r3, #2
 8009eaa:	d001      	beq.n	8009eb0 <set_error+0x20>
    sts |= SD_FRAMING_ERROR;
 8009eac:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8009eb0:	f013 0f04 	tst.w	r3, #4
 8009eb4:	d001      	beq.n	8009eba <set_error+0x2a>
    sts |= SD_NOISE_ERROR;
 8009eb6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8009eba:	3004      	adds	r0, #4
 8009ebc:	f7fd fda8 	bl	8007a10 <chEvtBroadcastFlagsI>
}
 8009ec0:	bd08      	pop	{r3, pc}
    sts |= SD_OVERRUN_ERROR;
 8009ec2:	2180      	movs	r1, #128	; 0x80
 8009ec4:	e7ea      	b.n	8009e9c <set_error+0xc>
 8009ec6:	bf00      	nop
	...

08009ed0 <spi_lld_serve_rx_interrupt>:
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8009ed0:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8009ed2:	f011 0f0c 	tst.w	r1, #12
 8009ed6:	d11c      	bne.n	8009f12 <spi_lld_serve_rx_interrupt+0x42>
 8009ed8:	4604      	mov	r4, r0
 8009eda:	460d      	mov	r5, r1
  if (spip->config->circular) {
 8009edc:	6843      	ldr	r3, [r0, #4]
 8009ede:	781a      	ldrb	r2, [r3, #0]
 8009ee0:	b1d2      	cbz	r2, 8009f18 <spi_lld_serve_rx_interrupt+0x48>
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8009ee2:	f011 0f10 	tst.w	r1, #16
 8009ee6:	d002      	beq.n	8009eee <spi_lld_serve_rx_interrupt+0x1e>
      _spi_isr_half_code(spip);
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	b103      	cbz	r3, 8009eee <spi_lld_serve_rx_interrupt+0x1e>
 8009eec:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8009eee:	f015 0f20 	tst.w	r5, #32
 8009ef2:	d049      	beq.n	8009f88 <spi_lld_serve_rx_interrupt+0xb8>
      _spi_isr_full_code(spip);
 8009ef4:	6863      	ldr	r3, [r4, #4]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	2a00      	cmp	r2, #0
 8009efa:	d045      	beq.n	8009f88 <spi_lld_serve_rx_interrupt+0xb8>
 8009efc:	2204      	movs	r2, #4
 8009efe:	7022      	strb	r2, [r4, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	4620      	mov	r0, r4
 8009f04:	4798      	blx	r3
 8009f06:	7823      	ldrb	r3, [r4, #0]
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d13d      	bne.n	8009f88 <spi_lld_serve_rx_interrupt+0xb8>
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	7023      	strb	r3, [r4, #0]
 8009f10:	e03a      	b.n	8009f88 <spi_lld_serve_rx_interrupt+0xb8>
  chSysHalt(reason);
 8009f12:	4821      	ldr	r0, [pc, #132]	; (8009f98 <spi_lld_serve_rx_interrupt+0xc8>)
 8009f14:	f7ff fb3c 	bl	8009590 <chSysHalt>
    dmaStreamDisable(spip->dmatx);
 8009f18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	6813      	ldr	r3, [r2, #0]
 8009f1e:	f023 031f 	bic.w	r3, r3, #31
 8009f22:	6013      	str	r3, [r2, #0]
 8009f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	6812      	ldr	r2, [r2, #0]
 8009f2a:	f012 0f01 	tst.w	r2, #1
 8009f2e:	d1f9      	bne.n	8009f24 <spi_lld_serve_rx_interrupt+0x54>
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	7a59      	ldrb	r1, [r3, #9]
 8009f34:	233d      	movs	r3, #61	; 0x3d
 8009f36:	408b      	lsls	r3, r1
 8009f38:	6013      	str	r3, [r2, #0]
    dmaStreamDisable(spip->dmarx);
 8009f3a:	6a23      	ldr	r3, [r4, #32]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	6813      	ldr	r3, [r2, #0]
 8009f40:	f023 031f 	bic.w	r3, r3, #31
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	6a23      	ldr	r3, [r4, #32]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	6812      	ldr	r2, [r2, #0]
 8009f4c:	f012 0f01 	tst.w	r2, #1
 8009f50:	d1f9      	bne.n	8009f46 <spi_lld_serve_rx_interrupt+0x76>
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	7a59      	ldrb	r1, [r3, #9]
 8009f56:	233d      	movs	r3, #61	; 0x3d
 8009f58:	408b      	lsls	r3, r1
 8009f5a:	6013      	str	r3, [r2, #0]
    _spi_isr_code(spip);
 8009f5c:	6863      	ldr	r3, [r4, #4]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	b1b2      	cbz	r2, 8009f90 <spi_lld_serve_rx_interrupt+0xc0>
 8009f62:	2204      	movs	r2, #4
 8009f64:	7022      	strb	r2, [r4, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	4620      	mov	r0, r4
 8009f6a:	4798      	blx	r3
 8009f6c:	7823      	ldrb	r3, [r4, #0]
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d00b      	beq.n	8009f8a <spi_lld_serve_rx_interrupt+0xba>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8009f72:	2320      	movs	r3, #32
 8009f74:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 8009f78:	2100      	movs	r1, #0
 8009f7a:	f104 0008 	add.w	r0, r4, #8
 8009f7e:	f7fe fe27 	bl	8008bd0 <chThdResumeI>
 8009f82:	2300      	movs	r3, #0
 8009f84:	f383 8811 	msr	BASEPRI, r3
}
 8009f88:	bd38      	pop	{r3, r4, r5, pc}
    _spi_isr_code(spip);
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	7023      	strb	r3, [r4, #0]
 8009f8e:	e7f0      	b.n	8009f72 <spi_lld_serve_rx_interrupt+0xa2>
 8009f90:	2302      	movs	r3, #2
 8009f92:	7023      	strb	r3, [r4, #0]
 8009f94:	e7ed      	b.n	8009f72 <spi_lld_serve_rx_interrupt+0xa2>
 8009f96:	bf00      	nop
 8009f98:	0800e28c 	.word	0x0800e28c
 8009f9c:	00000000 	.word	0x00000000

08009fa0 <spiObjectInit>:
 *
 * @param[out] spip     pointer to the @p SPIDriver object
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {
 8009fa0:	b508      	push	{r3, lr}

  spip->state = SPI_STOP;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	7003      	strb	r3, [r0, #0]
  spip->config = NULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	6043      	str	r3, [r0, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8009faa:	6083      	str	r3, [r0, #8]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8009fac:	300c      	adds	r0, #12
 8009fae:	f7fd fe4f 	bl	8007c50 <chMtxObjectInit>
  osalMutexObjectInit(&spip->mutex);
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 8009fb2:	bd08      	pop	{r3, pc}
	...

08009fc0 <spi_lld_init>:
void spi_lld_init(void) {
 8009fc0:	b538      	push	{r3, r4, r5, lr}
  spiObjectInit(&SPID1);
 8009fc2:	4c0d      	ldr	r4, [pc, #52]	; (8009ff8 <spi_lld_init+0x38>)
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f7ff ffeb 	bl	8009fa0 <spiObjectInit>
  SPID1.spi       = SPI1;
 8009fca:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <spi_lld_init+0x3c>)
 8009fcc:	61e3      	str	r3, [r4, #28]
  SPID1.dmarx     = NULL;
 8009fce:	2500      	movs	r5, #0
 8009fd0:	6225      	str	r5, [r4, #32]
  SPID1.dmatx     = NULL;
 8009fd2:	6265      	str	r5, [r4, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8009fd4:	4b0a      	ldr	r3, [pc, #40]	; (800a000 <spi_lld_init+0x40>)
 8009fd6:	62a3      	str	r3, [r4, #40]	; 0x28
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8009fd8:	3330      	adds	r3, #48	; 0x30
 8009fda:	62e3      	str	r3, [r4, #44]	; 0x2c
  spiObjectInit(&SPID2);
 8009fdc:	4c09      	ldr	r4, [pc, #36]	; (800a004 <spi_lld_init+0x44>)
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f7ff ffde 	bl	8009fa0 <spiObjectInit>
  SPID2.spi       = SPI2;
 8009fe4:	4b08      	ldr	r3, [pc, #32]	; (800a008 <spi_lld_init+0x48>)
 8009fe6:	61e3      	str	r3, [r4, #28]
  SPID2.dmarx     = NULL;
 8009fe8:	6225      	str	r5, [r4, #32]
  SPID2.dmatx     = NULL;
 8009fea:	6265      	str	r5, [r4, #36]	; 0x24
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8009fec:	4b07      	ldr	r3, [pc, #28]	; (800a00c <spi_lld_init+0x4c>)
 8009fee:	62a3      	str	r3, [r4, #40]	; 0x28
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8009ff0:	3330      	adds	r3, #48	; 0x30
 8009ff2:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8009ff4:	bd38      	pop	{r3, r4, r5, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20001964 	.word	0x20001964
 8009ffc:	40013000 	.word	0x40013000
 800a000:	06010016 	.word	0x06010016
 800a004:	20001994 	.word	0x20001994
 800a008:	40003800 	.word	0x40003800
 800a00c:	00010016 	.word	0x00010016

0800a010 <spiInit>:
void spiInit(void) {
 800a010:	b508      	push	{r3, lr}
  spi_lld_init();
 800a012:	f7ff ffd5 	bl	8009fc0 <spi_lld_init>
}
 800a016:	bd08      	pop	{r3, pc}
	...

0800a020 <palWaitLineTimeoutS>:
 *                      waiting for an edge.
 *
 * @sclass
 */
msg_t palWaitLineTimeoutS(ioline_t line,
                          sysinterval_t timeout) {
 800a020:	b508      	push	{r3, lr}

  palevent_t *pep = pal_lld_get_line_event(line);
 800a022:	f000 000f 	and.w	r0, r0, #15
  return chThdEnqueueTimeoutS(tqp, timeout);
 800a026:	4b03      	ldr	r3, [pc, #12]	; (800a034 <palWaitLineTimeoutS+0x14>)
 800a028:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a02c:	f7fe f8d0 	bl	80081d0 <chThdEnqueueTimeoutS>
  return osalThreadEnqueueTimeoutS(&pep->threads, timeout);
}
 800a030:	bd08      	pop	{r3, pc}
 800a032:	bf00      	nop
 800a034:	20002a08 	.word	0x20002a08
	...

0800a040 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 800a040:	b570      	push	{r4, r5, r6, lr}
 800a042:	4604      	mov	r4, r0
 800a044:	460e      	mov	r6, r1
 800a046:	4615      	mov	r5, r2
 800a048:	2320      	movs	r3, #32
 800a04a:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	b94b      	cbnz	r3, 800a066 <oqPutTimeout+0x26>
 800a052:	4629      	mov	r1, r5
 800a054:	4620      	mov	r0, r4
 800a056:	f7fe f8bb 	bl	80081d0 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 800a05a:	2800      	cmp	r0, #0
 800a05c:	daf7      	bge.n	800a04e <oqPutTimeout+0xe>
 800a05e:	2300      	movs	r3, #0
 800a060:	f383 8811 	msr	BASEPRI, r3
      osalSysUnlock();
      return msg;
 800a064:	e013      	b.n	800a08e <oqPutTimeout+0x4e>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 800a066:	68a3      	ldr	r3, [r4, #8]
 800a068:	3b01      	subs	r3, #1
 800a06a:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800a06c:	6963      	ldr	r3, [r4, #20]
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	6162      	str	r2, [r4, #20]
 800a072:	701e      	strb	r6, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800a074:	6962      	ldr	r2, [r4, #20]
 800a076:	6923      	ldr	r3, [r4, #16]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d301      	bcc.n	800a080 <oqPutTimeout+0x40>
    oqp->q_wrptr = oqp->q_buffer;
 800a07c:	68e3      	ldr	r3, [r4, #12]
 800a07e:	6163      	str	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 800a080:	69e3      	ldr	r3, [r4, #28]
 800a082:	b10b      	cbz	r3, 800a088 <oqPutTimeout+0x48>
    oqp->q_notify(oqp);
 800a084:	4620      	mov	r0, r4
 800a086:	4798      	blx	r3
 800a088:	2000      	movs	r0, #0
 800a08a:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 800a08e:	bd70      	pop	{r4, r5, r6, pc}

0800a090 <_putt>:
static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 800a090:	b508      	push	{r3, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 800a092:	3030      	adds	r0, #48	; 0x30
 800a094:	f7ff ffd4 	bl	800a040 <oqPutTimeout>
}
 800a098:	bd08      	pop	{r3, pc}
 800a09a:	bf00      	nop
 800a09c:	0000      	movs	r0, r0
	...

0800a0a0 <_put>:
static msg_t _put(void *ip, uint8_t b) {
 800a0a0:	b508      	push	{r3, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 800a0a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0a6:	3030      	adds	r0, #48	; 0x30
 800a0a8:	f7ff ffca 	bl	800a040 <oqPutTimeout>
}
 800a0ac:	bd08      	pop	{r3, pc}
 800a0ae:	bf00      	nop

0800a0b0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	2320      	movs	r3, #32
 800a0b8:	f383 8811 	msr	BASEPRI, r3
  while (iqIsEmptyI(iqp)) {
 800a0bc:	68ab      	ldr	r3, [r5, #8]
 800a0be:	b94b      	cbnz	r3, 800a0d4 <iqGetTimeout+0x24>
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	f7fe f884 	bl	80081d0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	daf7      	bge.n	800a0bc <iqGetTimeout+0xc>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f383 8811 	msr	BASEPRI, r3
      return msg;
 800a0d2:	e013      	b.n	800a0fc <iqGetTimeout+0x4c>
  iqp->q_counter--;
 800a0d4:	68ab      	ldr	r3, [r5, #8]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 800a0da:	69aa      	ldr	r2, [r5, #24]
 800a0dc:	1c53      	adds	r3, r2, #1
 800a0de:	61ab      	str	r3, [r5, #24]
 800a0e0:	7814      	ldrb	r4, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 800a0e2:	692a      	ldr	r2, [r5, #16]
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d301      	bcc.n	800a0ec <iqGetTimeout+0x3c>
    iqp->q_rdptr = iqp->q_buffer;
 800a0e8:	68eb      	ldr	r3, [r5, #12]
 800a0ea:	61ab      	str	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 800a0ec:	69eb      	ldr	r3, [r5, #28]
 800a0ee:	b10b      	cbz	r3, 800a0f4 <iqGetTimeout+0x44>
    iqp->q_notify(iqp);
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	4798      	blx	r3
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 800a0fa:	4620      	mov	r0, r4
}
 800a0fc:	bd38      	pop	{r3, r4, r5, pc}
 800a0fe:	bf00      	nop

0800a100 <_gett>:
static msg_t _gett(void *ip, sysinterval_t timeout) {
 800a100:	b508      	push	{r3, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 800a102:	300c      	adds	r0, #12
 800a104:	f7ff ffd4 	bl	800a0b0 <iqGetTimeout>
}
 800a108:	bd08      	pop	{r3, pc}
 800a10a:	bf00      	nop
 800a10c:	0000      	movs	r0, r0
	...

0800a110 <_get>:
static msg_t _get(void *ip) {
 800a110:	b508      	push	{r3, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 800a112:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a116:	300c      	adds	r0, #12
 800a118:	f7ff ffca 	bl	800a0b0 <iqGetTimeout>
}
 800a11c:	bd08      	pop	{r3, pc}
 800a11e:	bf00      	nop

0800a120 <oqGetI>:
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 800a120:	6983      	ldr	r3, [r0, #24]
 800a122:	6942      	ldr	r2, [r0, #20]
 800a124:	429a      	cmp	r2, r3
 800a126:	d012      	beq.n	800a14e <oqGetI+0x2e>
 800a128:	2200      	movs	r2, #0
 800a12a:	b9aa      	cbnz	r2, 800a158 <oqGetI+0x38>
msg_t oqGetI(output_queue_t *oqp) {
 800a12c:	b510      	push	{r4, lr}
    uint8_t b;

    oqp->q_counter++;
 800a12e:	6882      	ldr	r2, [r0, #8]
 800a130:	3201      	adds	r2, #1
 800a132:	6082      	str	r2, [r0, #8]
    b = *oqp->q_rdptr++;
 800a134:	1c5a      	adds	r2, r3, #1
 800a136:	6182      	str	r2, [r0, #24]
 800a138:	781c      	ldrb	r4, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800a13a:	6903      	ldr	r3, [r0, #16]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d301      	bcc.n	800a144 <oqGetI+0x24>
      oqp->q_rdptr = oqp->q_buffer;
 800a140:	68c3      	ldr	r3, [r0, #12]
 800a142:	6183      	str	r3, [r0, #24]
  chThdDequeueNextI(tqp, msg);
 800a144:	2100      	movs	r1, #0
 800a146:	f7fd ffc3 	bl	80080d0 <chThdDequeueNextI>
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);

    return (msg_t)b;
 800a14a:	4620      	mov	r0, r4
  }

  return MSG_TIMEOUT;
}
 800a14c:	bd10      	pop	{r4, pc}
  if (!oqIsEmptyI(oqp)) {
 800a14e:	6882      	ldr	r2, [r0, #8]
 800a150:	2a00      	cmp	r2, #0
 800a152:	d0ea      	beq.n	800a12a <oqGetI+0xa>
 800a154:	2201      	movs	r2, #1
 800a156:	e7e8      	b.n	800a12a <oqGetI+0xa>
  return MSG_TIMEOUT;
 800a158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop

0800a160 <iqPutI>:
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 800a160:	b508      	push	{r3, lr}
  if (!iqIsFullI(iqp)) {
 800a162:	6943      	ldr	r3, [r0, #20]
 800a164:	6982      	ldr	r2, [r0, #24]
 800a166:	4293      	cmp	r3, r2
 800a168:	d012      	beq.n	800a190 <iqPutI+0x30>
 800a16a:	2200      	movs	r2, #0
 800a16c:	b9aa      	cbnz	r2, 800a19a <iqPutI+0x3a>
    iqp->q_counter++;
 800a16e:	6882      	ldr	r2, [r0, #8]
 800a170:	3201      	adds	r2, #1
 800a172:	6082      	str	r2, [r0, #8]
    *iqp->q_wrptr++ = b;
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	6142      	str	r2, [r0, #20]
 800a178:	7019      	strb	r1, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 800a17a:	6942      	ldr	r2, [r0, #20]
 800a17c:	6903      	ldr	r3, [r0, #16]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d301      	bcc.n	800a186 <iqPutI+0x26>
      iqp->q_wrptr = iqp->q_buffer;
 800a182:	68c3      	ldr	r3, [r0, #12]
 800a184:	6143      	str	r3, [r0, #20]
 800a186:	2100      	movs	r1, #0
 800a188:	f7fd ffa2 	bl	80080d0 <chThdDequeueNextI>
    return MSG_OK;
 800a18c:	2000      	movs	r0, #0
}
 800a18e:	bd08      	pop	{r3, pc}
  if (!iqIsFullI(iqp)) {
 800a190:	6882      	ldr	r2, [r0, #8]
 800a192:	2a00      	cmp	r2, #0
 800a194:	d0ea      	beq.n	800a16c <iqPutI+0xc>
 800a196:	2201      	movs	r2, #1
 800a198:	e7e8      	b.n	800a16c <iqPutI+0xc>
  return MSG_TIMEOUT;
 800a19a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a19e:	e7f6      	b.n	800a18e <iqPutI+0x2e>

0800a1a0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	460d      	mov	r5, r1

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800a1a6:	6943      	ldr	r3, [r0, #20]
 800a1a8:	b13b      	cbz	r3, 800a1ba <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	f104 000c 	add.w	r0, r4, #12
 800a1b0:	f7ff ffd6 	bl	800a160 <iqPutI>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	db05      	blt.n	800a1c4 <sdIncomingDataI+0x24>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
 800a1b8:	bd38      	pop	{r3, r4, r5, pc}
  chEvtBroadcastFlagsI(esp, flags);
 800a1ba:	2104      	movs	r1, #4
 800a1bc:	4408      	add	r0, r1
 800a1be:	f7fd fc27 	bl	8007a10 <chEvtBroadcastFlagsI>
 800a1c2:	e7f2      	b.n	800a1aa <sdIncomingDataI+0xa>
 800a1c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a1c8:	1d20      	adds	r0, r4, #4
 800a1ca:	f7fd fc21 	bl	8007a10 <chEvtBroadcastFlagsI>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 800a1ce:	e7f3      	b.n	800a1b8 <sdIncomingDataI+0x18>

0800a1d0 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	4606      	mov	r6, r0
  USART_TypeDef *u = sdp->usart;
 800a1d4:	6f45      	ldr	r5, [r0, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 800a1d6:	68ef      	ldr	r7, [r5, #12]
  uint16_t sr = u->SR;
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 800a1dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a1e0:	d103      	bne.n	800a1ea <serve_interrupt+0x1a>
 800a1e2:	2320      	movs	r3, #32
 800a1e4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800a1e8:	e018      	b.n	800a21c <serve_interrupt+0x4c>
 800a1ea:	2320      	movs	r3, #32
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1f4:	3004      	adds	r0, #4
 800a1f6:	f7fd fc0b 	bl	8007a10 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 800a1fa:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800a1fe:	602b      	str	r3, [r5, #0]
 800a200:	2300      	movs	r3, #0
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	e7ec      	b.n	800a1e2 <serve_interrupt+0x12>
      set_error(sdp, sr);
 800a208:	4621      	mov	r1, r4
 800a20a:	4630      	mov	r0, r6
 800a20c:	f7ff fe40 	bl	8009e90 <set_error>
 800a210:	e00a      	b.n	800a228 <serve_interrupt+0x58>
      sdIncomingDataI(sdp, b);
 800a212:	4630      	mov	r0, r6
 800a214:	f7ff ffc4 	bl	800a1a0 <sdIncomingDataI>
    sr = u->SR;
 800a218:	682c      	ldr	r4, [r5, #0]
 800a21a:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800a21c:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800a220:	d00a      	beq.n	800a238 <serve_interrupt+0x68>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800a222:	f014 0f0f 	tst.w	r4, #15
 800a226:	d1ef      	bne.n	800a208 <serve_interrupt+0x38>
    b = (uint8_t)u->DR & sdp->rxmask;
 800a228:	6869      	ldr	r1, [r5, #4]
 800a22a:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
 800a22e:	4019      	ands	r1, r3
    if (sr & USART_SR_RXNE)
 800a230:	f014 0f20 	tst.w	r4, #32
 800a234:	d0f0      	beq.n	800a218 <serve_interrupt+0x48>
 800a236:	e7ec      	b.n	800a212 <serve_interrupt+0x42>
 800a238:	2300      	movs	r3, #0
 800a23a:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800a23e:	f017 0f80 	tst.w	r7, #128	; 0x80
 800a242:	d002      	beq.n	800a24a <serve_interrupt+0x7a>
 800a244:	f014 0f80 	tst.w	r4, #128	; 0x80
 800a248:	d112      	bne.n	800a270 <serve_interrupt+0xa0>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800a24a:	f017 0f40 	tst.w	r7, #64	; 0x40
 800a24e:	d00e      	beq.n	800a26e <serve_interrupt+0x9e>
 800a250:	f014 0f40 	tst.w	r4, #64	; 0x40
 800a254:	d00b      	beq.n	800a26e <serve_interrupt+0x9e>
 800a256:	2320      	movs	r3, #32
 800a258:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 800a25c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a25e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800a260:	429a      	cmp	r2, r3
 800a262:	d01c      	beq.n	800a29e <serve_interrupt+0xce>
 800a264:	2300      	movs	r3, #0
 800a266:	b9fb      	cbnz	r3, 800a2a8 <serve_interrupt+0xd8>
 800a268:	2300      	movs	r3, #0
 800a26a:	f383 8811 	msr	BASEPRI, r3
}
 800a26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a270:	2320      	movs	r3, #32
 800a272:	f383 8811 	msr	BASEPRI, r3
    b = oqGetI(&sdp->oqueue);
 800a276:	f106 0030 	add.w	r0, r6, #48	; 0x30
 800a27a:	f7ff ff51 	bl	800a120 <oqGetI>
    if (b < MSG_OK) {
 800a27e:	2800      	cmp	r0, #0
 800a280:	db04      	blt.n	800a28c <serve_interrupt+0xbc>
      u->DR = b;
 800a282:	6068      	str	r0, [r5, #4]
 800a284:	2300      	movs	r3, #0
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	e7de      	b.n	800a24a <serve_interrupt+0x7a>
 800a28c:	2108      	movs	r1, #8
 800a28e:	1d30      	adds	r0, r6, #4
 800a290:	f7fd fbbe 	bl	8007a10 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 800a294:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800a298:	403b      	ands	r3, r7
 800a29a:	60eb      	str	r3, [r5, #12]
 800a29c:	e7f2      	b.n	800a284 <serve_interrupt+0xb4>
    if (oqIsEmptyI(&sdp->oqueue)) {
 800a29e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0e0      	beq.n	800a266 <serve_interrupt+0x96>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e7de      	b.n	800a266 <serve_interrupt+0x96>
 800a2a8:	2110      	movs	r1, #16
 800a2aa:	1d30      	adds	r0, r6, #4
 800a2ac:	f7fd fbb0 	bl	8007a10 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800a2b0:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 800a2b4:	043f      	lsls	r7, r7, #16
 800a2b6:	0c3f      	lsrs	r7, r7, #16
 800a2b8:	60ef      	str	r7, [r5, #12]
 800a2ba:	e7d5      	b.n	800a268 <serve_interrupt+0x98>
 800a2bc:	0000      	movs	r0, r0
	...

0800a2c0 <oq_write>:
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 800a2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	460f      	mov	r7, r1
 800a2c8:	4615      	mov	r5, r2
  if (n > oqGetEmptyI(oqp)) {
 800a2ca:	6883      	ldr	r3, [r0, #8]
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d200      	bcs.n	800a2d2 <oq_write+0x12>
    n = oqGetEmptyI(oqp);
 800a2d0:	6885      	ldr	r5, [r0, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800a2d2:	6926      	ldr	r6, [r4, #16]
 800a2d4:	6960      	ldr	r0, [r4, #20]
 800a2d6:	1a36      	subs	r6, r6, r0
  if (n < s1) {
 800a2d8:	42b5      	cmp	r5, r6
 800a2da:	d315      	bcc.n	800a308 <oq_write+0x48>
  else if (n > s1) {
 800a2dc:	42b5      	cmp	r5, r6
 800a2de:	d91b      	bls.n	800a318 <oq_write+0x58>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800a2e0:	4632      	mov	r2, r6
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	f7f6 f802 	bl	80002ec <memcpy>
    s2 = n - s1;
 800a2e8:	eba5 0806 	sub.w	r8, r5, r6
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 800a2ec:	4642      	mov	r2, r8
 800a2ee:	19b9      	adds	r1, r7, r6
 800a2f0:	68e0      	ldr	r0, [r4, #12]
 800a2f2:	f7f5 fffb 	bl	80002ec <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 800a2f6:	68e2      	ldr	r2, [r4, #12]
 800a2f8:	4442      	add	r2, r8
 800a2fa:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 800a2fc:	68a3      	ldr	r3, [r4, #8]
 800a2fe:	1b5b      	subs	r3, r3, r5
 800a300:	60a3      	str	r3, [r4, #8]
}
 800a302:	4628      	mov	r0, r5
 800a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800a308:	462a      	mov	r2, r5
 800a30a:	4639      	mov	r1, r7
 800a30c:	f7f5 ffee 	bl	80002ec <memcpy>
    oqp->q_wrptr += n;
 800a310:	6963      	ldr	r3, [r4, #20]
 800a312:	442b      	add	r3, r5
 800a314:	6163      	str	r3, [r4, #20]
 800a316:	e7f1      	b.n	800a2fc <oq_write+0x3c>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800a318:	462a      	mov	r2, r5
 800a31a:	4639      	mov	r1, r7
 800a31c:	f7f5 ffe6 	bl	80002ec <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800a320:	68e3      	ldr	r3, [r4, #12]
 800a322:	6163      	str	r3, [r4, #20]
 800a324:	e7ea      	b.n	800a2fc <oq_write+0x3c>
 800a326:	bf00      	nop
	...

0800a330 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 800a330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a334:	4607      	mov	r7, r0
 800a336:	460d      	mov	r5, r1
 800a338:	4692      	mov	sl, r2
 800a33a:	4699      	mov	r9, r3
  qnotify_t nfy = oqp->q_notify;
 800a33c:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800a340:	2320      	movs	r3, #32
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	4614      	mov	r4, r2
 800a348:	e013      	b.n	800a372 <oqWriteTimeout+0x42>
  return chThdEnqueueTimeoutS(tqp, timeout);
 800a34a:	4649      	mov	r1, r9
 800a34c:	4638      	mov	r0, r7
 800a34e:	f7fd ff3f 	bl	80081d0 <chThdEnqueueTimeoutS>
    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 800a352:	b170      	cbz	r0, 800a372 <oqWriteTimeout+0x42>
 800a354:	2300      	movs	r3, #0
 800a356:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 800a35a:	ebaa 0004 	sub.w	r0, sl, r4
 800a35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a362:	2300      	movs	r3, #0
 800a364:	f383 8811 	msr	BASEPRI, r3
      n  -= done;
 800a368:	1ba4      	subs	r4, r4, r6
      bp += done;
 800a36a:	4435      	add	r5, r6
 800a36c:	2320      	movs	r3, #32
 800a36e:	f383 8811 	msr	BASEPRI, r3
  while (n > 0U) {
 800a372:	2c00      	cmp	r4, #0
 800a374:	d0ee      	beq.n	800a354 <oqWriteTimeout+0x24>
    done = oq_write(oqp, bp, n);
 800a376:	4622      	mov	r2, r4
 800a378:	4629      	mov	r1, r5
 800a37a:	4638      	mov	r0, r7
 800a37c:	f7ff ffa0 	bl	800a2c0 <oq_write>
    if (done == (size_t)0) {
 800a380:	4606      	mov	r6, r0
 800a382:	2800      	cmp	r0, #0
 800a384:	d0e1      	beq.n	800a34a <oqWriteTimeout+0x1a>
      if (nfy != NULL) {
 800a386:	f1b8 0f00 	cmp.w	r8, #0
 800a38a:	d0ea      	beq.n	800a362 <oqWriteTimeout+0x32>
        nfy(oqp);
 800a38c:	4638      	mov	r0, r7
 800a38e:	47c0      	blx	r8
 800a390:	e7e7      	b.n	800a362 <oqWriteTimeout+0x32>
 800a392:	bf00      	nop
	...

0800a3a0 <_writet>:
                      sysinterval_t timeout) {
 800a3a0:	b508      	push	{r3, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 800a3a2:	3030      	adds	r0, #48	; 0x30
 800a3a4:	f7ff ffc4 	bl	800a330 <oqWriteTimeout>
}
 800a3a8:	bd08      	pop	{r3, pc}
 800a3aa:	bf00      	nop
 800a3ac:	0000      	movs	r0, r0
	...

0800a3b0 <_write>:
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 800a3b0:	b508      	push	{r3, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 800a3b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3b6:	3030      	adds	r0, #48	; 0x30
 800a3b8:	f7ff ffba 	bl	800a330 <oqWriteTimeout>
}
 800a3bc:	bd08      	pop	{r3, pc}
 800a3be:	bf00      	nop

0800a3c0 <iq_read>:
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 800a3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	460f      	mov	r7, r1
 800a3c8:	4615      	mov	r5, r2
  if (n > iqGetFullI(iqp)) {
 800a3ca:	6883      	ldr	r3, [r0, #8]
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d200      	bcs.n	800a3d2 <iq_read+0x12>
    n = iqGetFullI(iqp);
 800a3d0:	6885      	ldr	r5, [r0, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800a3d2:	6926      	ldr	r6, [r4, #16]
 800a3d4:	69a1      	ldr	r1, [r4, #24]
 800a3d6:	1a76      	subs	r6, r6, r1
  if (n < s1) {
 800a3d8:	42b5      	cmp	r5, r6
 800a3da:	d315      	bcc.n	800a408 <iq_read+0x48>
  else if (n > s1) {
 800a3dc:	42b5      	cmp	r5, r6
 800a3de:	d91b      	bls.n	800a418 <iq_read+0x58>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	f7f5 ff82 	bl	80002ec <memcpy>
    s2 = n - s1;
 800a3e8:	eba5 0806 	sub.w	r8, r5, r6
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	68e1      	ldr	r1, [r4, #12]
 800a3f0:	19b8      	adds	r0, r7, r6
 800a3f2:	f7f5 ff7b 	bl	80002ec <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 800a3f6:	68e2      	ldr	r2, [r4, #12]
 800a3f8:	4442      	add	r2, r8
 800a3fa:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800a3fc:	68a3      	ldr	r3, [r4, #8]
 800a3fe:	1b5b      	subs	r3, r3, r5
 800a400:	60a3      	str	r3, [r4, #8]
}
 800a402:	4628      	mov	r0, r5
 800a404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800a408:	462a      	mov	r2, r5
 800a40a:	4638      	mov	r0, r7
 800a40c:	f7f5 ff6e 	bl	80002ec <memcpy>
    iqp->q_rdptr += n;
 800a410:	69a3      	ldr	r3, [r4, #24]
 800a412:	442b      	add	r3, r5
 800a414:	61a3      	str	r3, [r4, #24]
 800a416:	e7f1      	b.n	800a3fc <iq_read+0x3c>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800a418:	462a      	mov	r2, r5
 800a41a:	4638      	mov	r0, r7
 800a41c:	f7f5 ff66 	bl	80002ec <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 800a420:	68e3      	ldr	r3, [r4, #12]
 800a422:	61a3      	str	r3, [r4, #24]
 800a424:	e7ea      	b.n	800a3fc <iq_read+0x3c>
 800a426:	bf00      	nop
	...

0800a430 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 800a430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a434:	4607      	mov	r7, r0
 800a436:	460d      	mov	r5, r1
 800a438:	4692      	mov	sl, r2
 800a43a:	4699      	mov	r9, r3
  qnotify_t nfy = iqp->q_notify;
 800a43c:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800a440:	2320      	movs	r3, #32
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	4614      	mov	r4, r2
 800a448:	e013      	b.n	800a472 <iqReadTimeout+0x42>
 800a44a:	4649      	mov	r1, r9
 800a44c:	4638      	mov	r0, r7
 800a44e:	f7fd febf 	bl	80081d0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800a452:	b170      	cbz	r0, 800a472 <iqReadTimeout+0x42>
 800a454:	2300      	movs	r3, #0
 800a456:	f383 8811 	msr	BASEPRI, r3
}
 800a45a:	ebaa 0004 	sub.w	r0, sl, r4
 800a45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a462:	2300      	movs	r3, #0
 800a464:	f383 8811 	msr	BASEPRI, r3
      n  -= done;
 800a468:	1ba4      	subs	r4, r4, r6
      bp += done;
 800a46a:	4435      	add	r5, r6
 800a46c:	2320      	movs	r3, #32
 800a46e:	f383 8811 	msr	BASEPRI, r3
  while (n > 0U) {
 800a472:	2c00      	cmp	r4, #0
 800a474:	d0ee      	beq.n	800a454 <iqReadTimeout+0x24>
    done = iq_read(iqp, bp, n);
 800a476:	4622      	mov	r2, r4
 800a478:	4629      	mov	r1, r5
 800a47a:	4638      	mov	r0, r7
 800a47c:	f7ff ffa0 	bl	800a3c0 <iq_read>
    if (done == (size_t)0) {
 800a480:	4606      	mov	r6, r0
 800a482:	2800      	cmp	r0, #0
 800a484:	d0e1      	beq.n	800a44a <iqReadTimeout+0x1a>
      if (nfy != NULL) {
 800a486:	f1b8 0f00 	cmp.w	r8, #0
 800a48a:	d0ea      	beq.n	800a462 <iqReadTimeout+0x32>
        nfy(iqp);
 800a48c:	4638      	mov	r0, r7
 800a48e:	47c0      	blx	r8
 800a490:	e7e7      	b.n	800a462 <iqReadTimeout+0x32>
 800a492:	bf00      	nop
	...

0800a4a0 <_readt>:
                     sysinterval_t timeout) {
 800a4a0:	b508      	push	{r3, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800a4a2:	300c      	adds	r0, #12
 800a4a4:	f7ff ffc4 	bl	800a430 <iqReadTimeout>
}
 800a4a8:	bd08      	pop	{r3, pc}
 800a4aa:	bf00      	nop
 800a4ac:	0000      	movs	r0, r0
	...

0800a4b0 <_read>:
static size_t _read(void *ip, uint8_t *bp, size_t n) {
 800a4b0:	b508      	push	{r3, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800a4b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4b6:	300c      	adds	r0, #12
 800a4b8:	f7ff ffba 	bl	800a430 <iqReadTimeout>
}
 800a4bc:	bd08      	pop	{r3, pc}
 800a4be:	bf00      	nop

0800a4c0 <_thread_init>:
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 800a4c0:	b410      	push	{r4}
  tp->prio      = prio;
 800a4c2:	6082      	str	r2, [r0, #8]
  tp->state     = CH_STATE_WTSTART;
 800a4c4:	2402      	movs	r4, #2
 800a4c6:	f880 4020 	strb.w	r4, [r0, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 800a4ca:	2400      	movs	r4, #0
 800a4cc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  tp->realprio  = prio;
 800a4d0:	63c2      	str	r2, [r0, #60]	; 0x3c
  tp->mtxlist   = NULL;
 800a4d2:	6384      	str	r4, [r0, #56]	; 0x38
  tp->epending  = (eventmask_t)0;
 800a4d4:	6344      	str	r4, [r0, #52]	; 0x34
  tp->refs      = (trefs_t)1;
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
  tp->name      = name;
 800a4dc:	6181      	str	r1, [r0, #24]
  REG_INSERT(tp);
 800a4de:	4a07      	ldr	r2, [pc, #28]	; (800a4fc <_thread_init+0x3c>)
 800a4e0:	6102      	str	r2, [r0, #16]
 800a4e2:	6951      	ldr	r1, [r2, #20]
 800a4e4:	6141      	str	r1, [r0, #20]
 800a4e6:	6108      	str	r0, [r1, #16]
 800a4e8:	6150      	str	r0, [r2, #20]
  list_init(&tp->waiting);
 800a4ea:	f100 0228 	add.w	r2, r0, #40	; 0x28
  tlp->next = (thread_t *)tlp;
 800a4ee:	6282      	str	r2, [r0, #40]	; 0x28
  queue_init(&tp->msgqueue);
 800a4f0:	f100 022c 	add.w	r2, r0, #44	; 0x2c
  tqp->next = (thread_t *)tqp;
 800a4f4:	62c2      	str	r2, [r0, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 800a4f6:	6302      	str	r2, [r0, #48]	; 0x30
}
 800a4f8:	bc10      	pop	{r4}
 800a4fa:	4770      	bx	lr
 800a4fc:	20001a18 	.word	0x20001a18

0800a500 <chThdCreateSuspendedI>:
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 800a500:	b508      	push	{r3, lr}
  tp = (thread_t *)((uint8_t *)tdp->wend -
 800a502:	6883      	ldr	r3, [r0, #8]
  tp->wabase = tdp->wbase;
 800a504:	6842      	ldr	r2, [r0, #4]
 800a506:	f843 2c2c 	str.w	r2, [r3, #-44]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800a50a:	f1a3 026c 	sub.w	r2, r3, #108	; 0x6c
 800a50e:	f843 2c3c 	str.w	r2, [r3, #-60]
 800a512:	6901      	ldr	r1, [r0, #16]
 800a514:	f843 1c6c 	str.w	r1, [r3, #-108]
 800a518:	6941      	ldr	r1, [r0, #20]
 800a51a:	f843 1c68 	str.w	r1, [r3, #-104]
 800a51e:	4905      	ldr	r1, [pc, #20]	; (800a534 <chThdCreateSuspendedI+0x34>)
 800a520:	f843 1c4c 	str.w	r1, [r3, #-76]
  return _thread_init(tp, tdp->name, tdp->prio);
 800a524:	68c2      	ldr	r2, [r0, #12]
 800a526:	6801      	ldr	r1, [r0, #0]
 800a528:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
 800a52c:	f7ff ffc8 	bl	800a4c0 <_thread_init>
}
 800a530:	bd08      	pop	{r3, pc}
 800a532:	bf00      	nop
 800a534:	080002d1 	.word	0x080002d1
	...

0800a540 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 800a540:	b510      	push	{r4, lr}
  thread_t *otp = currp;
 800a542:	4c08      	ldr	r4, [pc, #32]	; (800a564 <chSchDoReschedule+0x24>)
 800a544:	69a0      	ldr	r0, [r4, #24]
  thread_t *tp = tqp->next;
 800a546:	6823      	ldr	r3, [r4, #0]
  tqp->next             = tp->queue.next;
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800a54c:	6054      	str	r4, [r2, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 800a54e:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2020 	strb.w	r2, [r3, #32]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 800a556:	f7fe ffe3 	bl	8009520 <chSchReadyAheadI>
 800a55a:	4601      	mov	r1, r0
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800a55c:	69a0      	ldr	r0, [r4, #24]
 800a55e:	f7f5 feaf 	bl	80002c0 <_port_switch>
}
 800a562:	bd10      	pop	{r4, pc}
 800a564:	20001a18 	.word	0x20001a18
	...

0800a570 <chSchIsPreemptionRequired>:
  tprio_t p1 = firstprio(&ch.rlist.queue);
 800a570:	4b04      	ldr	r3, [pc, #16]	; (800a584 <chSchIsPreemptionRequired+0x14>)
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	6890      	ldr	r0, [r2, #8]
  tprio_t p2 = currp->prio;
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	689b      	ldr	r3, [r3, #8]
}
 800a57a:	4298      	cmp	r0, r3
 800a57c:	bf94      	ite	ls
 800a57e:	2000      	movls	r0, #0
 800a580:	2001      	movhi	r0, #1
 800a582:	4770      	bx	lr
 800a584:	20001a18 	.word	0x20001a18
	...

0800a590 <chSchRescheduleS>:
void chSchRescheduleS(void) {
 800a590:	b508      	push	{r3, lr}
  return firstprio(&ch.rlist.queue) > currp->prio;
 800a592:	4b05      	ldr	r3, [pc, #20]	; (800a5a8 <chSchRescheduleS+0x18>)
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	6892      	ldr	r2, [r2, #8]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	689b      	ldr	r3, [r3, #8]
  if (chSchIsRescRequiredI()) {
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d800      	bhi.n	800a5a2 <chSchRescheduleS+0x12>
}
 800a5a0:	bd08      	pop	{r3, pc}
    chSchDoRescheduleAhead();
 800a5a2:	f7ff fc5d 	bl	8009e60 <chSchDoRescheduleAhead>
 800a5a6:	e7fb      	b.n	800a5a0 <chSchRescheduleS+0x10>
 800a5a8:	20001a18 	.word	0x20001a18
 800a5ac:	00000000 	.word	0x00000000

0800a5b0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 800a5b0:	b508      	push	{r3, lr}
  thread_t *otp = currp;
 800a5b2:	4b07      	ldr	r3, [pc, #28]	; (800a5d0 <chSchGoSleepS+0x20>)
 800a5b4:	6999      	ldr	r1, [r3, #24]
  otp->state = newstate;
 800a5b6:	f881 0020 	strb.w	r0, [r1, #32]
  thread_t *tp = tqp->next;
 800a5ba:	6818      	ldr	r0, [r3, #0]
  tqp->next             = tp->queue.next;
 800a5bc:	6802      	ldr	r2, [r0, #0]
 800a5be:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800a5c0:	6053      	str	r3, [r2, #4]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800a5c2:	6198      	str	r0, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	f880 3020 	strb.w	r3, [r0, #32]
  chSysSwitch(currp, otp);
 800a5ca:	f7f5 fe79 	bl	80002c0 <_port_switch>
}
 800a5ce:	bd08      	pop	{r3, pc}
 800a5d0:	20001a18 	.word	0x20001a18
	...

0800a5e0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f880 3020 	strb.w	r3, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800a5e6:	4b06      	ldr	r3, [pc, #24]	; (800a600 <chSchReadyI+0x20>)
    cp = cp->queue.next;
 800a5e8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800a5ea:	6899      	ldr	r1, [r3, #8]
 800a5ec:	6882      	ldr	r2, [r0, #8]
 800a5ee:	4291      	cmp	r1, r2
 800a5f0:	d2fa      	bcs.n	800a5e8 <chSchReadyI+0x8>
  tp->queue.next             = cp;
 800a5f2:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 800a5f8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800a5fa:	6058      	str	r0, [r3, #4]
}
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	20001a18 	.word	0x20001a18
	...

0800a610 <chSchDoRescheduleBehind>:
void chSchDoRescheduleBehind(void) {
 800a610:	b510      	push	{r4, lr}
  thread_t *otp = currp;
 800a612:	4c08      	ldr	r4, [pc, #32]	; (800a634 <chSchDoRescheduleBehind+0x24>)
 800a614:	69a0      	ldr	r0, [r4, #24]
  thread_t *tp = tqp->next;
 800a616:	6823      	ldr	r3, [r4, #0]
  tqp->next             = tp->queue.next;
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800a61c:	6054      	str	r4, [r2, #4]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800a61e:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2020 	strb.w	r2, [r3, #32]
  otp = chSchReadyI(otp);
 800a626:	f7ff ffdb 	bl	800a5e0 <chSchReadyI>
 800a62a:	4601      	mov	r1, r0
  chSysSwitch(currp, otp);
 800a62c:	69a0      	ldr	r0, [r4, #24]
 800a62e:	f7f5 fe47 	bl	80002c0 <_port_switch>
}
 800a632:	bd10      	pop	{r4, pc}
 800a634:	20001a18 	.word	0x20001a18
	...

0800a640 <chSchWakeupS>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800a640:	b510      	push	{r4, lr}
 800a642:	4604      	mov	r4, r0
  thread_t *otp = currp;
 800a644:	4b0b      	ldr	r3, [pc, #44]	; (800a674 <chSchWakeupS+0x34>)
 800a646:	6998      	ldr	r0, [r3, #24]
  ntp->u.rdymsg = msg;
 800a648:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 800a64a:	68a2      	ldr	r2, [r4, #8]
 800a64c:	6883      	ldr	r3, [r0, #8]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d803      	bhi.n	800a65a <chSchWakeupS+0x1a>
    (void) chSchReadyI(ntp);
 800a652:	4620      	mov	r0, r4
 800a654:	f7ff ffc4 	bl	800a5e0 <chSchReadyI>
}
 800a658:	bd10      	pop	{r4, pc}
    otp = chSchReadyAheadI(otp);
 800a65a:	f7fe ff61 	bl	8009520 <chSchReadyAheadI>
 800a65e:	4601      	mov	r1, r0
    currp = ntp;
 800a660:	4b04      	ldr	r3, [pc, #16]	; (800a674 <chSchWakeupS+0x34>)
 800a662:	619c      	str	r4, [r3, #24]
    ntp->state = CH_STATE_CURRENT;
 800a664:	2301      	movs	r3, #1
 800a666:	f884 3020 	strb.w	r3, [r4, #32]
    chSysSwitch(ntp, otp);
 800a66a:	4620      	mov	r0, r4
 800a66c:	f7f5 fe28 	bl	80002c0 <_port_switch>
 800a670:	e7f2      	b.n	800a658 <chSchWakeupS+0x18>
 800a672:	bf00      	nop
 800a674:	20001a18 	.word	0x20001a18
	...

0800a680 <wakeup>:
static void wakeup(void *p) {
 800a680:	b508      	push	{r3, lr}
 800a682:	2320      	movs	r3, #32
 800a684:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 800a688:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a68c:	2b07      	cmp	r3, #7
 800a68e:	d816      	bhi.n	800a6be <wakeup+0x3e>
 800a690:	e8df f003 	tbb	[pc, r3]
 800a694:	08151504 	.word	0x08151504
 800a698:	10150c10 	.word	0x10150c10
 800a69c:	2300      	movs	r3, #0
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	e014      	b.n	800a6ce <wakeup+0x4e>
    *tp->u.wttrp = NULL;
 800a6a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	601a      	str	r2, [r3, #0]
    break;
 800a6aa:	e008      	b.n	800a6be <wakeup+0x3e>
    chSemFastSignalI(tp->u.wtsemp);
 800a6ac:	6a42      	ldr	r2, [r0, #36]	; 0x24
  sp->cnt++;
 800a6ae:	6893      	ldr	r3, [r2, #8]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	6093      	str	r3, [r2, #8]
  tp->queue.prev->queue.next = tp->queue.next;
 800a6b4:	6842      	ldr	r2, [r0, #4]
 800a6b6:	6803      	ldr	r3, [r0, #0]
 800a6b8:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800a6ba:	6842      	ldr	r2, [r0, #4]
 800a6bc:	605a      	str	r2, [r3, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 800a6be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6c2:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800a6c4:	f7ff ff8c 	bl	800a5e0 <chSchReadyI>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f383 8811 	msr	BASEPRI, r3
}
 800a6ce:	bd08      	pop	{r3, pc}

0800a6d0 <chSysRestoreStatusX>:
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {

  if (port_irq_enabled(sts)) {
 800a6d0:	b978      	cbnz	r0, 800a6f2 <chSysRestoreStatusX+0x22>
void chSysRestoreStatusX(syssts_t sts) {
 800a6d2:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6d4:	f3ef 8305 	mrs	r3, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 800a6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 800a6dc:	b11b      	cbz	r3, 800a6e6 <chSysRestoreStatusX+0x16>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f383 8811 	msr	BASEPRI, r3
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 800a6e4:	bd08      	pop	{r3, pc}
      chSchRescheduleS();
 800a6e6:	f7ff ff53 	bl	800a590 <chSchRescheduleS>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	e7f8      	b.n	800a6e4 <chSysRestoreStatusX+0x14>
 800a6f2:	4770      	bx	lr
	...

0800a700 <chSysGetStatusAndLockX>:
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a700:	f3ef 8011 	mrs	r0, BASEPRI
  if (port_irq_enabled(sts)) {
 800a704:	b958      	cbnz	r0, 800a71e <chSysGetStatusAndLockX+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a706:	f3ef 8305 	mrs	r3, IPSR
 800a70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 800a70e:	b11b      	cbz	r3, 800a718 <chSysGetStatusAndLockX+0x18>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800a710:	2320      	movs	r3, #32
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	4770      	bx	lr
 800a718:	2320      	movs	r3, #32
 800a71a:	f383 8811 	msr	BASEPRI, r3
}
 800a71e:	4770      	bx	lr

0800a720 <chSysIntegrityCheckI>:
  if ((testmask & CH_INTEGRITY_RLIST) != 0U) {
 800a720:	f010 0f01 	tst.w	r0, #1
 800a724:	d010      	beq.n	800a748 <chSysIntegrityCheckI+0x28>
    tp = ch.rlist.queue.next;
 800a726:	4b22      	ldr	r3, [pc, #136]	; (800a7b0 <chSysIntegrityCheckI+0x90>)
 800a728:	681a      	ldr	r2, [r3, #0]
    n = (cnt_t)0;
 800a72a:	2300      	movs	r3, #0
    while (tp != (thread_t *)&ch.rlist.queue) {
 800a72c:	4920      	ldr	r1, [pc, #128]	; (800a7b0 <chSysIntegrityCheckI+0x90>)
 800a72e:	428a      	cmp	r2, r1
 800a730:	d002      	beq.n	800a738 <chSysIntegrityCheckI+0x18>
      n++;
 800a732:	3301      	adds	r3, #1
      tp = tp->queue.next;
 800a734:	6812      	ldr	r2, [r2, #0]
 800a736:	e7f9      	b.n	800a72c <chSysIntegrityCheckI+0xc>
    tp = ch.rlist.queue.prev;
 800a738:	684a      	ldr	r2, [r1, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800a73a:	e001      	b.n	800a740 <chSysIntegrityCheckI+0x20>
      n--;
 800a73c:	3b01      	subs	r3, #1
      tp = tp->queue.prev;
 800a73e:	6852      	ldr	r2, [r2, #4]
    while (tp != (thread_t *)&ch.rlist.queue) {
 800a740:	491b      	ldr	r1, [pc, #108]	; (800a7b0 <chSysIntegrityCheckI+0x90>)
 800a742:	428a      	cmp	r2, r1
 800a744:	d1fa      	bne.n	800a73c <chSysIntegrityCheckI+0x1c>
    if (n != (cnt_t)0) {
 800a746:	bb5b      	cbnz	r3, 800a7a0 <chSysIntegrityCheckI+0x80>
  if ((testmask & CH_INTEGRITY_VTLIST) != 0U) {
 800a748:	f010 0f02 	tst.w	r0, #2
 800a74c:	d012      	beq.n	800a774 <chSysIntegrityCheckI+0x54>
    vtp = ch.vtlist.next;
 800a74e:	4b18      	ldr	r3, [pc, #96]	; (800a7b0 <chSysIntegrityCheckI+0x90>)
 800a750:	69da      	ldr	r2, [r3, #28]
    n = (cnt_t)0;
 800a752:	2300      	movs	r3, #0
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800a754:	4917      	ldr	r1, [pc, #92]	; (800a7b4 <chSysIntegrityCheckI+0x94>)
 800a756:	428a      	cmp	r2, r1
 800a758:	d002      	beq.n	800a760 <chSysIntegrityCheckI+0x40>
      n++;
 800a75a:	3301      	adds	r3, #1
      vtp = vtp->next;
 800a75c:	6812      	ldr	r2, [r2, #0]
 800a75e:	e7f9      	b.n	800a754 <chSysIntegrityCheckI+0x34>
    vtp = ch.vtlist.prev;
 800a760:	f1a1 021c 	sub.w	r2, r1, #28
 800a764:	6a12      	ldr	r2, [r2, #32]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800a766:	e001      	b.n	800a76c <chSysIntegrityCheckI+0x4c>
      n--;
 800a768:	3b01      	subs	r3, #1
      vtp = vtp->prev;
 800a76a:	6852      	ldr	r2, [r2, #4]
    while (vtp != (virtual_timer_t *)&ch.vtlist) {
 800a76c:	4911      	ldr	r1, [pc, #68]	; (800a7b4 <chSysIntegrityCheckI+0x94>)
 800a76e:	428a      	cmp	r2, r1
 800a770:	d1fa      	bne.n	800a768 <chSysIntegrityCheckI+0x48>
    if (n != (cnt_t)0) {
 800a772:	b9bb      	cbnz	r3, 800a7a4 <chSysIntegrityCheckI+0x84>
  if ((testmask & CH_INTEGRITY_REGISTRY) != 0U) {
 800a774:	f010 0f04 	tst.w	r0, #4
 800a778:	d016      	beq.n	800a7a8 <chSysIntegrityCheckI+0x88>
    tp = ch.rlist.newer;
 800a77a:	4b0d      	ldr	r3, [pc, #52]	; (800a7b0 <chSysIntegrityCheckI+0x90>)
 800a77c:	691a      	ldr	r2, [r3, #16]
    n = (cnt_t)0;
 800a77e:	2300      	movs	r3, #0
 800a780:	e001      	b.n	800a786 <chSysIntegrityCheckI+0x66>
      n++;
 800a782:	3301      	adds	r3, #1
      tp = tp->newer;
 800a784:	6912      	ldr	r2, [r2, #16]
    while (tp != (thread_t *)&ch.rlist) {
 800a786:	490a      	ldr	r1, [pc, #40]	; (800a7b0 <chSysIntegrityCheckI+0x90>)
 800a788:	428a      	cmp	r2, r1
 800a78a:	d1fa      	bne.n	800a782 <chSysIntegrityCheckI+0x62>
    tp = ch.rlist.older;
 800a78c:	694a      	ldr	r2, [r1, #20]
    while (tp != (thread_t *)&ch.rlist) {
 800a78e:	4908      	ldr	r1, [pc, #32]	; (800a7b0 <chSysIntegrityCheckI+0x90>)
 800a790:	428a      	cmp	r2, r1
 800a792:	d002      	beq.n	800a79a <chSysIntegrityCheckI+0x7a>
      n--;
 800a794:	3b01      	subs	r3, #1
      tp = tp->older;
 800a796:	6952      	ldr	r2, [r2, #20]
 800a798:	e7f9      	b.n	800a78e <chSysIntegrityCheckI+0x6e>
    if (n != (cnt_t)0) {
 800a79a:	b93b      	cbnz	r3, 800a7ac <chSysIntegrityCheckI+0x8c>
  return false;
 800a79c:	2000      	movs	r0, #0
 800a79e:	4770      	bx	lr
      return true;
 800a7a0:	2001      	movs	r0, #1
 800a7a2:	4770      	bx	lr
      return true;
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	4770      	bx	lr
  return false;
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	4770      	bx	lr
      return true;
 800a7ac:	2001      	movs	r0, #1
}
 800a7ae:	4770      	bx	lr
 800a7b0:	20001a18 	.word	0x20001a18
 800a7b4:	20001a34 	.word	0x20001a34
	...

0800a7c0 <chSysInit>:
void chSysInit(void) {
 800a7c0:	b510      	push	{r4, lr}
  _scheduler_init();
 800a7c2:	f7fe fec5 	bl	8009550 <_scheduler_init>
  _vt_init();
 800a7c6:	f7fe fed3 	bl	8009570 <_vt_init>
 * @notapi
 */
static inline void _oslib_init(void) {

#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 800a7ca:	f7fd f911 	bl	80079f0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 800a7ce:	f7fd fc07 	bl	8007fe0 <_heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  _factory_init();
 800a7d2:	f7fd faa5 	bl	8007d20 <_factory_init>
  _tm_init();
 800a7d6:	f7fd fc13 	bl	8008000 <_tm_init>
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800a7da:	4c0b      	ldr	r4, [pc, #44]	; (800a808 <chSysInit+0x48>)
 800a7dc:	2280      	movs	r2, #128	; 0x80
 800a7de:	490b      	ldr	r1, [pc, #44]	; (800a80c <chSysInit+0x4c>)
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f7ff fe6d 	bl	800a4c0 <_thread_init>
 800a7e6:	f844 0c18 	str.w	r0, [r4, #-24]
  currp->wabase = NULL;
 800a7ea:	2400      	movs	r4, #0
 800a7ec:	61c4      	str	r4, [r0, #28]
  currp->state = CH_STATE_CURRENT;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	f880 3020 	strb.w	r3, [r0, #32]
  port_init();
 800a7f4:	f7fd f8c4 	bl	8007980 <port_init>
 800a7f8:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800a7fc:	b662      	cpsie	i
    (void) chThdCreate(&idle_descriptor);
 800a7fe:	4804      	ldr	r0, [pc, #16]	; (800a810 <chSysInit+0x50>)
 800a800:	f7fe fd1e 	bl	8009240 <chThdCreate>
}
 800a804:	bd10      	pop	{r4, pc}
 800a806:	bf00      	nop
 800a808:	20001a48 	.word	0x20001a48
 800a80c:	0800e360 	.word	0x0800e360
 800a810:	0800e464 	.word	0x0800e464
	...

0800a820 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800a820:	b508      	push	{r3, lr}

  stm32_gpio_init();
 800a822:	f7fe fed5 	bl	80095d0 <stm32_gpio_init>
  stm32_clock_init();
 800a826:	f7fe ffeb 	bl	8009800 <stm32_clock_init>
}
 800a82a:	bd08      	pop	{r3, pc}
 800a82c:	0000      	movs	r0, r0
	...

0800a830 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 800a830:	b508      	push	{r3, lr}
  serve_interrupt(&SD2);
 800a832:	4803      	ldr	r0, [pc, #12]	; (800a840 <VectorD8+0x10>)
 800a834:	f7ff fccc 	bl	800a1d0 <serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 800a838:	f7fd f87a 	bl	8007930 <_port_irq_epilogue>
}
 800a83c:	bd08      	pop	{r3, pc}
 800a83e:	bf00      	nop
 800a840:	200018e8 	.word	0x200018e8
	...

0800a850 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800a850:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800a852:	4b08      	ldr	r3, [pc, #32]	; (800a874 <Vector158+0x24>)
 800a854:	6859      	ldr	r1, [r3, #4]
 800a856:	0d89      	lsrs	r1, r1, #22
 800a858:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 800a85c:	058a      	lsls	r2, r1, #22
 800a85e:	60da      	str	r2, [r3, #12]
  if (dma.streams[15].func)
 800a860:	4b05      	ldr	r3, [pc, #20]	; (800a878 <Vector158+0x28>)
 800a862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a864:	b11b      	cbz	r3, 800a86e <Vector158+0x1e>
    dma.streams[15].func(dma.streams[15].param, flags);
 800a866:	4a04      	ldr	r2, [pc, #16]	; (800a878 <Vector158+0x28>)
 800a868:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
 800a86c:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a86e:	f7fd f85f 	bl	8007930 <_port_irq_epilogue>
}
 800a872:	bd08      	pop	{r3, pc}
 800a874:	40026400 	.word	0x40026400
 800a878:	20002b60 	.word	0x20002b60
 800a87c:	00000000 	.word	0x00000000

0800a880 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800a880:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800a882:	4b08      	ldr	r3, [pc, #32]	; (800a8a4 <Vector154+0x24>)
 800a884:	6859      	ldr	r1, [r3, #4]
 800a886:	0c09      	lsrs	r1, r1, #16
 800a888:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 800a88c:	040a      	lsls	r2, r1, #16
 800a88e:	60da      	str	r2, [r3, #12]
  if (dma.streams[14].func)
 800a890:	4b05      	ldr	r3, [pc, #20]	; (800a8a8 <Vector154+0x28>)
 800a892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a894:	b113      	cbz	r3, 800a89c <Vector154+0x1c>
    dma.streams[14].func(dma.streams[14].param, flags);
 800a896:	4a04      	ldr	r2, [pc, #16]	; (800a8a8 <Vector154+0x28>)
 800a898:	6f90      	ldr	r0, [r2, #120]	; 0x78
 800a89a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a89c:	f7fd f848 	bl	8007930 <_port_irq_epilogue>
}
 800a8a0:	bd08      	pop	{r3, pc}
 800a8a2:	bf00      	nop
 800a8a4:	40026400 	.word	0x40026400
 800a8a8:	20002b60 	.word	0x20002b60
 800a8ac:	00000000 	.word	0x00000000

0800a8b0 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800a8b0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800a8b2:	4b08      	ldr	r3, [pc, #32]	; (800a8d4 <Vector150+0x24>)
 800a8b4:	6859      	ldr	r1, [r3, #4]
 800a8b6:	0989      	lsrs	r1, r1, #6
 800a8b8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 800a8bc:	018a      	lsls	r2, r1, #6
 800a8be:	60da      	str	r2, [r3, #12]
  if (dma.streams[13].func)
 800a8c0:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <Vector150+0x28>)
 800a8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8c4:	b113      	cbz	r3, 800a8cc <Vector150+0x1c>
    dma.streams[13].func(dma.streams[13].param, flags);
 800a8c6:	4a04      	ldr	r2, [pc, #16]	; (800a8d8 <Vector150+0x28>)
 800a8c8:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800a8ca:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a8cc:	f7fd f830 	bl	8007930 <_port_irq_epilogue>
}
 800a8d0:	bd08      	pop	{r3, pc}
 800a8d2:	bf00      	nop
 800a8d4:	40026400 	.word	0x40026400
 800a8d8:	20002b60 	.word	0x20002b60
 800a8dc:	00000000 	.word	0x00000000

0800a8e0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 800a8e0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800a8e2:	4b07      	ldr	r3, [pc, #28]	; (800a900 <Vector130+0x20>)
 800a8e4:	6859      	ldr	r1, [r3, #4]
 800a8e6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800a8ea:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <Vector130+0x24>)
 800a8ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8f0:	b113      	cbz	r3, 800a8f8 <Vector130+0x18>
    dma.streams[12].func(dma.streams[12].param, flags);
 800a8f2:	4a04      	ldr	r2, [pc, #16]	; (800a904 <Vector130+0x24>)
 800a8f4:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800a8f6:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a8f8:	f7fd f81a 	bl	8007930 <_port_irq_epilogue>
}
 800a8fc:	bd08      	pop	{r3, pc}
 800a8fe:	bf00      	nop
 800a900:	40026400 	.word	0x40026400
 800a904:	20002b60 	.word	0x20002b60
	...

0800a910 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800a910:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800a912:	4b08      	ldr	r3, [pc, #32]	; (800a934 <Vector12C+0x24>)
 800a914:	6819      	ldr	r1, [r3, #0]
 800a916:	0d89      	lsrs	r1, r1, #22
 800a918:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 800a91c:	058a      	lsls	r2, r1, #22
 800a91e:	609a      	str	r2, [r3, #8]
  if (dma.streams[11].func)
 800a920:	4b05      	ldr	r3, [pc, #20]	; (800a938 <Vector12C+0x28>)
 800a922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a924:	b113      	cbz	r3, 800a92c <Vector12C+0x1c>
    dma.streams[11].func(dma.streams[11].param, flags);
 800a926:	4a04      	ldr	r2, [pc, #16]	; (800a938 <Vector12C+0x28>)
 800a928:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800a92a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a92c:	f7fd f800 	bl	8007930 <_port_irq_epilogue>
}
 800a930:	bd08      	pop	{r3, pc}
 800a932:	bf00      	nop
 800a934:	40026400 	.word	0x40026400
 800a938:	20002b60 	.word	0x20002b60
 800a93c:	00000000 	.word	0x00000000

0800a940 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800a940:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800a942:	4b08      	ldr	r3, [pc, #32]	; (800a964 <Vector128+0x24>)
 800a944:	6819      	ldr	r1, [r3, #0]
 800a946:	0c09      	lsrs	r1, r1, #16
 800a948:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 800a94c:	040a      	lsls	r2, r1, #16
 800a94e:	609a      	str	r2, [r3, #8]
  if (dma.streams[10].func)
 800a950:	4b05      	ldr	r3, [pc, #20]	; (800a968 <Vector128+0x28>)
 800a952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a954:	b113      	cbz	r3, 800a95c <Vector128+0x1c>
    dma.streams[10].func(dma.streams[10].param, flags);
 800a956:	4a04      	ldr	r2, [pc, #16]	; (800a968 <Vector128+0x28>)
 800a958:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800a95a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a95c:	f7fc ffe8 	bl	8007930 <_port_irq_epilogue>
}
 800a960:	bd08      	pop	{r3, pc}
 800a962:	bf00      	nop
 800a964:	40026400 	.word	0x40026400
 800a968:	20002b60 	.word	0x20002b60
 800a96c:	00000000 	.word	0x00000000

0800a970 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800a970:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800a972:	4b08      	ldr	r3, [pc, #32]	; (800a994 <Vector124+0x24>)
 800a974:	6819      	ldr	r1, [r3, #0]
 800a976:	0989      	lsrs	r1, r1, #6
 800a978:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 800a97c:	018a      	lsls	r2, r1, #6
 800a97e:	609a      	str	r2, [r3, #8]
  if (dma.streams[9].func)
 800a980:	4b05      	ldr	r3, [pc, #20]	; (800a998 <Vector124+0x28>)
 800a982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a984:	b113      	cbz	r3, 800a98c <Vector124+0x1c>
    dma.streams[9].func(dma.streams[9].param, flags);
 800a986:	4a04      	ldr	r2, [pc, #16]	; (800a998 <Vector124+0x28>)
 800a988:	6d10      	ldr	r0, [r2, #80]	; 0x50
 800a98a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a98c:	f7fc ffd0 	bl	8007930 <_port_irq_epilogue>
}
 800a990:	bd08      	pop	{r3, pc}
 800a992:	bf00      	nop
 800a994:	40026400 	.word	0x40026400
 800a998:	20002b60 	.word	0x20002b60
 800a99c:	00000000 	.word	0x00000000

0800a9a0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 800a9a0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800a9a2:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <Vector120+0x20>)
 800a9a4:	6819      	ldr	r1, [r3, #0]
 800a9a6:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800a9aa:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 800a9ac:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <Vector120+0x24>)
 800a9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b0:	b113      	cbz	r3, 800a9b8 <Vector120+0x18>
    dma.streams[8].func(dma.streams[8].param, flags);
 800a9b2:	4a04      	ldr	r2, [pc, #16]	; (800a9c4 <Vector120+0x24>)
 800a9b4:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800a9b6:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a9b8:	f7fc ffba 	bl	8007930 <_port_irq_epilogue>
}
 800a9bc:	bd08      	pop	{r3, pc}
 800a9be:	bf00      	nop
 800a9c0:	40026400 	.word	0x40026400
 800a9c4:	20002b60 	.word	0x20002b60
	...

0800a9d0 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800a9d0:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800a9d2:	4b08      	ldr	r3, [pc, #32]	; (800a9f4 <VectorFC+0x24>)
 800a9d4:	6859      	ldr	r1, [r3, #4]
 800a9d6:	0d89      	lsrs	r1, r1, #22
 800a9d8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 800a9dc:	058a      	lsls	r2, r1, #22
 800a9de:	60da      	str	r2, [r3, #12]
  if (dma.streams[7].func)
 800a9e0:	4b05      	ldr	r3, [pc, #20]	; (800a9f8 <VectorFC+0x28>)
 800a9e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e4:	b113      	cbz	r3, 800a9ec <VectorFC+0x1c>
    dma.streams[7].func(dma.streams[7].param, flags);
 800a9e6:	4a04      	ldr	r2, [pc, #16]	; (800a9f8 <VectorFC+0x28>)
 800a9e8:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800a9ea:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a9ec:	f7fc ffa0 	bl	8007930 <_port_irq_epilogue>
}
 800a9f0:	bd08      	pop	{r3, pc}
 800a9f2:	bf00      	nop
 800a9f4:	40026000 	.word	0x40026000
 800a9f8:	20002b60 	.word	0x20002b60
 800a9fc:	00000000 	.word	0x00000000

0800aa00 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800aa00:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 800aa02:	4b08      	ldr	r3, [pc, #32]	; (800aa24 <Vector84+0x24>)
 800aa04:	6859      	ldr	r1, [r3, #4]
 800aa06:	0c09      	lsrs	r1, r1, #16
 800aa08:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 800aa0c:	040a      	lsls	r2, r1, #16
 800aa0e:	60da      	str	r2, [r3, #12]
  if (dma.streams[6].func)
 800aa10:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <Vector84+0x28>)
 800aa12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa14:	b113      	cbz	r3, 800aa1c <Vector84+0x1c>
    dma.streams[6].func(dma.streams[6].param, flags);
 800aa16:	4a04      	ldr	r2, [pc, #16]	; (800aa28 <Vector84+0x28>)
 800aa18:	6b90      	ldr	r0, [r2, #56]	; 0x38
 800aa1a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800aa1c:	f7fc ff88 	bl	8007930 <_port_irq_epilogue>
}
 800aa20:	bd08      	pop	{r3, pc}
 800aa22:	bf00      	nop
 800aa24:	40026000 	.word	0x40026000
 800aa28:	20002b60 	.word	0x20002b60
 800aa2c:	00000000 	.word	0x00000000

0800aa30 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800aa30:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800aa32:	4b08      	ldr	r3, [pc, #32]	; (800aa54 <Vector80+0x24>)
 800aa34:	6859      	ldr	r1, [r3, #4]
 800aa36:	0989      	lsrs	r1, r1, #6
 800aa38:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 800aa3c:	018a      	lsls	r2, r1, #6
 800aa3e:	60da      	str	r2, [r3, #12]
  if (dma.streams[5].func)
 800aa40:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <Vector80+0x28>)
 800aa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa44:	b113      	cbz	r3, 800aa4c <Vector80+0x1c>
    dma.streams[5].func(dma.streams[5].param, flags);
 800aa46:	4a04      	ldr	r2, [pc, #16]	; (800aa58 <Vector80+0x28>)
 800aa48:	6b10      	ldr	r0, [r2, #48]	; 0x30
 800aa4a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800aa4c:	f7fc ff70 	bl	8007930 <_port_irq_epilogue>
}
 800aa50:	bd08      	pop	{r3, pc}
 800aa52:	bf00      	nop
 800aa54:	40026000 	.word	0x40026000
 800aa58:	20002b60 	.word	0x20002b60
 800aa5c:	00000000 	.word	0x00000000

0800aa60 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 800aa60:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800aa62:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <Vector7C+0x20>)
 800aa64:	6859      	ldr	r1, [r3, #4]
 800aa66:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800aa6a:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 800aa6c:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <Vector7C+0x24>)
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa70:	b113      	cbz	r3, 800aa78 <Vector7C+0x18>
    dma.streams[4].func(dma.streams[4].param, flags);
 800aa72:	4a04      	ldr	r2, [pc, #16]	; (800aa84 <Vector7C+0x24>)
 800aa74:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800aa76:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800aa78:	f7fc ff5a 	bl	8007930 <_port_irq_epilogue>
}
 800aa7c:	bd08      	pop	{r3, pc}
 800aa7e:	bf00      	nop
 800aa80:	40026000 	.word	0x40026000
 800aa84:	20002b60 	.word	0x20002b60
	...

0800aa90 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800aa90:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800aa92:	4b08      	ldr	r3, [pc, #32]	; (800aab4 <Vector78+0x24>)
 800aa94:	6819      	ldr	r1, [r3, #0]
 800aa96:	0d89      	lsrs	r1, r1, #22
 800aa98:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 800aa9c:	058a      	lsls	r2, r1, #22
 800aa9e:	609a      	str	r2, [r3, #8]
  if (dma.streams[3].func)
 800aaa0:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <Vector78+0x28>)
 800aaa2:	69db      	ldr	r3, [r3, #28]
 800aaa4:	b113      	cbz	r3, 800aaac <Vector78+0x1c>
    dma.streams[3].func(dma.streams[3].param, flags);
 800aaa6:	4a04      	ldr	r2, [pc, #16]	; (800aab8 <Vector78+0x28>)
 800aaa8:	6a10      	ldr	r0, [r2, #32]
 800aaaa:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800aaac:	f7fc ff40 	bl	8007930 <_port_irq_epilogue>
}
 800aab0:	bd08      	pop	{r3, pc}
 800aab2:	bf00      	nop
 800aab4:	40026000 	.word	0x40026000
 800aab8:	20002b60 	.word	0x20002b60
 800aabc:	00000000 	.word	0x00000000

0800aac0 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800aac0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 800aac2:	4b08      	ldr	r3, [pc, #32]	; (800aae4 <Vector74+0x24>)
 800aac4:	6819      	ldr	r1, [r3, #0]
 800aac6:	0c09      	lsrs	r1, r1, #16
 800aac8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 800aacc:	040a      	lsls	r2, r1, #16
 800aace:	609a      	str	r2, [r3, #8]
  if (dma.streams[2].func)
 800aad0:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <Vector74+0x28>)
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	b113      	cbz	r3, 800aadc <Vector74+0x1c>
    dma.streams[2].func(dma.streams[2].param, flags);
 800aad6:	4a04      	ldr	r2, [pc, #16]	; (800aae8 <Vector74+0x28>)
 800aad8:	6990      	ldr	r0, [r2, #24]
 800aada:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800aadc:	f7fc ff28 	bl	8007930 <_port_irq_epilogue>
}
 800aae0:	bd08      	pop	{r3, pc}
 800aae2:	bf00      	nop
 800aae4:	40026000 	.word	0x40026000
 800aae8:	20002b60 	.word	0x20002b60
 800aaec:	00000000 	.word	0x00000000

0800aaf0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800aaf0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800aaf2:	4b08      	ldr	r3, [pc, #32]	; (800ab14 <Vector70+0x24>)
 800aaf4:	6819      	ldr	r1, [r3, #0]
 800aaf6:	0989      	lsrs	r1, r1, #6
 800aaf8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 800aafc:	018a      	lsls	r2, r1, #6
 800aafe:	609a      	str	r2, [r3, #8]
  if (dma.streams[1].func)
 800ab00:	4b05      	ldr	r3, [pc, #20]	; (800ab18 <Vector70+0x28>)
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	b113      	cbz	r3, 800ab0c <Vector70+0x1c>
    dma.streams[1].func(dma.streams[1].param, flags);
 800ab06:	4a04      	ldr	r2, [pc, #16]	; (800ab18 <Vector70+0x28>)
 800ab08:	6910      	ldr	r0, [r2, #16]
 800ab0a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800ab0c:	f7fc ff10 	bl	8007930 <_port_irq_epilogue>
}
 800ab10:	bd08      	pop	{r3, pc}
 800ab12:	bf00      	nop
 800ab14:	40026000 	.word	0x40026000
 800ab18:	20002b60 	.word	0x20002b60
 800ab1c:	00000000 	.word	0x00000000

0800ab20 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 800ab20:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800ab22:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <Vector6C+0x20>)
 800ab24:	6819      	ldr	r1, [r3, #0]
 800ab26:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800ab2a:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 800ab2c:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <Vector6C+0x24>)
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	b113      	cbz	r3, 800ab38 <Vector6C+0x18>
    dma.streams[0].func(dma.streams[0].param, flags);
 800ab32:	4a04      	ldr	r2, [pc, #16]	; (800ab44 <Vector6C+0x24>)
 800ab34:	6890      	ldr	r0, [r2, #8]
 800ab36:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800ab38:	f7fc fefa 	bl	8007930 <_port_irq_epilogue>
}
 800ab3c:	bd08      	pop	{r3, pc}
 800ab3e:	bf00      	nop
 800ab40:	40026000 	.word	0x40026000
 800ab44:	20002b60 	.word	0x20002b60
	...

0800ab50 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
 800ab50:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 800ab52:	4b2f      	ldr	r3, [pc, #188]	; (800ac10 <VectorE0+0xc0>)
 800ab54:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	f402 427c 	and.w	r2, r2, #64512	; 0xfc00
 800ab5c:	4014      	ands	r4, r2
  EXTI->PR = pr;
 800ab5e:	615c      	str	r4, [r3, #20]
  exti_serve_irq(pr, 10);
 800ab60:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800ab64:	d111      	bne.n	800ab8a <VectorE0+0x3a>
  exti_serve_irq(pr, 11);
 800ab66:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800ab6a:	d119      	bne.n	800aba0 <VectorE0+0x50>
  exti_serve_irq(pr, 12);
 800ab6c:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 800ab70:	d121      	bne.n	800abb6 <VectorE0+0x66>
  exti_serve_irq(pr, 13);
 800ab72:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800ab76:	d129      	bne.n	800abcc <VectorE0+0x7c>
  exti_serve_irq(pr, 14);
 800ab78:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 800ab7c:	d131      	bne.n	800abe2 <VectorE0+0x92>
  exti_serve_irq(pr, 15);
 800ab7e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800ab82:	d139      	bne.n	800abf8 <VectorE0+0xa8>
  OSAL_IRQ_EPILOGUE();
 800ab84:	f7fc fed4 	bl	8007930 <_port_irq_epilogue>
}
 800ab88:	bd10      	pop	{r4, pc}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800ab8a:	2320      	movs	r3, #32
 800ab8c:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 800ab90:	2100      	movs	r1, #0
 800ab92:	4820      	ldr	r0, [pc, #128]	; (800ac14 <VectorE0+0xc4>)
 800ab94:	f7fd fa4c 	bl	8008030 <chThdDequeueAllI>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f383 8811 	msr	BASEPRI, r3
 800ab9e:	e7e2      	b.n	800ab66 <VectorE0+0x16>
 800aba0:	2320      	movs	r3, #32
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	2100      	movs	r1, #0
 800aba8:	481b      	ldr	r0, [pc, #108]	; (800ac18 <VectorE0+0xc8>)
 800abaa:	f7fd fa41 	bl	8008030 <chThdDequeueAllI>
 800abae:	2300      	movs	r3, #0
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	e7da      	b.n	800ab6c <VectorE0+0x1c>
 800abb6:	2320      	movs	r3, #32
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	2100      	movs	r1, #0
 800abbe:	4817      	ldr	r0, [pc, #92]	; (800ac1c <VectorE0+0xcc>)
 800abc0:	f7fd fa36 	bl	8008030 <chThdDequeueAllI>
 800abc4:	2300      	movs	r3, #0
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	e7d2      	b.n	800ab72 <VectorE0+0x22>
 800abcc:	2320      	movs	r3, #32
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	2100      	movs	r1, #0
 800abd4:	4812      	ldr	r0, [pc, #72]	; (800ac20 <VectorE0+0xd0>)
 800abd6:	f7fd fa2b 	bl	8008030 <chThdDequeueAllI>
 800abda:	2300      	movs	r3, #0
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	e7ca      	b.n	800ab78 <VectorE0+0x28>
 800abe2:	2320      	movs	r3, #32
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	2100      	movs	r1, #0
 800abea:	480e      	ldr	r0, [pc, #56]	; (800ac24 <VectorE0+0xd4>)
 800abec:	f7fd fa20 	bl	8008030 <chThdDequeueAllI>
 800abf0:	2300      	movs	r3, #0
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	e7c2      	b.n	800ab7e <VectorE0+0x2e>
 800abf8:	2320      	movs	r3, #32
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	2100      	movs	r1, #0
 800ac00:	4809      	ldr	r0, [pc, #36]	; (800ac28 <VectorE0+0xd8>)
 800ac02:	f7fd fa15 	bl	8008030 <chThdDequeueAllI>
 800ac06:	2300      	movs	r3, #0
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	e7ba      	b.n	800ab84 <VectorE0+0x34>
 800ac0e:	bf00      	nop
 800ac10:	40013c00 	.word	0x40013c00
 800ac14:	20002a58 	.word	0x20002a58
 800ac18:	20002a60 	.word	0x20002a60
 800ac1c:	20002a68 	.word	0x20002a68
 800ac20:	20002a70 	.word	0x20002a70
 800ac24:	20002a78 	.word	0x20002a78
 800ac28:	20002a80 	.word	0x20002a80
 800ac2c:	00000000 	.word	0x00000000

0800ac30 <Vector9C>:
OSAL_IRQ_HANDLER(Vector9C) {
 800ac30:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 800ac32:	4b28      	ldr	r3, [pc, #160]	; (800acd4 <Vector9C+0xa4>)
 800ac34:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
 800ac3c:	4014      	ands	r4, r2
  EXTI->PR = pr;
 800ac3e:	615c      	str	r4, [r3, #20]
  exti_serve_irq(pr, 5);
 800ac40:	f014 0f20 	tst.w	r4, #32
 800ac44:	d10e      	bne.n	800ac64 <Vector9C+0x34>
  exti_serve_irq(pr, 6);
 800ac46:	f014 0f40 	tst.w	r4, #64	; 0x40
 800ac4a:	d116      	bne.n	800ac7a <Vector9C+0x4a>
  exti_serve_irq(pr, 7);
 800ac4c:	f014 0f80 	tst.w	r4, #128	; 0x80
 800ac50:	d11e      	bne.n	800ac90 <Vector9C+0x60>
  exti_serve_irq(pr, 8);
 800ac52:	f414 7f80 	tst.w	r4, #256	; 0x100
 800ac56:	d126      	bne.n	800aca6 <Vector9C+0x76>
  exti_serve_irq(pr, 9);
 800ac58:	f414 7f00 	tst.w	r4, #512	; 0x200
 800ac5c:	d12e      	bne.n	800acbc <Vector9C+0x8c>
  OSAL_IRQ_EPILOGUE();
 800ac5e:	f7fc fe67 	bl	8007930 <_port_irq_epilogue>
}
 800ac62:	bd10      	pop	{r4, pc}
 800ac64:	2320      	movs	r3, #32
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	481a      	ldr	r0, [pc, #104]	; (800acd8 <Vector9C+0xa8>)
 800ac6e:	f7fd f9df 	bl	8008030 <chThdDequeueAllI>
 800ac72:	2300      	movs	r3, #0
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	e7e5      	b.n	800ac46 <Vector9C+0x16>
 800ac7a:	2320      	movs	r3, #32
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	2100      	movs	r1, #0
 800ac82:	4816      	ldr	r0, [pc, #88]	; (800acdc <Vector9C+0xac>)
 800ac84:	f7fd f9d4 	bl	8008030 <chThdDequeueAllI>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	e7dd      	b.n	800ac4c <Vector9C+0x1c>
 800ac90:	2320      	movs	r3, #32
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	2100      	movs	r1, #0
 800ac98:	4811      	ldr	r0, [pc, #68]	; (800ace0 <Vector9C+0xb0>)
 800ac9a:	f7fd f9c9 	bl	8008030 <chThdDequeueAllI>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	e7d5      	b.n	800ac52 <Vector9C+0x22>
 800aca6:	2320      	movs	r3, #32
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	2100      	movs	r1, #0
 800acae:	480d      	ldr	r0, [pc, #52]	; (800ace4 <Vector9C+0xb4>)
 800acb0:	f7fd f9be 	bl	8008030 <chThdDequeueAllI>
 800acb4:	2300      	movs	r3, #0
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	e7cd      	b.n	800ac58 <Vector9C+0x28>
 800acbc:	2320      	movs	r3, #32
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	2100      	movs	r1, #0
 800acc4:	4808      	ldr	r0, [pc, #32]	; (800ace8 <Vector9C+0xb8>)
 800acc6:	f7fd f9b3 	bl	8008030 <chThdDequeueAllI>
 800acca:	2300      	movs	r3, #0
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	e7c5      	b.n	800ac5e <Vector9C+0x2e>
 800acd2:	bf00      	nop
 800acd4:	40013c00 	.word	0x40013c00
 800acd8:	20002a30 	.word	0x20002a30
 800acdc:	20002a38 	.word	0x20002a38
 800ace0:	20002a40 	.word	0x20002a40
 800ace4:	20002a48 	.word	0x20002a48
 800ace8:	20002a50 	.word	0x20002a50
 800acec:	00000000 	.word	0x00000000

0800acf0 <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
 800acf0:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 800acf2:	4a0b      	ldr	r2, [pc, #44]	; (800ad20 <Vector68+0x30>)
 800acf4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 800acf6:	6811      	ldr	r1, [r2, #0]
 800acf8:	f001 0110 	and.w	r1, r1, #16
 800acfc:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800acfe:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 4);
 800ad00:	b913      	cbnz	r3, 800ad08 <Vector68+0x18>
  OSAL_IRQ_EPILOGUE();
 800ad02:	f7fc fe15 	bl	8007930 <_port_irq_epilogue>
}
 800ad06:	bd08      	pop	{r3, pc}
 800ad08:	2320      	movs	r3, #32
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	2100      	movs	r1, #0
 800ad10:	4804      	ldr	r0, [pc, #16]	; (800ad24 <Vector68+0x34>)
 800ad12:	f7fd f98d 	bl	8008030 <chThdDequeueAllI>
 800ad16:	2300      	movs	r3, #0
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	e7f1      	b.n	800ad02 <Vector68+0x12>
 800ad1e:	bf00      	nop
 800ad20:	40013c00 	.word	0x40013c00
 800ad24:	20002a28 	.word	0x20002a28
	...

0800ad30 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
 800ad30:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 800ad32:	4a0b      	ldr	r2, [pc, #44]	; (800ad60 <Vector64+0x30>)
 800ad34:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 800ad36:	6811      	ldr	r1, [r2, #0]
 800ad38:	f001 0108 	and.w	r1, r1, #8
 800ad3c:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800ad3e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 3);
 800ad40:	b913      	cbnz	r3, 800ad48 <Vector64+0x18>
  OSAL_IRQ_EPILOGUE();
 800ad42:	f7fc fdf5 	bl	8007930 <_port_irq_epilogue>
}
 800ad46:	bd08      	pop	{r3, pc}
 800ad48:	2320      	movs	r3, #32
 800ad4a:	f383 8811 	msr	BASEPRI, r3
 800ad4e:	2100      	movs	r1, #0
 800ad50:	4804      	ldr	r0, [pc, #16]	; (800ad64 <Vector64+0x34>)
 800ad52:	f7fd f96d 	bl	8008030 <chThdDequeueAllI>
 800ad56:	2300      	movs	r3, #0
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	e7f1      	b.n	800ad42 <Vector64+0x12>
 800ad5e:	bf00      	nop
 800ad60:	40013c00 	.word	0x40013c00
 800ad64:	20002a20 	.word	0x20002a20
	...

0800ad70 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
 800ad70:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 800ad72:	4a0b      	ldr	r2, [pc, #44]	; (800ada0 <Vector60+0x30>)
 800ad74:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 800ad76:	6811      	ldr	r1, [r2, #0]
 800ad78:	f001 0104 	and.w	r1, r1, #4
 800ad7c:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800ad7e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 2);
 800ad80:	b913      	cbnz	r3, 800ad88 <Vector60+0x18>
  OSAL_IRQ_EPILOGUE();
 800ad82:	f7fc fdd5 	bl	8007930 <_port_irq_epilogue>
}
 800ad86:	bd08      	pop	{r3, pc}
 800ad88:	2320      	movs	r3, #32
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	2100      	movs	r1, #0
 800ad90:	4804      	ldr	r0, [pc, #16]	; (800ada4 <Vector60+0x34>)
 800ad92:	f7fd f94d 	bl	8008030 <chThdDequeueAllI>
 800ad96:	2300      	movs	r3, #0
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	e7f1      	b.n	800ad82 <Vector60+0x12>
 800ad9e:	bf00      	nop
 800ada0:	40013c00 	.word	0x40013c00
 800ada4:	20002a18 	.word	0x20002a18
	...

0800adb0 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
 800adb0:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 800adb2:	4a0b      	ldr	r2, [pc, #44]	; (800ade0 <Vector5C+0x30>)
 800adb4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 800adb6:	6811      	ldr	r1, [r2, #0]
 800adb8:	f001 0102 	and.w	r1, r1, #2
 800adbc:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800adbe:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 1);
 800adc0:	b913      	cbnz	r3, 800adc8 <Vector5C+0x18>
  OSAL_IRQ_EPILOGUE();
 800adc2:	f7fc fdb5 	bl	8007930 <_port_irq_epilogue>
}
 800adc6:	bd08      	pop	{r3, pc}
 800adc8:	2320      	movs	r3, #32
 800adca:	f383 8811 	msr	BASEPRI, r3
 800adce:	2100      	movs	r1, #0
 800add0:	4804      	ldr	r0, [pc, #16]	; (800ade4 <Vector5C+0x34>)
 800add2:	f7fd f92d 	bl	8008030 <chThdDequeueAllI>
 800add6:	2300      	movs	r3, #0
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	e7f1      	b.n	800adc2 <Vector5C+0x12>
 800adde:	bf00      	nop
 800ade0:	40013c00 	.word	0x40013c00
 800ade4:	20002a10 	.word	0x20002a10
	...

0800adf0 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
 800adf0:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 800adf2:	4a0b      	ldr	r2, [pc, #44]	; (800ae20 <Vector58+0x30>)
 800adf4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 800adf6:	6811      	ldr	r1, [r2, #0]
 800adf8:	f001 0101 	and.w	r1, r1, #1
 800adfc:	400b      	ands	r3, r1
  EXTI->PR = pr;
 800adfe:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 0);
 800ae00:	b913      	cbnz	r3, 800ae08 <Vector58+0x18>
  OSAL_IRQ_EPILOGUE();
 800ae02:	f7fc fd95 	bl	8007930 <_port_irq_epilogue>
}
 800ae06:	bd08      	pop	{r3, pc}
 800ae08:	2320      	movs	r3, #32
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	2100      	movs	r1, #0
 800ae10:	4804      	ldr	r0, [pc, #16]	; (800ae24 <Vector58+0x34>)
 800ae12:	f7fd f90d 	bl	8008030 <chThdDequeueAllI>
 800ae16:	2300      	movs	r3, #0
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	e7f1      	b.n	800ae02 <Vector58+0x12>
 800ae1e:	bf00      	nop
 800ae20:	40013c00 	.word	0x40013c00
 800ae24:	20002a08 	.word	0x20002a08
	...

0800ae30 <spiStartSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiStartSend(SPIDriver *spip, size_t n, const void *txbuf) {
 800ae30:	b510      	push	{r4, lr}
 800ae32:	2420      	movs	r4, #32
 800ae34:	f384 8811 	msr	BASEPRI, r4

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartSendI(spip, n, txbuf);
 800ae38:	2403      	movs	r4, #3
 800ae3a:	7004      	strb	r4, [r0, #0]
 800ae3c:	f7fe fc70 	bl	8009720 <spi_lld_send>
 800ae40:	2300      	movs	r3, #0
 800ae42:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800ae46:	bd10      	pop	{r4, pc}
	...

0800ae50 <spiUnselect>:
 800ae50:	2320      	movs	r3, #32
 800ae52:	f383 8811 	msr	BASEPRI, r3
  spiUnselectI(spip);
 800ae56:	6843      	ldr	r3, [r0, #4]
 800ae58:	689a      	ldr	r2, [r3, #8]
 800ae5a:	68d9      	ldr	r1, [r3, #12]
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	408b      	lsls	r3, r1
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	8313      	strh	r3, [r2, #24]
 800ae64:	2300      	movs	r3, #0
 800ae66:	f383 8811 	msr	BASEPRI, r3
}
 800ae6a:	4770      	bx	lr
 800ae6c:	0000      	movs	r0, r0
	...

0800ae70 <spiSelect>:
 800ae70:	2320      	movs	r3, #32
 800ae72:	f383 8811 	msr	BASEPRI, r3
  spiSelectI(spip);
 800ae76:	6843      	ldr	r3, [r0, #4]
 800ae78:	689a      	ldr	r2, [r3, #8]
 800ae7a:	68d9      	ldr	r1, [r3, #12]
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	408b      	lsls	r3, r1
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	8353      	strh	r3, [r2, #26]
 800ae84:	2300      	movs	r3, #0
 800ae86:	f383 8811 	msr	BASEPRI, r3
}
 800ae8a:	4770      	bx	lr
 800ae8c:	0000      	movs	r0, r0
	...

0800ae90 <spiStart>:
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 800ae90:	b510      	push	{r4, lr}
 800ae92:	4604      	mov	r4, r0
 800ae94:	2320      	movs	r3, #32
 800ae96:	f383 8811 	msr	BASEPRI, r3
  spip->config = config;
 800ae9a:	6041      	str	r1, [r0, #4]
  spi_lld_start(spip);
 800ae9c:	f7fe fe70 	bl	8009b80 <spi_lld_start>
  spip->state = SPI_READY;
 800aea0:	2302      	movs	r3, #2
 800aea2:	7023      	strb	r3, [r4, #0]
 800aea4:	2300      	movs	r3, #0
 800aea6:	f383 8811 	msr	BASEPRI, r3
}
 800aeaa:	bd10      	pop	{r4, pc}
 800aeac:	0000      	movs	r0, r0
	...

0800aeb0 <sdStart>:
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 800aeb0:	b510      	push	{r4, lr}
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	2320      	movs	r3, #32
 800aeb6:	f383 8811 	msr	BASEPRI, r3
  sd_lld_start(sdp, config);
 800aeba:	f7fe fda1 	bl	8009a00 <sd_lld_start>
  sdp->state = SD_READY;
 800aebe:	2302      	movs	r3, #2
 800aec0:	7223      	strb	r3, [r4, #8]
 800aec2:	2300      	movs	r3, #0
 800aec4:	f383 8811 	msr	BASEPRI, r3
}
 800aec8:	bd10      	pop	{r4, pc}
 800aeca:	bf00      	nop
 800aecc:	0000      	movs	r0, r0
	...

0800aed0 <palWaitLineTimeout>:
 * @retval MSG_RESET    if the event has been disabled while the thread was
 *                      waiting for an edge.
 *
 * @api
 */
msg_t palWaitLineTimeout(ioline_t line, sysinterval_t timeout) {
 800aed0:	b508      	push	{r3, lr}
 800aed2:	2320      	movs	r3, #32
 800aed4:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();
  msg = palWaitLineTimeoutS(line, timeout);
 800aed8:	f7ff f8a2 	bl	800a020 <palWaitLineTimeoutS>
 800aedc:	2300      	movs	r3, #0
 800aede:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
  return msg;
}
 800aee2:	bd08      	pop	{r3, pc}
	...

0800aef0 <stGetCounter>:
  return (systime_t)STM32_ST_TIM->CNT;
 800aef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aef4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 * @api
 */
systime_t stGetCounter(void) {

  return st_lld_get_counter();
}
 800aef6:	4770      	bx	lr
	...

0800af00 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 800af00:	b538      	push	{r3, r4, r5, lr}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800af02:	4b1e      	ldr	r3, [pc, #120]	; (800af7c <chVTDoResetI+0x7c>)
 800af04:	69db      	ldr	r3, [r3, #28]
 800af06:	4283      	cmp	r3, r0
 800af08:	d010      	beq.n	800af2c <chVTDoResetI+0x2c>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 800af0a:	6843      	ldr	r3, [r0, #4]
 800af0c:	6802      	ldr	r2, [r0, #0]
 800af0e:	601a      	str	r2, [r3, #0]
    vtp->next->prev = vtp->prev;
 800af10:	6803      	ldr	r3, [r0, #0]
 800af12:	6842      	ldr	r2, [r0, #4]
 800af14:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 800af16:	2300      	movs	r3, #0
 800af18:	60c3      	str	r3, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800af1a:	6803      	ldr	r3, [r0, #0]
 800af1c:	4a18      	ldr	r2, [pc, #96]	; (800af80 <chVTDoResetI+0x80>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d003      	beq.n	800af2a <chVTDoResetI+0x2a>
      vtp->next->delta += vtp->delta;
 800af22:	6881      	ldr	r1, [r0, #8]
 800af24:	689a      	ldr	r2, [r3, #8]
 800af26:	440a      	add	r2, r1
 800af28:	609a      	str	r2, [r3, #8]
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800af2a:	bd38      	pop	{r3, r4, r5, pc}
  ch.vtlist.next = vtp->next;
 800af2c:	6801      	ldr	r1, [r0, #0]
 800af2e:	4a13      	ldr	r2, [pc, #76]	; (800af7c <chVTDoResetI+0x7c>)
 800af30:	4613      	mov	r3, r2
 800af32:	f843 1f1c 	str.w	r1, [r3, #28]!
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 800af36:	604b      	str	r3, [r1, #4]
  vtp->func = NULL;
 800af38:	2100      	movs	r1, #0
 800af3a:	60c1      	str	r1, [r0, #12]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800af3c:	69d2      	ldr	r2, [r2, #28]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d016      	beq.n	800af70 <chVTDoResetI+0x70>
  ch.vtlist.next->delta += vtp->delta;
 800af42:	6881      	ldr	r1, [r0, #8]
 800af44:	6893      	ldr	r3, [r2, #8]
 800af46:	440b      	add	r3, r1
 800af48:	6093      	str	r3, [r2, #8]
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 800af4a:	4d0c      	ldr	r5, [pc, #48]	; (800af7c <chVTDoResetI+0x7c>)
 800af4c:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800af4e:	f7ff ffcf 	bl	800aef0 <stGetCounter>
  return (sysinterval_t)((systime_t)(end - start));
 800af52:	1b02      	subs	r2, r0, r4
  if (nowdelta >= ch.vtlist.next->delta) {
 800af54:	69eb      	ldr	r3, [r5, #28]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	4293      	cmp	r3, r2
 800af5a:	d9e6      	bls.n	800af2a <chVTDoResetI+0x2a>
  delta = ch.vtlist.next->delta - nowdelta;
 800af5c:	1a24      	subs	r4, r4, r0
 800af5e:	441c      	add	r4, r3
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800af60:	2c01      	cmp	r4, #1
 800af62:	d908      	bls.n	800af76 <chVTDoResetI+0x76>
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
 800af64:	4a05      	ldr	r2, [pc, #20]	; (800af7c <chVTDoResetI+0x7c>)
 800af66:	6a90      	ldr	r0, [r2, #40]	; 0x28
  stSetAlarm(time);
 800af68:	4418      	add	r0, r3
 800af6a:	f7fe ff59 	bl	8009e20 <stSetAlarm>
 800af6e:	e7dc      	b.n	800af2a <chVTDoResetI+0x2a>
  stStopAlarm();
 800af70:	f7fe ff5e 	bl	8009e30 <stStopAlarm>
    return;
 800af74:	e7d9      	b.n	800af2a <chVTDoResetI+0x2a>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800af76:	1c93      	adds	r3, r2, #2
 800af78:	e7f4      	b.n	800af64 <chVTDoResetI+0x64>
 800af7a:	bf00      	nop
 800af7c:	20001a18 	.word	0x20001a18
 800af80:	20001a34 	.word	0x20001a34
	...

0800af90 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 800af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af92:	4606      	mov	r6, r0
 800af94:	460f      	mov	r7, r1
  vtp->par = par;
 800af96:	6103      	str	r3, [r0, #16]
  vtp->func = vtfunc;
 800af98:	60c2      	str	r2, [r0, #12]
  return stGetCounter();
 800af9a:	f7ff ffa9 	bl	800aef0 <stGetCounter>
 800af9e:	4604      	mov	r4, r0
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800afa0:	2f01      	cmp	r7, #1
 800afa2:	d90d      	bls.n	800afc0 <chVTDoSetI+0x30>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800afa4:	4b1b      	ldr	r3, [pc, #108]	; (800b014 <chVTDoSetI+0x84>)
 800afa6:	f853 5f1c 	ldr.w	r5, [r3, #28]!
 800afaa:	429d      	cmp	r5, r3
 800afac:	d00a      	beq.n	800afc4 <chVTDoSetI+0x34>
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800afae:	4b19      	ldr	r3, [pc, #100]	; (800b014 <chVTDoSetI+0x84>)
 800afb0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800afb2:	1a24      	subs	r4, r4, r0
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 800afb4:	193c      	adds	r4, r7, r4
 800afb6:	d313      	bcc.n	800afe0 <chVTDoSetI+0x50>
      delta -= p->delta;
 800afb8:	68ab      	ldr	r3, [r5, #8]
 800afba:	1ae4      	subs	r4, r4, r3
      p = p->next;
 800afbc:	682d      	ldr	r5, [r5, #0]
 800afbe:	e018      	b.n	800aff2 <chVTDoSetI+0x62>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800afc0:	2702      	movs	r7, #2
 800afc2:	e7ef      	b.n	800afa4 <chVTDoSetI+0x14>
      ch.vtlist.lasttime = now;
 800afc4:	4b13      	ldr	r3, [pc, #76]	; (800b014 <chVTDoSetI+0x84>)
 800afc6:	629c      	str	r4, [r3, #40]	; 0x28
      ch.vtlist.next = vtp;
 800afc8:	61de      	str	r6, [r3, #28]
      ch.vtlist.prev = vtp;
 800afca:	621e      	str	r6, [r3, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 800afcc:	f103 021c 	add.w	r2, r3, #28
 800afd0:	6032      	str	r2, [r6, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800afd2:	6072      	str	r2, [r6, #4]
      vtp->delta = delay;
 800afd4:	60b7      	str	r7, [r6, #8]
      port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 800afd6:	6a98      	ldr	r0, [r3, #40]	; 0x28
  stStartAlarm(time);
 800afd8:	4438      	add	r0, r7
 800afda:	f7fe ff31 	bl	8009e40 <stStartAlarm>
      return;
 800afde:	e018      	b.n	800b012 <chVTDoSetI+0x82>
    else if (delta < p->delta) {
 800afe0:	68ab      	ldr	r3, [r5, #8]
 800afe2:	42a3      	cmp	r3, r4
 800afe4:	d905      	bls.n	800aff2 <chVTDoSetI+0x62>
  stSetAlarm(time);
 800afe6:	4420      	add	r0, r4
 800afe8:	f7fe ff1a 	bl	8009e20 <stSetAlarm>
 800afec:	e001      	b.n	800aff2 <chVTDoSetI+0x62>
    delta -= p->delta;
 800afee:	1ae4      	subs	r4, r4, r3
    p = p->next;
 800aff0:	682d      	ldr	r5, [r5, #0]
  while (p->delta < delta) {
 800aff2:	68ab      	ldr	r3, [r5, #8]
 800aff4:	42a3      	cmp	r3, r4
 800aff6:	d3fa      	bcc.n	800afee <chVTDoSetI+0x5e>
  vtp->next = p;
 800aff8:	6035      	str	r5, [r6, #0]
  vtp->prev = vtp->next->prev;
 800affa:	686b      	ldr	r3, [r5, #4]
 800affc:	6073      	str	r3, [r6, #4]
  vtp->prev->next = vtp;
 800affe:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
 800b000:	606e      	str	r6, [r5, #4]
  vtp->delta = delta;
 800b002:	60b4      	str	r4, [r6, #8]
  p->delta -= delta;
 800b004:	68ab      	ldr	r3, [r5, #8]
 800b006:	1b1c      	subs	r4, r3, r4
 800b008:	60ac      	str	r4, [r5, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 800b00a:	4b02      	ldr	r3, [pc, #8]	; (800b014 <chVTDoSetI+0x84>)
 800b00c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b010:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b014:	20001a18 	.word	0x20001a18
	...

0800b020 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 800b020:	b510      	push	{r4, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	4604      	mov	r4, r0
  if (TIME_INFINITE != timeout) {
 800b026:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800b02a:	d012      	beq.n	800b052 <chSchGoSleepTimeoutS+0x32>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 800b02c:	4b0a      	ldr	r3, [pc, #40]	; (800b058 <chSchGoSleepTimeoutS+0x38>)
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	4a0a      	ldr	r2, [pc, #40]	; (800b05c <chSchGoSleepTimeoutS+0x3c>)
 800b032:	a801      	add	r0, sp, #4
 800b034:	f7ff ffac 	bl	800af90 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800b038:	4620      	mov	r0, r4
 800b03a:	f7ff fab9 	bl	800a5b0 <chSchGoSleepS>
 800b03e:	9b04      	ldr	r3, [sp, #16]
    if (chVTIsArmedI(&vt)) {
 800b040:	b113      	cbz	r3, 800b048 <chSchGoSleepTimeoutS+0x28>
      chVTDoResetI(&vt);
 800b042:	a801      	add	r0, sp, #4
 800b044:	f7ff ff5c 	bl	800af00 <chVTDoResetI>
  return currp->u.rdymsg;
 800b048:	4b03      	ldr	r3, [pc, #12]	; (800b058 <chSchGoSleepTimeoutS+0x38>)
 800b04a:	699b      	ldr	r3, [r3, #24]
}
 800b04c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b04e:	b006      	add	sp, #24
 800b050:	bd10      	pop	{r4, pc}
    chSchGoSleepS(newstate);
 800b052:	f7ff faad 	bl	800a5b0 <chSchGoSleepS>
 800b056:	e7f7      	b.n	800b048 <chSchGoSleepTimeoutS+0x28>
 800b058:	20001a18 	.word	0x20001a18
 800b05c:	0800a681 	.word	0x0800a681

0800b060 <chSysTimerHandlerI>:
void chSysTimerHandlerI(void) {
 800b060:	b570      	push	{r4, r5, r6, lr}
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 800b062:	4b22      	ldr	r3, [pc, #136]	; (800b0ec <chSysTimerHandlerI+0x8c>)
 800b064:	69dc      	ldr	r4, [r3, #28]
  return stGetCounter();
 800b066:	f7ff ff43 	bl	800aef0 <stGetCounter>
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800b06a:	4b20      	ldr	r3, [pc, #128]	; (800b0ec <chSysTimerHandlerI+0x8c>)
 800b06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06e:	1ac5      	subs	r5, r0, r3

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 800b070:	68a2      	ldr	r2, [r4, #8]
 800b072:	4295      	cmp	r5, r2
 800b074:	d223      	bcs.n	800b0be <chSysTimerHandlerI+0x5e>
    }
    while (vtp->delta <= nowdelta);
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800b076:	4a1d      	ldr	r2, [pc, #116]	; (800b0ec <chSysTimerHandlerI+0x8c>)
 800b078:	f852 1f1c 	ldr.w	r1, [r2, #28]!
 800b07c:	4291      	cmp	r1, r2
 800b07e:	d00e      	beq.n	800b09e <chSysTimerHandlerI+0x3e>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 800b080:	4d1a      	ldr	r5, [pc, #104]	; (800b0ec <chSysTimerHandlerI+0x8c>)
 800b082:	62a8      	str	r0, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800b084:	1a1b      	subs	r3, r3, r0
 800b086:	688a      	ldr	r2, [r1, #8]
 800b088:	4413      	add	r3, r2
 800b08a:	608b      	str	r3, [r1, #8]

  /* Recalculating the next alarm time.*/
  delta = vtp->delta - chTimeDiffX(ch.vtlist.lasttime, now);
 800b08c:	68a2      	ldr	r2, [r4, #8]
 800b08e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b090:	1a1b      	subs	r3, r3, r0
 800b092:	4413      	add	r3, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800b094:	2b01      	cmp	r3, #1
 800b096:	d926      	bls.n	800b0e6 <chSysTimerHandlerI+0x86>
  stSetAlarm(time);
 800b098:	4418      	add	r0, r3
 800b09a:	f7fe fec1 	bl	8009e20 <stSetAlarm>
}
 800b09e:	bd70      	pop	{r4, r5, r6, pc}
  stStopAlarm();
 800b0a0:	f7fe fec6 	bl	8009e30 <stStopAlarm>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f383 8811 	msr	BASEPRI, r3
      fn(vtp->par);
 800b0aa:	6920      	ldr	r0, [r4, #16]
 800b0ac:	47b0      	blx	r6
 800b0ae:	2320      	movs	r3, #32
 800b0b0:	f383 8811 	msr	BASEPRI, r3
      vtp = ch.vtlist.next;
 800b0b4:	4b0d      	ldr	r3, [pc, #52]	; (800b0ec <chSysTimerHandlerI+0x8c>)
 800b0b6:	69dc      	ldr	r4, [r3, #28]
    while (vtp->delta <= nowdelta);
 800b0b8:	68a3      	ldr	r3, [r4, #8]
 800b0ba:	429d      	cmp	r5, r3
 800b0bc:	d3d3      	bcc.n	800b066 <chSysTimerHandlerI+0x6>
      ch.vtlist.lasttime += vtp->delta;
 800b0be:	68a1      	ldr	r1, [r4, #8]
 800b0c0:	4b0a      	ldr	r3, [pc, #40]	; (800b0ec <chSysTimerHandlerI+0x8c>)
 800b0c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0c4:	440a      	add	r2, r1
 800b0c6:	629a      	str	r2, [r3, #40]	; 0x28
      nowdelta -= vtp->delta;
 800b0c8:	68a2      	ldr	r2, [r4, #8]
 800b0ca:	1aad      	subs	r5, r5, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800b0cc:	6821      	ldr	r1, [r4, #0]
 800b0ce:	f103 021c 	add.w	r2, r3, #28
 800b0d2:	604a      	str	r2, [r1, #4]
      ch.vtlist.next = vtp->next;
 800b0d4:	6821      	ldr	r1, [r4, #0]
 800b0d6:	61d9      	str	r1, [r3, #28]
      fn = vtp->func;
 800b0d8:	68e6      	ldr	r6, [r4, #12]
      vtp->func = NULL;
 800b0da:	2100      	movs	r1, #0
 800b0dc:	60e1      	str	r1, [r4, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800b0de:	69db      	ldr	r3, [r3, #28]
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d1df      	bne.n	800b0a4 <chSysTimerHandlerI+0x44>
 800b0e4:	e7dc      	b.n	800b0a0 <chSysTimerHandlerI+0x40>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	e7d6      	b.n	800b098 <chSysTimerHandlerI+0x38>
 800b0ea:	bf00      	nop
 800b0ec:	20001a18 	.word	0x20001a18

0800b0f0 <st_lld_serve_interrupt>:

/**
 * @brief   IRQ handling code.
 */
void st_lld_serve_interrupt(void) {
 800b0f0:	b508      	push	{r3, lr}
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 800b0f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b0f6:	6913      	ldr	r3, [r2, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 800b0f8:	68d1      	ldr	r1, [r2, #12]
 800b0fa:	b2c9      	uxtb	r1, r1
 800b0fc:	400b      	ands	r3, r1
  timp->SR = ~sr;
 800b0fe:	43d9      	mvns	r1, r3
 800b100:	6111      	str	r1, [r2, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
 800b102:	f013 0f02 	tst.w	r3, #2
 800b106:	d100      	bne.n	800b10a <st_lld_serve_interrupt+0x1a>
      st_callbacks[2](3U);
    }
  }
#endif
#endif
}
 800b108:	bd08      	pop	{r3, pc}
 800b10a:	2320      	movs	r3, #32
 800b10c:	f383 8811 	msr	BASEPRI, r3
  chSysTimerHandlerI();
 800b110:	f7ff ffa6 	bl	800b060 <chSysTimerHandlerI>
 800b114:	2300      	movs	r3, #0
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	e7f5      	b.n	800b108 <st_lld_serve_interrupt+0x18>
 800b11c:	0000      	movs	r0, r0
	...

0800b120 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800b120:	b508      	push	{r3, lr}
  st_lld_serve_interrupt();
 800b122:	f7ff ffe5 	bl	800b0f0 <st_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 800b126:	f7fc fc03 	bl	8007930 <_port_irq_epilogue>
}
 800b12a:	bd08      	pop	{r3, pc}
 800b12c:	0000      	movs	r0, r0
	...

0800b130 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 800b130:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 800b132:	f7fe fddd 	bl	8009cf0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 800b136:	f7fe fb2b 	bl	8009790 <_pal_lld_init>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 800b13a:	f7fe fe69 	bl	8009e10 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 800b13e:	f7fe ff67 	bl	800a010 <spiInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800b142:	f7fe fe85 	bl	8009e50 <stInit>
#endif
}
 800b146:	bd08      	pop	{r3, pc}
	...

0800b150 <__init_ram_areas>:
/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 800b150:	4a0b      	ldr	r2, [pc, #44]	; (800b180 <__init_ram_areas+0x30>)
 800b152:	e009      	b.n	800b168 <__init_ram_areas+0x18>
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 800b154:	2100      	movs	r1, #0
 800b156:	f843 1b04 	str.w	r1, [r3], #4
    while (p < rap->no_init_area) {
 800b15a:	68d1      	ldr	r1, [r2, #12]
 800b15c:	4299      	cmp	r1, r3
 800b15e:	d8f9      	bhi.n	800b154 <__init_ram_areas+0x4>
      p++;
    }
    rap++;
 800b160:	3210      	adds	r2, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800b162:	4b08      	ldr	r3, [pc, #32]	; (800b184 <__init_ram_areas+0x34>)
 800b164:	429a      	cmp	r2, r3
 800b166:	d209      	bcs.n	800b17c <__init_ram_areas+0x2c>
    uint32_t *tp = rap->init_text_area;
 800b168:	6810      	ldr	r0, [r2, #0]
    uint32_t *p = rap->init_area;
 800b16a:	6853      	ldr	r3, [r2, #4]
    while (p < rap->clear_area) {
 800b16c:	6891      	ldr	r1, [r2, #8]
 800b16e:	4299      	cmp	r1, r3
 800b170:	d9f3      	bls.n	800b15a <__init_ram_areas+0xa>
      *p = *tp;
 800b172:	f850 1b04 	ldr.w	r1, [r0], #4
 800b176:	f843 1b04 	str.w	r1, [r3], #4
      tp++;
 800b17a:	e7f7      	b.n	800b16c <__init_ram_areas+0x1c>
#endif
}
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	0800e47c 	.word	0x0800e47c
 800b184:	0800e4fc 	.word	0x0800e4fc
	...

0800b190 <__default_exit>:
  while (true) {
 800b190:	e7fe      	b.n	800b190 <__default_exit>
 800b192:	bf00      	nop
	...

0800b1a0 <__late_init>:
void __late_init(void) {}
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
	...

0800b1b0 <__core_init>:
}
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop

0800b1b4 <_strtoul_l.isra.0>:
 800b1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b8:	4d4b      	ldr	r5, [pc, #300]	; (800b2e8 <_strtoul_l.isra.0+0x134>)
 800b1ba:	4686      	mov	lr, r0
 800b1bc:	468c      	mov	ip, r1
 800b1be:	4660      	mov	r0, ip
 800b1c0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b1c4:	5d2e      	ldrb	r6, [r5, r4]
 800b1c6:	f016 0608 	ands.w	r6, r6, #8
 800b1ca:	d1f8      	bne.n	800b1be <_strtoul_l.isra.0+0xa>
 800b1cc:	2c2d      	cmp	r4, #45	; 0x2d
 800b1ce:	d057      	beq.n	800b280 <_strtoul_l.isra.0+0xcc>
 800b1d0:	2c2b      	cmp	r4, #43	; 0x2b
 800b1d2:	bf0a      	itet	eq
 800b1d4:	f89c 5000 	ldrbeq.w	r5, [ip]
 800b1d8:	4625      	movne	r5, r4
 800b1da:	f100 0c02 	addeq.w	ip, r0, #2
 800b1de:	b15b      	cbz	r3, 800b1f8 <_strtoul_l.isra.0+0x44>
 800b1e0:	2b10      	cmp	r3, #16
 800b1e2:	d053      	beq.n	800b28c <_strtoul_l.isra.0+0xd8>
 800b1e4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b1e8:	fbb8 f8f3 	udiv	r8, r8, r3
 800b1ec:	fb03 fa08 	mul.w	sl, r3, r8
 800b1f0:	ea6f 0a0a 	mvn.w	sl, sl
 800b1f4:	4699      	mov	r9, r3
 800b1f6:	e007      	b.n	800b208 <_strtoul_l.isra.0+0x54>
 800b1f8:	2d30      	cmp	r5, #48	; 0x30
 800b1fa:	d05b      	beq.n	800b2b4 <_strtoul_l.isra.0+0x100>
 800b1fc:	230a      	movs	r3, #10
 800b1fe:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800b2ec <_strtoul_l.isra.0+0x138>
 800b202:	4699      	mov	r9, r3
 800b204:	f04f 0a05 	mov.w	sl, #5
 800b208:	2700      	movs	r7, #0
 800b20a:	4638      	mov	r0, r7
 800b20c:	e007      	b.n	800b21e <_strtoul_l.isra.0+0x6a>
 800b20e:	4540      	cmp	r0, r8
 800b210:	d813      	bhi.n	800b23a <_strtoul_l.isra.0+0x86>
 800b212:	d026      	beq.n	800b262 <_strtoul_l.isra.0+0xae>
 800b214:	fb09 4000 	mla	r0, r9, r0, r4
 800b218:	2701      	movs	r7, #1
 800b21a:	f81c 5b01 	ldrb.w	r5, [ip], #1
 800b21e:	f1a5 0430 	sub.w	r4, r5, #48	; 0x30
 800b222:	2c09      	cmp	r4, #9
 800b224:	d905      	bls.n	800b232 <_strtoul_l.isra.0+0x7e>
 800b226:	f1a5 0441 	sub.w	r4, r5, #65	; 0x41
 800b22a:	2c19      	cmp	r4, #25
 800b22c:	d808      	bhi.n	800b240 <_strtoul_l.isra.0+0x8c>
 800b22e:	f1a5 0437 	sub.w	r4, r5, #55	; 0x37
 800b232:	42a3      	cmp	r3, r4
 800b234:	dd0c      	ble.n	800b250 <_strtoul_l.isra.0+0x9c>
 800b236:	2f00      	cmp	r7, #0
 800b238:	dae9      	bge.n	800b20e <_strtoul_l.isra.0+0x5a>
 800b23a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b23e:	e7ec      	b.n	800b21a <_strtoul_l.isra.0+0x66>
 800b240:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
 800b244:	2c19      	cmp	r4, #25
 800b246:	d803      	bhi.n	800b250 <_strtoul_l.isra.0+0x9c>
 800b248:	f1a5 0457 	sub.w	r4, r5, #87	; 0x57
 800b24c:	42a3      	cmp	r3, r4
 800b24e:	dcf2      	bgt.n	800b236 <_strtoul_l.isra.0+0x82>
 800b250:	2f00      	cmp	r7, #0
 800b252:	db0b      	blt.n	800b26c <_strtoul_l.isra.0+0xb8>
 800b254:	b106      	cbz	r6, 800b258 <_strtoul_l.isra.0+0xa4>
 800b256:	4240      	negs	r0, r0
 800b258:	b10a      	cbz	r2, 800b25e <_strtoul_l.isra.0+0xaa>
 800b25a:	b977      	cbnz	r7, 800b27a <_strtoul_l.isra.0+0xc6>
 800b25c:	6011      	str	r1, [r2, #0]
 800b25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b262:	4554      	cmp	r4, sl
 800b264:	ddd6      	ble.n	800b214 <_strtoul_l.isra.0+0x60>
 800b266:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b26a:	e7d6      	b.n	800b21a <_strtoul_l.isra.0+0x66>
 800b26c:	2322      	movs	r3, #34	; 0x22
 800b26e:	f8ce 3000 	str.w	r3, [lr]
 800b272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b276:	2a00      	cmp	r2, #0
 800b278:	d0f1      	beq.n	800b25e <_strtoul_l.isra.0+0xaa>
 800b27a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800b27e:	e7ed      	b.n	800b25c <_strtoul_l.isra.0+0xa8>
 800b280:	f89c 5000 	ldrb.w	r5, [ip]
 800b284:	2601      	movs	r6, #1
 800b286:	f100 0c02 	add.w	ip, r0, #2
 800b28a:	e7a8      	b.n	800b1de <_strtoul_l.isra.0+0x2a>
 800b28c:	2d30      	cmp	r5, #48	; 0x30
 800b28e:	d124      	bne.n	800b2da <_strtoul_l.isra.0+0x126>
 800b290:	f89c 0000 	ldrb.w	r0, [ip]
 800b294:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b298:	2858      	cmp	r0, #88	; 0x58
 800b29a:	d118      	bne.n	800b2ce <_strtoul_l.isra.0+0x11a>
 800b29c:	f04f 0910 	mov.w	r9, #16
 800b2a0:	f89c 5001 	ldrb.w	r5, [ip, #1]
 800b2a4:	464b      	mov	r3, r9
 800b2a6:	f04f 0a0f 	mov.w	sl, #15
 800b2aa:	f10c 0c02 	add.w	ip, ip, #2
 800b2ae:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 800b2b2:	e7a9      	b.n	800b208 <_strtoul_l.isra.0+0x54>
 800b2b4:	f89c 3000 	ldrb.w	r3, [ip]
 800b2b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2bc:	2b58      	cmp	r3, #88	; 0x58
 800b2be:	d0ed      	beq.n	800b29c <_strtoul_l.isra.0+0xe8>
 800b2c0:	2308      	movs	r3, #8
 800b2c2:	4699      	mov	r9, r3
 800b2c4:	f04f 0a07 	mov.w	sl, #7
 800b2c8:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 800b2cc:	e79c      	b.n	800b208 <_strtoul_l.isra.0+0x54>
 800b2ce:	4699      	mov	r9, r3
 800b2d0:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 800b2d4:	f04f 0a0f 	mov.w	sl, #15
 800b2d8:	e796      	b.n	800b208 <_strtoul_l.isra.0+0x54>
 800b2da:	f04f 0a0f 	mov.w	sl, #15
 800b2de:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 800b2e2:	4699      	mov	r9, r3
 800b2e4:	e790      	b.n	800b208 <_strtoul_l.isra.0+0x54>
 800b2e6:	bf00      	nop
 800b2e8:	0800e525 	.word	0x0800e525
 800b2ec:	19999999 	.word	0x19999999

0800b2f0 <strtoul>:
 800b2f0:	b430      	push	{r4, r5}
 800b2f2:	4c04      	ldr	r4, [pc, #16]	; (800b304 <strtoul+0x14>)
 800b2f4:	460d      	mov	r5, r1
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	462a      	mov	r2, r5
 800b2fc:	6820      	ldr	r0, [r4, #0]
 800b2fe:	bc30      	pop	{r4, r5}
 800b300:	f7ff bf58 	b.w	800b1b4 <_strtoul_l.isra.0>
 800b304:	200014b8 	.word	0x200014b8

0800b308 <memcmp>:
 800b308:	2a03      	cmp	r2, #3
 800b30a:	b470      	push	{r4, r5, r6}
 800b30c:	d912      	bls.n	800b334 <memcmp+0x2c>
 800b30e:	ea40 0501 	orr.w	r5, r0, r1
 800b312:	07ad      	lsls	r5, r5, #30
 800b314:	4604      	mov	r4, r0
 800b316:	460b      	mov	r3, r1
 800b318:	d11e      	bne.n	800b358 <memcmp+0x50>
 800b31a:	4619      	mov	r1, r3
 800b31c:	4620      	mov	r0, r4
 800b31e:	f853 5b04 	ldr.w	r5, [r3], #4
 800b322:	f854 6b04 	ldr.w	r6, [r4], #4
 800b326:	42ae      	cmp	r6, r5
 800b328:	d116      	bne.n	800b358 <memcmp+0x50>
 800b32a:	3a04      	subs	r2, #4
 800b32c:	2a03      	cmp	r2, #3
 800b32e:	4620      	mov	r0, r4
 800b330:	4619      	mov	r1, r3
 800b332:	d8f2      	bhi.n	800b31a <memcmp+0x12>
 800b334:	1e56      	subs	r6, r2, #1
 800b336:	b1a2      	cbz	r2, 800b362 <memcmp+0x5a>
 800b338:	3901      	subs	r1, #1
 800b33a:	1e44      	subs	r4, r0, #1
 800b33c:	e001      	b.n	800b342 <memcmp+0x3a>
 800b33e:	18c3      	adds	r3, r0, r3
 800b340:	d00c      	beq.n	800b35c <memcmp+0x54>
 800b342:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800b346:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b34a:	4295      	cmp	r5, r2
 800b34c:	eba6 0304 	sub.w	r3, r6, r4
 800b350:	d0f5      	beq.n	800b33e <memcmp+0x36>
 800b352:	1aa8      	subs	r0, r5, r2
 800b354:	bc70      	pop	{r4, r5, r6}
 800b356:	4770      	bx	lr
 800b358:	1e56      	subs	r6, r2, #1
 800b35a:	e7ed      	b.n	800b338 <memcmp+0x30>
 800b35c:	4618      	mov	r0, r3
 800b35e:	bc70      	pop	{r4, r5, r6}
 800b360:	4770      	bx	lr
 800b362:	4610      	mov	r0, r2
 800b364:	e7f6      	b.n	800b354 <memcmp+0x4c>
 800b366:	bf00      	nop

0800b368 <memset>:
 800b368:	b4f0      	push	{r4, r5, r6, r7}
 800b36a:	0786      	lsls	r6, r0, #30
 800b36c:	d046      	beq.n	800b3fc <memset+0x94>
 800b36e:	1e54      	subs	r4, r2, #1
 800b370:	2a00      	cmp	r2, #0
 800b372:	d03c      	beq.n	800b3ee <memset+0x86>
 800b374:	b2ca      	uxtb	r2, r1
 800b376:	4603      	mov	r3, r0
 800b378:	e001      	b.n	800b37e <memset+0x16>
 800b37a:	3c01      	subs	r4, #1
 800b37c:	d337      	bcc.n	800b3ee <memset+0x86>
 800b37e:	f803 2b01 	strb.w	r2, [r3], #1
 800b382:	079d      	lsls	r5, r3, #30
 800b384:	d1f9      	bne.n	800b37a <memset+0x12>
 800b386:	2c03      	cmp	r4, #3
 800b388:	d92a      	bls.n	800b3e0 <memset+0x78>
 800b38a:	b2cd      	uxtb	r5, r1
 800b38c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800b390:	2c0f      	cmp	r4, #15
 800b392:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800b396:	d934      	bls.n	800b402 <memset+0x9a>
 800b398:	f1a4 0210 	sub.w	r2, r4, #16
 800b39c:	f022 0c0f 	bic.w	ip, r2, #15
 800b3a0:	f103 0720 	add.w	r7, r3, #32
 800b3a4:	0916      	lsrs	r6, r2, #4
 800b3a6:	4467      	add	r7, ip
 800b3a8:	f103 0210 	add.w	r2, r3, #16
 800b3ac:	e942 5504 	strd	r5, r5, [r2, #-16]
 800b3b0:	e942 5502 	strd	r5, r5, [r2, #-8]
 800b3b4:	3210      	adds	r2, #16
 800b3b6:	42ba      	cmp	r2, r7
 800b3b8:	d1f8      	bne.n	800b3ac <memset+0x44>
 800b3ba:	1c72      	adds	r2, r6, #1
 800b3bc:	f014 0f0c 	tst.w	r4, #12
 800b3c0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800b3c4:	f004 060f 	and.w	r6, r4, #15
 800b3c8:	d013      	beq.n	800b3f2 <memset+0x8a>
 800b3ca:	1f33      	subs	r3, r6, #4
 800b3cc:	f023 0303 	bic.w	r3, r3, #3
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f842 5b04 	str.w	r5, [r2], #4
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d1fb      	bne.n	800b3d4 <memset+0x6c>
 800b3dc:	f006 0403 	and.w	r4, r6, #3
 800b3e0:	b12c      	cbz	r4, 800b3ee <memset+0x86>
 800b3e2:	b2ca      	uxtb	r2, r1
 800b3e4:	441c      	add	r4, r3
 800b3e6:	f803 2b01 	strb.w	r2, [r3], #1
 800b3ea:	429c      	cmp	r4, r3
 800b3ec:	d1fb      	bne.n	800b3e6 <memset+0x7e>
 800b3ee:	bcf0      	pop	{r4, r5, r6, r7}
 800b3f0:	4770      	bx	lr
 800b3f2:	4634      	mov	r4, r6
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	2c00      	cmp	r4, #0
 800b3f8:	d1f3      	bne.n	800b3e2 <memset+0x7a>
 800b3fa:	e7f8      	b.n	800b3ee <memset+0x86>
 800b3fc:	4614      	mov	r4, r2
 800b3fe:	4603      	mov	r3, r0
 800b400:	e7c1      	b.n	800b386 <memset+0x1e>
 800b402:	461a      	mov	r2, r3
 800b404:	4626      	mov	r6, r4
 800b406:	e7e0      	b.n	800b3ca <memset+0x62>

0800b408 <strchr>:
 800b408:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800b40c:	4603      	mov	r3, r0
 800b40e:	f000 0203 	and.w	r2, r0, #3
 800b412:	d043      	beq.n	800b49c <strchr+0x94>
 800b414:	bb92      	cbnz	r2, 800b47c <strchr+0x74>
 800b416:	b470      	push	{r4, r5, r6}
 800b418:	6804      	ldr	r4, [r0, #0]
 800b41a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800b41e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800b422:	ea86 0504 	eor.w	r5, r6, r4
 800b426:	f1a5 3301 	sub.w	r3, r5, #16843009	; 0x1010101
 800b42a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800b42e:	ea23 0305 	bic.w	r3, r3, r5
 800b432:	ea22 0204 	bic.w	r2, r2, r4
 800b436:	4313      	orrs	r3, r2
 800b438:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b43c:	d10f      	bne.n	800b45e <strchr+0x56>
 800b43e:	f850 4f04 	ldr.w	r4, [r0, #4]!
 800b442:	ea84 0506 	eor.w	r5, r4, r6
 800b446:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 800b44a:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 800b44e:	ea22 0205 	bic.w	r2, r2, r5
 800b452:	ea23 0304 	bic.w	r3, r3, r4
 800b456:	4313      	orrs	r3, r2
 800b458:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b45c:	d0ef      	beq.n	800b43e <strchr+0x36>
 800b45e:	7803      	ldrb	r3, [r0, #0]
 800b460:	b923      	cbnz	r3, 800b46c <strchr+0x64>
 800b462:	e036      	b.n	800b4d2 <strchr+0xca>
 800b464:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d032      	beq.n	800b4d2 <strchr+0xca>
 800b46c:	4299      	cmp	r1, r3
 800b46e:	d1f9      	bne.n	800b464 <strchr+0x5c>
 800b470:	e030      	b.n	800b4d4 <strchr+0xcc>
 800b472:	428a      	cmp	r2, r1
 800b474:	d011      	beq.n	800b49a <strchr+0x92>
 800b476:	079a      	lsls	r2, r3, #30
 800b478:	4618      	mov	r0, r3
 800b47a:	d0cc      	beq.n	800b416 <strchr+0xe>
 800b47c:	4618      	mov	r0, r3
 800b47e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b482:	2a00      	cmp	r2, #0
 800b484:	d1f5      	bne.n	800b472 <strchr+0x6a>
 800b486:	4610      	mov	r0, r2
 800b488:	4770      	bx	lr
 800b48a:	0799      	lsls	r1, r3, #30
 800b48c:	4618      	mov	r0, r3
 800b48e:	d007      	beq.n	800b4a0 <strchr+0x98>
 800b490:	4618      	mov	r0, r3
 800b492:	3301      	adds	r3, #1
 800b494:	7802      	ldrb	r2, [r0, #0]
 800b496:	2a00      	cmp	r2, #0
 800b498:	d1f7      	bne.n	800b48a <strchr+0x82>
 800b49a:	4770      	bx	lr
 800b49c:	2a00      	cmp	r2, #0
 800b49e:	d1f7      	bne.n	800b490 <strchr+0x88>
 800b4a0:	6802      	ldr	r2, [r0, #0]
 800b4a2:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800b4a6:	ea23 0302 	bic.w	r3, r3, r2
 800b4aa:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b4ae:	d108      	bne.n	800b4c2 <strchr+0xba>
 800b4b0:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800b4b4:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800b4b8:	ea23 0302 	bic.w	r3, r3, r2
 800b4bc:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b4c0:	d0f6      	beq.n	800b4b0 <strchr+0xa8>
 800b4c2:	7803      	ldrb	r3, [r0, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d0e8      	beq.n	800b49a <strchr+0x92>
 800b4c8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1fb      	bne.n	800b4c8 <strchr+0xc0>
 800b4d0:	4770      	bx	lr
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	bc70      	pop	{r4, r5, r6}
 800b4d6:	4770      	bx	lr

0800b4d8 <strncmp>:
 800b4d8:	b39a      	cbz	r2, 800b542 <strncmp+0x6a>
 800b4da:	b4f0      	push	{r4, r5, r6, r7}
 800b4dc:	ea40 0501 	orr.w	r5, r0, r1
 800b4e0:	07ad      	lsls	r5, r5, #30
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	4608      	mov	r0, r1
 800b4e8:	d028      	beq.n	800b53c <strncmp+0x64>
 800b4ea:	7820      	ldrb	r0, [r4, #0]
 800b4ec:	780e      	ldrb	r6, [r1, #0]
 800b4ee:	4286      	cmp	r6, r0
 800b4f0:	d129      	bne.n	800b546 <strncmp+0x6e>
 800b4f2:	2a01      	cmp	r2, #1
 800b4f4:	d02a      	beq.n	800b54c <strncmp+0x74>
 800b4f6:	4625      	mov	r5, r4
 800b4f8:	b150      	cbz	r0, 800b510 <strncmp+0x38>
 800b4fa:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800b4fe:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800b502:	43eb      	mvns	r3, r5
 800b504:	42b0      	cmp	r0, r6
 800b506:	4413      	add	r3, r2
 800b508:	d11d      	bne.n	800b546 <strncmp+0x6e>
 800b50a:	18e3      	adds	r3, r4, r3
 800b50c:	d1f4      	bne.n	800b4f8 <strncmp+0x20>
 800b50e:	4618      	mov	r0, r3
 800b510:	bcf0      	pop	{r4, r5, r6, r7}
 800b512:	4770      	bx	lr
 800b514:	6807      	ldr	r7, [r0, #0]
 800b516:	461c      	mov	r4, r3
 800b518:	f853 5b04 	ldr.w	r5, [r3], #4
 800b51c:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 800b520:	42bd      	cmp	r5, r7
 800b522:	4601      	mov	r1, r0
 800b524:	ea26 0605 	bic.w	r6, r6, r5
 800b528:	f100 0004 	add.w	r0, r0, #4
 800b52c:	d1dd      	bne.n	800b4ea <strncmp+0x12>
 800b52e:	3a04      	subs	r2, #4
 800b530:	461c      	mov	r4, r3
 800b532:	4601      	mov	r1, r0
 800b534:	d00a      	beq.n	800b54c <strncmp+0x74>
 800b536:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 800b53a:	d107      	bne.n	800b54c <strncmp+0x74>
 800b53c:	2a03      	cmp	r2, #3
 800b53e:	d8e9      	bhi.n	800b514 <strncmp+0x3c>
 800b540:	e7d3      	b.n	800b4ea <strncmp+0x12>
 800b542:	4610      	mov	r0, r2
 800b544:	4770      	bx	lr
 800b546:	1b80      	subs	r0, r0, r6
 800b548:	bcf0      	pop	{r4, r5, r6, r7}
 800b54a:	4770      	bx	lr
 800b54c:	2000      	movs	r0, #0
 800b54e:	bcf0      	pop	{r4, r5, r6, r7}
 800b550:	4770      	bx	lr
 800b552:	bf00      	nop

0800b554 <strncpy>:
 800b554:	b470      	push	{r4, r5, r6}
 800b556:	ea40 0401 	orr.w	r4, r0, r1
 800b55a:	07a3      	lsls	r3, r4, #30
 800b55c:	d101      	bne.n	800b562 <strncpy+0xe>
 800b55e:	2a03      	cmp	r2, #3
 800b560:	d80f      	bhi.n	800b582 <strncpy+0x2e>
 800b562:	4604      	mov	r4, r0
 800b564:	1e4d      	subs	r5, r1, #1
 800b566:	e007      	b.n	800b578 <strncpy+0x24>
 800b568:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800b56c:	f803 1b01 	strb.w	r1, [r3], #1
 800b570:	1e56      	subs	r6, r2, #1
 800b572:	b1c9      	cbz	r1, 800b5a8 <strncpy+0x54>
 800b574:	461c      	mov	r4, r3
 800b576:	4632      	mov	r2, r6
 800b578:	4623      	mov	r3, r4
 800b57a:	2a00      	cmp	r2, #0
 800b57c:	d1f4      	bne.n	800b568 <strncpy+0x14>
 800b57e:	bc70      	pop	{r4, r5, r6}
 800b580:	4770      	bx	lr
 800b582:	460b      	mov	r3, r1
 800b584:	4604      	mov	r4, r0
 800b586:	4619      	mov	r1, r3
 800b588:	f853 6b04 	ldr.w	r6, [r3], #4
 800b58c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800b590:	ea25 0506 	bic.w	r5, r5, r6
 800b594:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800b598:	d1e4      	bne.n	800b564 <strncpy+0x10>
 800b59a:	3a04      	subs	r2, #4
 800b59c:	2a03      	cmp	r2, #3
 800b59e:	f844 6b04 	str.w	r6, [r4], #4
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	d8ef      	bhi.n	800b586 <strncpy+0x32>
 800b5a6:	e7dd      	b.n	800b564 <strncpy+0x10>
 800b5a8:	4422      	add	r2, r4
 800b5aa:	2e00      	cmp	r6, #0
 800b5ac:	d0e7      	beq.n	800b57e <strncpy+0x2a>
 800b5ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d1fb      	bne.n	800b5ae <strncpy+0x5a>
 800b5b6:	bc70      	pop	{r4, r5, r6}
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop

0800b5bc <strpbrk>:
 800b5bc:	b430      	push	{r4, r5}
 800b5be:	7804      	ldrb	r4, [r0, #0]
 800b5c0:	b1a4      	cbz	r4, 800b5ec <strpbrk+0x30>
 800b5c2:	780d      	ldrb	r5, [r1, #0]
 800b5c4:	460a      	mov	r2, r1
 800b5c6:	462b      	mov	r3, r5
 800b5c8:	b91d      	cbnz	r5, 800b5d2 <strpbrk+0x16>
 800b5ca:	e00a      	b.n	800b5e2 <strpbrk+0x26>
 800b5cc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b5d0:	b13b      	cbz	r3, 800b5e2 <strpbrk+0x26>
 800b5d2:	429c      	cmp	r4, r3
 800b5d4:	d1fa      	bne.n	800b5cc <strpbrk+0x10>
 800b5d6:	7813      	ldrb	r3, [r2, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	bf08      	it	eq
 800b5dc:	2000      	moveq	r0, #0
 800b5de:	bc30      	pop	{r4, r5}
 800b5e0:	4770      	bx	lr
 800b5e2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800b5e6:	2c00      	cmp	r4, #0
 800b5e8:	d1ec      	bne.n	800b5c4 <strpbrk+0x8>
 800b5ea:	e7f4      	b.n	800b5d6 <strpbrk+0x1a>
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	bc30      	pop	{r4, r5}
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop

0800b5f4 <strspn>:
 800b5f4:	b470      	push	{r4, r5, r6}
 800b5f6:	7804      	ldrb	r4, [r0, #0]
 800b5f8:	b18c      	cbz	r4, 800b61e <strspn+0x2a>
 800b5fa:	780e      	ldrb	r6, [r1, #0]
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	b15e      	cbz	r6, 800b618 <strspn+0x24>
 800b600:	460a      	mov	r2, r1
 800b602:	4633      	mov	r3, r6
 800b604:	e002      	b.n	800b60c <strspn+0x18>
 800b606:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b60a:	b12b      	cbz	r3, 800b618 <strspn+0x24>
 800b60c:	42a3      	cmp	r3, r4
 800b60e:	d1fa      	bne.n	800b606 <strspn+0x12>
 800b610:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800b614:	2c00      	cmp	r4, #0
 800b616:	d1f2      	bne.n	800b5fe <strspn+0xa>
 800b618:	1a28      	subs	r0, r5, r0
 800b61a:	bc70      	pop	{r4, r5, r6}
 800b61c:	4770      	bx	lr
 800b61e:	4620      	mov	r0, r4
 800b620:	e7fb      	b.n	800b61a <strspn+0x26>
 800b622:	bf00      	nop
